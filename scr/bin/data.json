{"dmLogDebug format, args": [{"prefix": "dmLogDebug format, args", "body": "dmLogDebug", "description": "macro for debug category logging"}], "dmLogError format, args": [{"prefix": "dmLogError format, args", "body": "dmLogError", "description": "macro for error category logging"}], "dmLogFatal format, args": [{"prefix": "dmLogFatal format, args", "body": "dmLogFatal", "description": "macro for fatal category logging"}], "dmLogInfo format, args": [{"prefix": "dmLogInfo format, args", "body": "dmLogInfo", "description": "macro for info category logging"}], "dmLogUserDebug format, args": [{"prefix": "dmLogUserDebug format, args", "body": "dmLogUserDebug", "description": "macro for debug category logging"}], "dmLogWarning format, args": [{"prefix": "dmLogWarning format, args", "body": "dmLogWarning", "description": "macro for warning category logging"}], "facebook.AUDIENCE_EVERYONE": [{"prefix": "facebook.AUDIENCE_EVERYONE", "body": "facebook.AUDIENCE_EVERYONE", "description": "publish permission to reach everyone"}], "facebook.AUDIENCE_FRIENDS": [{"prefix": "facebook.AUDIENCE_FRIENDS", "body": "facebook.AUDIENCE_FRIENDS", "description": "publish permission to reach user friends"}], "facebook.AUDIENCE_NONE": [{"prefix": "facebook.AUDIENCE_NONE", "body": "facebook.AUDIENCE_NONE", "description": "publish permission to reach no audience"}], "facebook.AUDIENCE_ONLYME": [{"prefix": "facebook.AUDIENCE_ONLYME", "body": "facebook.AUDIENCE_ONLYME", "description": "publish permission to reach only me (private to current user)"}], "facebook.EVENT_ADDED_PAYMENT_INFO": [{"prefix": "facebook.EVENT_ADDED_PAYMENT_INFO", "body": "facebook.EVENT_ADDED_PAYMENT_INFO", "description": "log this event when the user has entered their payment info"}], "facebook.EVENT_ADDED_TO_CART": [{"prefix": "facebook.EVENT_ADDED_TO_CART", "body": "facebook.EVENT_ADDED_TO_CART", "description": "log this event when the user has added an item to their cart"}], "facebook.EVENT_ADDED_TO_WISHLIST": [{"prefix": "facebook.EVENT_ADDED_TO_WISHLIST", "body": "facebook.EVENT_ADDED_TO_WISHLIST", "description": "log this event when the user has added an item to their wish list"}], "facebook.EVENT_COMPLETED_REGISTRATION": [{"prefix": "facebook.EVENT_COMPLETED_REGISTRATION", "body": "facebook.EVENT_COMPLETED_REGISTRATION", "description": "log this event when a user has completed registration with the app"}], "facebook.EVENT_COMPLETED_TUTORIAL": [{"prefix": "facebook.EVENT_COMPLETED_TUTORIAL", "body": "facebook.EVENT_COMPLETED_TUTORIAL", "description": "log this event when the user has completed a tutorial in the app"}], "facebook.EVENT_INITIATED_CHECKOUT": [{"prefix": "facebook.EVENT_INITIATED_CHECKOUT", "body": "facebook.EVENT_INITIATED_CHECKOUT", "description": "log this event when the user has entered the checkout process"}], "facebook.EVENT_PURCHASED": [{"prefix": "facebook.EVENT_PURCHASED", "body": "facebook.EVENT_PURCHASED", "description": "Log this event when the user has completed a purchase."}], "facebook.EVENT_RATED": [{"prefix": "facebook.EVENT_RATED", "body": "facebook.EVENT_RATED", "description": "log this event when the user has rated an item in the app"}], "facebook.EVENT_SEARCHED": [{"prefix": "facebook.EVENT_SEARCHED", "body": "facebook.EVENT_SEARCHED", "description": "log this event when a user has performed a search within the app"}], "facebook.EVENT_SPENT_CREDITS": [{"prefix": "facebook.EVENT_SPENT_CREDITS", "body": "facebook.EVENT_SPENT_CREDITS", "description": "log this event when the user has spent app credits"}], "facebook.EVENT_TIME_BETWEEN_SESSIONS": [{"prefix": "facebook.EVENT_TIME_BETWEEN_SESSIONS", "body": "facebook.EVENT_TIME_BETWEEN_SESSIONS", "description": "log this event when measuring the time between user sessions"}], "facebook.EVENT_UNLOCKED_ACHIEVEMENT": [{"prefix": "facebook.EVENT_UNLOCKED_ACHIEVEMENT", "body": "facebook.EVENT_UNLOCKED_ACHIEVEMENT", "description": "log this event when the user has unlocked an achievement in the app"}], "facebook.EVENT_VIEWED_CONTENT": [{"prefix": "facebook.EVENT_VIEWED_CONTENT", "body": "facebook.EVENT_VIEWED_CONTENT", "description": "log this event when a user has viewed a form of content in the app"}], "facebook.GAMEREQUEST_ACTIONTYPE_ASKFOR": [{"prefix": "facebook.GAMEREQUEST_ACTIONTYPE_ASKFOR", "body": "facebook.GAMEREQUEST_ACTIONTYPE_ASKFOR", "description": "game request action type \"askfor\" for \"apprequests\" dialog"}], "facebook.GAMEREQUEST_ACTIONTYPE_NONE": [{"prefix": "facebook.GAMEREQUEST_ACTIONTYPE_NONE", "body": "facebook.GAMEREQUEST_ACTIONTYPE_NONE", "description": "game request action type \"none\" for \"apprequests\" dialog"}], "facebook.GAMEREQUEST_ACTIONTYPE_SEND": [{"prefix": "facebook.GAMEREQUEST_ACTIONTYPE_SEND", "body": "facebook.GAMEREQUEST_ACTIONTYPE_SEND", "description": "game request action type \"send\" for \"apprequests\" dialog"}], "facebook.GAMEREQUEST_ACTIONTYPE_TURN": [{"prefix": "facebook.GAMEREQUEST_ACTIONTYPE_TURN", "body": "facebook.GAMEREQUEST_ACTIONTYPE_TURN", "description": "game request action type \"turn\" for \"apprequests\" dialog"}], "facebook.GAMEREQUEST_FILTER_APPNONUSERS": [{"prefix": "facebook.GAMEREQUEST_FILTER_APPNONUSERS", "body": "facebook.GAMEREQUEST_FILTER_APPNONUSERS", "description": "game request filter type \"app_non_users\" for \"apprequests\" dialog"}], "facebook.GAMEREQUEST_FILTER_APPUSERS": [{"prefix": "facebook.GAMEREQUEST_FILTER_APPUSERS", "body": "facebook.GAMEREQUEST_FILTER_APPUSERS", "description": "game request filter type \"app_users\" for \"apprequests\" dialog"}], "facebook.GAMEREQUEST_FILTER_NONE": [{"prefix": "facebook.GAMEREQUEST_FILTER_NONE", "body": "facebook.GAMEREQUEST_FILTER_NONE", "description": "game request filter type \"none\" for \"apprequests\" dialog"}], "facebook.PARAM_CONTENT_ID": [{"prefix": "facebook.PARAM_CONTENT_ID", "body": "facebook.PARAM_CONTENT_ID", "description": "parameter key used to specify an ID for the content being logged about"}], "facebook.PARAM_CONTENT_TYPE": [{"prefix": "facebook.PARAM_CONTENT_TYPE", "body": "facebook.PARAM_CONTENT_TYPE", "description": "parameter key used to specify a generic content type/family for the logged event"}], "facebook.PARAM_CURRENCY": [{"prefix": "facebook.PARAM_CURRENCY", "body": "facebook.PARAM_CURRENCY", "description": "parameter key used to specify currency used with logged event"}], "facebook.PARAM_DESCRIPTION": [{"prefix": "facebook.PARAM_DESCRIPTION", "body": "facebook.PARAM_DESCRIPTION", "description": "parameter key used to specify a description appropriate to the event being logged"}], "facebook.PARAM_LEVEL": [{"prefix": "facebook.PARAM_LEVEL", "body": "facebook.PARAM_LEVEL", "description": "parameter key used to specify the level achieved"}], "facebook.PARAM_MAX_RATING_VALUE": [{"prefix": "facebook.PARAM_MAX_RATING_VALUE", "body": "facebook.PARAM_MAX_RATING_VALUE", "description": "parameter key used to specify the maximum rating available"}], "facebook.PARAM_NUM_ITEMS": [{"prefix": "facebook.PARAM_NUM_ITEMS", "body": "facebook.PARAM_NUM_ITEMS", "description": "parameter key used to specify how many items are being processed"}], "facebook.PARAM_PAYMENT_INFO_AVAILABLE": [{"prefix": "facebook.PARAM_PAYMENT_INFO_AVAILABLE", "body": "facebook.PARAM_PAYMENT_INFO_AVAILABLE", "description": "parameter key used to specify whether payment info is available"}], "facebook.PARAM_REGISTRATION_METHOD": [{"prefix": "facebook.PARAM_REGISTRATION_METHOD", "body": "facebook.PARAM_REGISTRATION_METHOD", "description": "parameter key used to specify method user has used to register for the app"}], "facebook.PARAM_SEARCH_STRING": [{"prefix": "facebook.PARAM_SEARCH_STRING", "body": "facebook.PARAM_SEARCH_STRING", "description": "parameter key used to specify user search string"}], "facebook.PARAM_SOURCE_APPLICATION": [{"prefix": "facebook.PARAM_SOURCE_APPLICATION", "body": "facebook.PARAM_SOURCE_APPLICATION", "description": "parameter key used to specify source application package"}], "facebook.PARAM_SUCCESS": [{"prefix": "facebook.PARAM_SUCCESS", "body": "facebook.PARAM_SUCCESS", "description": "parameter key used to specify activity success"}], "facebook.STATE_CLOSED_LOGIN_FAILED": [{"prefix": "facebook.STATE_CLOSED_LOGIN_FAILED", "body": "facebook.STATE_CLOSED_LOGIN_FAILED", "description": "the Facebook login session has closed because login failed"}], "facebook.STATE_OPEN": [{"prefix": "facebook.STATE_OPEN", "body": "facebook.STATE_OPEN", "description": "the Facebook login session is open"}], "facebook.access_token": [{"prefix": "facebook.access_token", "body": "facebook.access_token()", "description": "get the current Facebook access token"}], "facebook.disable_event_usage": [{"prefix": "facebook.disable_event_usage", "body": "facebook.disable_event_usage()", "description": "disable event usage with Facebook Analytics"}], "facebook.enable_event_usage": [{"prefix": "facebook.enable_event_usage", "body": "facebook.enable_event_usage()", "description": "enable event usage with Facebook Analytics"}], "facebook.login_with_publish_permissions permissions, audience, callback": [{"prefix": "facebook.login_with_publish_permissions permissions, audience, callback", "body": "facebook.login_with_publish_permissions(${1:permissions}, ${2:audience}, ${3:callback})", "description": "Login to Facebook and request a set of publish permissions"}], "facebook.login_with_read_permissions permissions, callback": [{"prefix": "facebook.login_with_read_permissions permissions, callback", "body": "facebook.login_with_read_permissions(${1:permissions}, ${2:callback})", "description": "Login to Facebook and request a set of read permissions"}], "facebook.logout": [{"prefix": "facebook.logout", "body": "facebook.logout()", "description": "logout from Facebook"}], "facebook.permissions": [{"prefix": "facebook.permissions", "body": "facebook.permissions()", "description": "get the currently granted permissions"}], "facebook.post_event event, value, [params]": [{"prefix": "facebook.post_event event, value, [params]", "body": "facebook.post_event(${1:event}, ${2:value}, ${3:[params]})", "description": "post an event to Facebook Analytics"}], "facebook.show_dialog dialog, param, callback": [{"prefix": "facebook.show_dialog dialog, param, callback", "body": "facebook.show_dialog(${1:dialog}, ${2:param}, ${3:callback})", "description": "show facebook web dialog"}], "iap.PROVIDER_ID_AMAZON": [{"prefix": "iap.PROVIDER_ID_AMAZON", "body": "iap.PROVIDER_ID_AMAZON", "description": "provider id for Amazon"}], "iap.PROVIDER_ID_APPLE": [{"prefix": "iap.PROVIDER_ID_APPLE", "body": "iap.PROVIDER_ID_APPLE", "description": "provider id for Apple"}], "iap.PROVIDER_ID_FACEBOOK": [{"prefix": "iap.PROVIDER_ID_FACEBOOK", "body": "iap.PROVIDER_ID_FACEBOOK", "description": "provider id for Facebook"}], "iap.PROVIDER_ID_GAMEROOM": [{"prefix": "iap.PROVIDER_ID_GAMEROOM", "body": "iap.PROVIDER_ID_GAMEROOM", "description": "provider id for Facebook Gameroom"}], "iap.PROVIDER_ID_GOOGLE": [{"prefix": "iap.PROVIDER_ID_GOOGLE", "body": "iap.PROVIDER_ID_GOOGLE", "description": "iap provider id for Google"}], "iap.REASON_UNSPECIFIED": [{"prefix": "iap.REASON_UNSPECIFIED", "body": "iap.REASON_UNSPECIFIED", "description": "unspecified error reason"}], "iap.REASON_USER_CANCELED": [{"prefix": "iap.REASON_USER_CANCELED", "body": "iap.REASON_USER_CANCELED", "description": "user canceled reason"}], "iap.TRANS_STATE_FAILED": [{"prefix": "iap.TRANS_STATE_FAILED", "body": "iap.TRANS_STATE_FAILED", "description": "transaction failed state"}], "iap.TRANS_STATE_PURCHASED": [{"prefix": "iap.TRANS_STATE_PURCHASED", "body": "iap.TRANS_STATE_PURCHASED", "description": "transaction purchased state"}], "iap.TRANS_STATE_PURCHASING": [{"prefix": "iap.TRANS_STATE_PURCHASING", "body": "iap.TRANS_STATE_PURCHASING", "description": "transaction purchasing state"}], "iap.TRANS_STATE_RESTORED": [{"prefix": "iap.TRANS_STATE_RESTORED", "body": "iap.TRANS_STATE_RESTORED", "description": "transaction restored state"}], "iap.TRANS_STATE_UNVERIFIED": [{"prefix": "iap.TRANS_STATE_UNVERIFIED", "body": "iap.TRANS_STATE_UNVERIFIED", "description": "transaction unverified state, requires verification of purchase"}], "iap.buy id, [options]": [{"prefix": "iap.buy id, [options]", "body": "iap.buy(${1:id}, ${2:[options]})", "description": "buy product"}], "iap.buy_premium": [{"prefix": "iap.buy_premium", "body": "iap.buy_premium()", "description": "purchase a premium license"}], "iap.finish transaction": [{"prefix": "iap.finish transaction", "body": "iap.finish(${1:transaction})", "description": "finish buying product"}], "iap.get_provider_id": [{"prefix": "iap.get_provider_id", "body": "iap.get_provider_id()", "description": "get current provider id"}], "iap.has_premium callback": [{"prefix": "iap.has_premium callback", "body": "iap.has_premium(${1:callback})", "description": "check if user has already purchased premium license"}], "iap.list ids, callback": [{"prefix": "iap.list ids, callback", "body": "iap.list(${1:ids}, ${2:callback})", "description": "list in-app products"}], "iap.restore": [{"prefix": "iap.restore", "body": "iap.restore()", "description": "restore products (non-consumable)"}], "iap.set_listener listener": [{"prefix": "iap.set_listener listener", "body": "iap.set_listener(${1:listener})", "description": "set purchase transaction listener"}], "async_load": [{"prefix": "async_load", "body": "msg.post(${1:receiver}, \"async_load\")", "description": "tells a collection proxy to start asynchronous loading of the referenced collection"}], "collectionproxy.missing_resources collectionproxy": [{"prefix": "collectionproxy.missing_resources collectionproxy", "body": "collectionproxy.missing_resources(${1:collectionproxy})", "description": "return an indexed table of missing resources for a collection proxy"}], "disable": [{"prefix": "disable", "body": "msg.post(${1:receiver}, \"disable\")", "description": "tells a collection proxy to disable the referenced collection"}, {"prefix": "disable", "body": "msg.post(${1:receiver}, \"disable\")", "description": "disables the receiving component"}], "enable": [{"prefix": "enable", "body": "msg.post(${1:receiver}, \"enable\")", "description": "tells a collection proxy to enable the referenced collection"}, {"prefix": "enable", "body": "msg.post(${1:receiver}, \"enable\")", "description": "enables the receiving component"}], "final": [{"prefix": "final", "body": "msg.post(${1:receiver}, \"final\")", "description": "tells a collection proxy to finalize the referenced collection"}], "init": [{"prefix": "init", "body": "msg.post(${1:receiver}, \"init\")", "description": "tells a collection proxy to initialize the loaded collection"}], "load": [{"prefix": "load", "body": "msg.post(${1:receiver}, \"load\")", "description": "tells a collection proxy to start loading the referenced collection"}], "proxy_loaded": [{"prefix": "proxy_loaded", "body": "msg.post(${1:receiver}, \"proxy_loaded\")", "description": "reports that a collection proxy has loaded its referenced collection"}], "proxy_unloaded": [{"prefix": "proxy_unloaded", "body": "msg.post(${1:receiver}, \"proxy_unloaded\")", "description": "reports that a collection proxy has unloaded its referenced collection"}], "set_time_step factor, mode": [{"prefix": "set_time_step factor, mode", "body": "msg.post(${1:receiver}, \"set_time_step\", ${2:{${3:factor}, ${4:mode}\\}})", "description": "sets the time-step for update"}], "unload": [{"prefix": "unload", "body": "msg.post(${1:receiver}, \"unload\")", "description": "tells a collection proxy to start unloading the referenced collection"}], "html5.run code": [{"prefix": "html5.run code", "body": "html5.run(${1:code})", "description": "run JavaScript code, in the browser, from Lua"}], "math.abs x": [{"prefix": "math.abs x", "body": "math.abs(${1:x})", "description": "absolute value"}], "math.acos x": [{"prefix": "math.acos x", "body": "math.acos(${1:x})", "description": "arc cosine"}], "math.asin x": [{"prefix": "math.asin x", "body": "math.asin(${1:x})", "description": "arc sine"}], "math.atan x": [{"prefix": "math.atan x", "body": "math.atan(${1:x})", "description": "arc tangent"}], "math.atan2 y, x": [{"prefix": "math.atan2 y, x", "body": "math.atan2(${1:y}, ${2:x})", "description": "arc tangent of v1/v2"}], "math.ceil x": [{"prefix": "math.ceil x", "body": "math.ceil(${1:x})", "description": "next higher integer value"}], "math.cos x": [{"prefix": "math.cos x", "body": "math.cos(${1:x})", "description": "cosine"}], "math.cosh x": [{"prefix": "math.cosh x", "body": "math.cosh(${1:x})", "description": "hyperbolic cosine"}], "math.deg x": [{"prefix": "math.deg x", "body": "math.deg(${1:x})", "description": "convert from radians to degrees"}], "math.exp x": [{"prefix": "math.exp x", "body": "math.exp(${1:x})", "description": "raises e to a power"}], "math.floor x": [{"prefix": "math.floor x", "body": "math.floor(${1:x})", "description": "next smaller integer value"}], "math.fmod x, y": [{"prefix": "math.fmod x, y", "body": "math.fmod(${1:x}, ${2:y})", "description": "the modulus (remainder) of doing: v1 / v2"}], "math.frexp x": [{"prefix": "math.frexp x", "body": "math.frexp(${1:x})", "description": "break number into mantissa and exponent"}], "math.huge": [{"prefix": "math.huge", "body": "math.huge()", "description": "a huge value"}], "math.ldexp m, e": [{"prefix": "math.ldexp m, e", "body": "math.ldexp(${1:m}, ${2:e})", "description": "compute m* 2^n"}], "math.log x": [{"prefix": "math.log x", "body": "math.log(${1:x})", "description": "natural log"}], "math.log10 x": [{"prefix": "math.log10 x", "body": "math.log10(${1:x})", "description": "log to the base 10"}], "math.max x, ...": [{"prefix": "math.max x, ...", "body": "math.max(${1:x}, ${2:...})", "description": "the highest of one or more numbers"}], "math.min x, ...": [{"prefix": "math.min x, ...", "body": "math.min(${1:x}, ${2:...})", "description": "the lowest of one or more numbers"}], "math.modf x": [{"prefix": "math.modf x", "body": "math.modf(${1:x})", "description": "returns the integral and fractional part of its argument"}], "math.pi": [{"prefix": "math.pi", "body": "math.pi", "description": "the value of pi"}], "math.pow x, y": [{"prefix": "math.pow x, y", "body": "math.pow(${1:x}, ${2:y})", "description": "raise a number to a power"}], "math.rad x": [{"prefix": "math.rad x", "body": "math.rad(${1:x})", "description": "convert degrees to radians"}], "math.random [m], [n]": [{"prefix": "math.random [m], [n]", "body": "math.random(${1:[m]}, ${2:[n]})", "description": "generate a random number"}], "math.randomseed x": [{"prefix": "math.randomseed x", "body": "math.randomseed(${1:x})", "description": "seeds the random number generator"}], "math.sin x": [{"prefix": "math.sin x", "body": "math.sin(${1:x})", "description": "sine"}], "math.sinh x": [{"prefix": "math.sinh x", "body": "math.sinh(${1:x})", "description": "hyperbolic sine"}], "math.sqrt x": [{"prefix": "math.sqrt x", "body": "math.sqrt(${1:x})", "description": "square root"}], "math.tan x": [{"prefix": "math.tan x", "body": "math.tan(${1:x})", "description": "tangent"}], "math.tanh x": [{"prefix": "math.tanh x", "body": "math.tanh(${1:x})", "description": "hyperbolic tangent"}], "buffer.VALUE_TYPE_FLOAT32": [{"prefix": "buffer.VALUE_TYPE_FLOAT32", "body": "buffer.VALUE_TYPE_FLOAT32", "description": "float32"}], "buffer.VALUE_TYPE_INT16": [{"prefix": "buffer.VALUE_TYPE_INT16", "body": "buffer.VALUE_TYPE_INT16", "description": "int16"}], "buffer.VALUE_TYPE_INT32": [{"prefix": "buffer.VALUE_TYPE_INT32", "body": "buffer.VALUE_TYPE_INT32", "description": "int32"}], "buffer.VALUE_TYPE_INT64": [{"prefix": "buffer.VALUE_TYPE_INT64", "body": "buffer.VALUE_TYPE_INT64", "description": "int64"}], "buffer.VALUE_TYPE_INT8": [{"prefix": "buffer.VALUE_TYPE_INT8", "body": "buffer.VALUE_TYPE_INT8", "description": "int8"}], "buffer.VALUE_TYPE_UINT16": [{"prefix": "buffer.VALUE_TYPE_UINT16", "body": "buffer.VALUE_TYPE_UINT16", "description": "uint16"}], "buffer.VALUE_TYPE_UINT32": [{"prefix": "buffer.VALUE_TYPE_UINT32", "body": "buffer.VALUE_TYPE_UINT32", "description": "uint32"}], "buffer.VALUE_TYPE_UINT64": [{"prefix": "buffer.VALUE_TYPE_UINT64", "body": "buffer.VALUE_TYPE_UINT64", "description": "uint64"}], "buffer.VALUE_TYPE_UINT8": [{"prefix": "buffer.VALUE_TYPE_UINT8", "body": "buffer.VALUE_TYPE_UINT8", "description": "uint8"}], "buffer.copy_buffer dst, dstoffset, src, srcoffset, count": [{"prefix": "buffer.copy_buffer dst, dstoffset, src, srcoffset, count", "body": "buffer.copy_buffer(${1:dst}, ${2:dstoffset}, ${3:src}, ${4:srcoffset}, ${5:count})", "description": "copies one buffer to another"}], "buffer.copy_stream dst, dstoffset, src, srcoffset, count": [{"prefix": "buffer.copy_stream dst, dstoffset, src, srcoffset, count", "body": "buffer.copy_stream(${1:dst}, ${2:dstoffset}, ${3:src}, ${4:srcoffset}, ${5:count})", "description": "copies data from one stream to another"}], "buffer.create element_count, declaration": [{"prefix": "buffer.create element_count, declaration", "body": "buffer.create(${1:element_count}, ${2:declaration})", "description": "creates a new buffer"}], "buffer.get_bytes buffer, stream_name": [{"prefix": "buffer.get_bytes buffer, stream_name", "body": "buffer.get_bytes(${1:buffer}, ${2:stream_name})", "description": "gets data from a stream"}], "buffer.get_stream buffer, stream_name": [{"prefix": "buffer.get_stream buffer, stream_name", "body": "buffer.get_stream(${1:buffer}, ${2:stream_name})", "description": "gets a stream from a buffer"}], "dmGraphics::GetNativeAndroidActivity": [{"prefix": "dmGraphics::GetNativeAndroidActivity", "body": "dmGraphics::GetNativeAndroidActivity()", "description": "get Android native jobject"}], "dmGraphics::GetNativeAndroidApp": [{"prefix": "dmGraphics::GetNativeAndroidApp", "body": "dmGraphics::GetNativeAndroidApp()", "description": "get Android app object"}], "dmGraphics::GetNativeAndroidEGLContext": [{"prefix": "dmGraphics::GetNativeAndroidEGLContext", "body": "dmGraphics::GetNativeAndroidEGLContext()", "description": "get Android EGLContext"}], "dmGraphics::GetNativeAndroidEGLSurface": [{"prefix": "dmGraphics::GetNativeAndroidEGLSurface", "body": "dmGraphics::GetNativeAndroidEGLSurface()", "description": "get Android EGLSurface"}], "dmGraphics::GetNativeAndroidJavaVM": [{"prefix": "dmGraphics::GetNativeAndroidJavaVM", "body": "dmGraphics::GetNativeAndroidJavaVM()", "description": "get Android native JavaVM"}], "dmGraphics::GetNativeOSXNSOpenGLContext": [{"prefix": "dmGraphics::GetNativeOSXNSOpenGLContext", "body": "dmGraphics::GetNativeOSXNSOpenGLContext()", "description": "get OSX NSOpenGLContext"}], "dmGraphics::GetNativeOSXNSView": [{"prefix": "dmGraphics::GetNativeOSXNSView", "body": "dmGraphics::GetNativeOSXNSView()", "description": "get OSX NSView"}], "dmGraphics::GetNativeOSXNSWindow": [{"prefix": "dmGraphics::GetNativeOSXNSWindow", "body": "dmGraphics::GetNativeOSXNSWindow()", "description": "get OSX NSWindow"}], "dmGraphics::GetNativeWindowsHGLRC": [{"prefix": "dmGraphics::GetNativeWindowsHGLRC", "body": "dmGraphics::GetNativeWindowsHGLRC()", "description": "get Win32 HGLRC"}], "dmGraphics::GetNativeWindowsHWND": [{"prefix": "dmGraphics::GetNativeWindowsHWND", "body": "dmGraphics::GetNativeWindowsHWND()", "description": "get Win32 HWND"}], "dmGraphics::GetNativeX11GLXContext": [{"prefix": "dmGraphics::GetNativeX11GLXContext", "body": "dmGraphics::GetNativeX11GLXContext()", "description": "get Linux X11GLXContext"}], "dmGraphics::GetNativeX11Window": [{"prefix": "dmGraphics::GetNativeX11Window", "body": "dmGraphics::GetNativeX11Window()", "description": "get Linux X11Window"}], "dmGraphics::GetNativeiOSEAGLContext": [{"prefix": "dmGraphics::GetNativeiOSEAGLContext", "body": "dmGraphics::GetNativeiOSEAGLContext()", "description": "get iOS EAGLContext"}], "dmGraphics::GetNativeiOSUIView": [{"prefix": "dmGraphics::GetNativeiOSUIView", "body": "dmGraphics::GetNativeiOSUIView()", "description": "get iOS UIView"}], "dmGraphics::GetNativeiOSUIWindow": [{"prefix": "dmGraphics::GetNativeiOSUIWindow", "body": "dmGraphics::GetNativeiOSUIWindow()", "description": "get iOS UIWindow"}], "os.clock": [{"prefix": "os.clock", "body": "os.clock()", "description": "amount of elapsed/CPU time used (depending on OS)"}], "os.date [format], [time]": [{"prefix": "os.date [format], [time]", "body": "os.date(${1:[format]}, ${2:[time]})", "description": "formats a date/time string"}], "os.difftime t2, t1": [{"prefix": "os.difftime t2, t1", "body": "os.difftime(${1:t2}, ${2:t1})", "description": "calculates a time difference in seconds"}], "os.execute [command]": [{"prefix": "os.execute [command]", "body": "os.execute(${1:[command]})", "description": "executes an operating system command"}], "os.exit [code]": [{"prefix": "os.exit [code]", "body": "os.exit(${1:[code]})", "description": "attempts to terminate the process"}], "os.getenv varname": [{"prefix": "os.getenv varname", "body": "os.getenv(${1:varname})", "description": "returns an operating system environment variable"}], "os.remove filename": [{"prefix": "os.remove filename", "body": "os.remove(${1:filename})", "description": "deletes a file"}], "os.rename oldname, newname": [{"prefix": "os.rename oldname, newname", "body": "os.rename(${1:oldname}, ${2:newname})", "description": "renames a file"}], "os.setlocale locale, [category]": [{"prefix": "os.setlocale locale, [category]", "body": "os.setlocale(${1:locale}, ${2:[category]})", "description": "sets the current locale to the supplied locale"}], "os.time [table]": [{"prefix": "os.time [table]", "body": "os.time(${1:[table]})", "description": "returns the current time or calculates the time in seconds from a table"}], "os.tmpname": [{"prefix": "os.tmpname", "body": "os.tmpname()", "description": "returns a name for a temporary file"}], "image.TYPE_LUMINANCE": [{"prefix": "image.TYPE_LUMINANCE", "body": "image.TYPE_LUMINANCE", "description": "luminance image type"}], "image.TYPE_RGB": [{"prefix": "image.TYPE_RGB", "body": "image.TYPE_RGB", "description": "RGB image type"}], "image.TYPE_RGBA": [{"prefix": "image.TYPE_RGBA", "body": "image.TYPE_RGBA", "description": "RGBA image type"}], "image.load buffer, [premult]": [{"prefix": "image.load buffer, [premult]", "body": "image.load(${1:buffer}, ${2:[premult]})", "description": "load image from buffer"}], "table.concat table, [sep], [i], [j]": [{"prefix": "table.concat table, [sep], [i], [j]", "body": "table.concat(${1:table}, ${2:[sep]}, ${3:[i]}, ${4:[j]})", "description": "concatenates table items together into a string"}], "table.insert table, [pos], value": [{"prefix": "table.insert table, [pos], value", "body": "table.insert(${1:table}, ${2:[pos]}, ${3:value})", "description": "inserts a new item into a numerically-keyed table"}], "table.maxn table": [{"prefix": "table.maxn table", "body": "table.maxn(${1:table})", "description": "returns the highest numeric key in the table"}], "table.remove table, [pos]": [{"prefix": "table.remove table, [pos]", "body": "table.remove(${1:table}, ${2:[pos]})", "description": "removes an item from a numerically-keyed table"}], "table.sort table, [comp]": [{"prefix": "table.sort table, [comp]", "body": "table.sort(${1:table}, ${2:[comp]})", "description": "Sorts a table"}], "color": [{"prefix": "color", "body": "\"color\"", "description": "vector4 label color"}], "label.get_text_metrics url": [{"prefix": "label.get_text_metrics url", "body": "label.get_text_metrics(${1:url})", "description": "gets the text metrics for a label"}], "label.set_text url, text": [{"prefix": "label.set_text url, text", "body": "label.set_text(${1:url}, ${2:text})", "description": "set the text for a label"}], "outline": [{"prefix": "outline", "body": "\"outline\"", "description": "vector4 label outline"}], "scale": [{"prefix": "scale", "body": "\"scale\"", "description": "number | vector3 label scale"}, {"prefix": "scale", "body": "\"scale\"", "description": "number game object scale"}, {"prefix": "scale", "body": "\"scale\"", "description": "vector3 sprite scale"}], "shadow": [{"prefix": "shadow", "body": "\"shadow\"", "description": "vector4 label shadow"}], "size": [{"prefix": "size", "body": "\"size\"", "description": "vector3 label size"}, {"prefix": "size", "body": "\"size\"", "description": "vector3 sprite size"}], "profiler.get_cpu_usage": [{"prefix": "profiler.get_cpu_usage", "body": "profiler.get_cpu_usage()", "description": "get current CPU usage for app reported by OS"}], "profiler.get_memory_usage": [{"prefix": "profiler.get_memory_usage", "body": "profiler.get_memory_usage()", "description": "get current memory usage for app reported by OS"}], "exit code": [{"prefix": "exit code", "body": "msg.post(${1:receiver}, \"exit\", ${2:{${3:code}\\}})", "description": "exits application"}], "reboot arg1, arg2, arg3, arg4, arg5, arg6": [{"prefix": "reboot arg1, arg2, arg3, arg4, arg5, arg6", "body": "msg.post(${1:receiver}, \"reboot\", ${2:{${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4}, ${7:arg5}, ${8:arg6}\\}})", "description": "reboot engine with arguments"}], "set_update_frequency frequency": [{"prefix": "set_update_frequency frequency", "body": "msg.post(${1:receiver}, \"set_update_frequency\", ${2:{${3:frequency}\\}})", "description": "set update frequency"}], "set_vsync swap_interval": [{"prefix": "set_vsync swap_interval", "body": "msg.post(${1:receiver}, \"set_vsync\", ${2:{${3:swap_interval}\\}})", "description": "set vsync swap interval"}], "start_record file_name, frame_period, fps": [{"prefix": "start_record file_name, frame_period, fps", "body": "msg.post(${1:receiver}, \"start_record\", ${2:{${3:file_name}, ${4:frame_period}, ${5:fps}\\}})", "description": "starts video recording"}], "stop_record": [{"prefix": "stop_record", "body": "msg.post(${1:receiver}, \"stop_record\")", "description": "stop current video recording"}], "sys.NETWORK_CONNECTED": [{"prefix": "sys.NETWORK_CONNECTED", "body": "sys.NETWORK_CONNECTED", "description": "network connected through other, non cellular, connection"}], "sys.NETWORK_CONNECTED_CELLULAR": [{"prefix": "sys.NETWORK_CONNECTED_CELLULAR", "body": "sys.NETWORK_CONNECTED_CELLULAR", "description": "network connected through mobile cellular"}], "sys.NETWORK_DISCONNECTED": [{"prefix": "sys.NETWORK_DISCONNECTED", "body": "sys.NETWORK_DISCONNECTED", "description": "no network connection found"}], "sys.get_application_info app_string": [{"prefix": "sys.get_application_info app_string", "body": "sys.get_application_info(${1:app_string})", "description": "get application information"}], "sys.get_config key": [{"prefix": "sys.get_config key", "body": "sys.get_config(${1:key})", "description": "get config value"}], "sys.get_config key, default_value": [{"prefix": "sys.get_config key, default_value", "body": "sys.get_config(${1:key}, ${2:default_value})", "description": "get config value with default value"}], "sys.get_connectivity": [{"prefix": "sys.get_connectivity", "body": "sys.get_connectivity()", "description": "get current network connectivity status"}], "sys.get_engine_info": [{"prefix": "sys.get_engine_info", "body": "sys.get_engine_info()", "description": "get engine information"}], "sys.get_ifaddrs": [{"prefix": "sys.get_ifaddrs", "body": "sys.get_ifaddrs()", "description": "enumerate network interfaces"}], "sys.get_save_file application_id, file_name": [{"prefix": "sys.get_save_file application_id, file_name", "body": "sys.get_save_file(${1:application_id}, ${2:file_name})", "description": "gets the save-file path"}], "sys.get_sys_info": [{"prefix": "sys.get_sys_info", "body": "sys.get_sys_info()", "description": "get system information"}], "sys.load filename": [{"prefix": "sys.load filename", "body": "sys.load(${1:filename})", "description": "loads a lua table from a file on disk"}], "sys.load_resource filename": [{"prefix": "sys.load_resource filename", "body": "sys.load_resource(${1:filename})", "description": "loads resource from game data"}], "sys.open_url url": [{"prefix": "sys.open_url url", "body": "sys.open_url(${1:url})", "description": "open url in default application"}], "sys.save filename, table": [{"prefix": "sys.save filename, table", "body": "sys.save(${1:filename}, ${2:table})", "description": "saves a lua table to a file stored on disk"}], "sys.set_connectivity_host host": [{"prefix": "sys.set_connectivity_host host", "body": "sys.set_connectivity_host(${1:host})", "description": "set host to check for network connectivity against"}], "sys.set_error_handler error_handler": [{"prefix": "sys.set_error_handler error_handler", "body": "sys.set_error_handler(${1:error_handler})", "description": "set the error handler"}], "toggle_physics_debug": [{"prefix": "toggle_physics_debug", "body": "msg.post(${1:receiver}, \"toggle_physics_debug\")", "description": "shows/hides the on-screen physics visual debugging"}], "toggle_profile": [{"prefix": "toggle_profile", "body": "msg.post(${1:receiver}, \"toggle_profile\")", "description": "shows/hides the on-screen profiler"}], "animation": [{"prefix": "animation", "body": "\"animation\"", "description": "hash model animation"}, {"prefix": "animation", "body": "\"animation\"", "description": "hash spine animation"}], "cursor": [{"prefix": "cursor", "body": "\"cursor\"", "description": "number model cursor"}, {"prefix": "cursor", "body": "\"cursor\"", "description": "number spine cursor"}], "model.cancel url": [{"prefix": "model.cancel url", "body": "model.cancel(${1:url})", "description": "cancel all animation on a model"}], "model.get_go url, bone_id": [{"prefix": "model.get_go url, bone_id", "body": "model.get_go(${1:url}, ${2:bone_id})", "description": "retrieve the game object corresponding to a model skeleton bone"}], "model.play_anim url, anim_id, playback, [play_properties], [complete_function]": [{"prefix": "model.play_anim url, anim_id, playback, [play_properties], [complete_function]", "body": "model.play_anim(${1:url}, ${2:anim_id}, ${3:playback}, ${4:[play_properties]}, ${5:[complete_function]})", "description": "play an animation on a model"}], "model.reset_constant url, constant": [{"prefix": "model.reset_constant url, constant", "body": "model.reset_constant(${1:url}, ${2:constant})", "description": "reset a shader constant for a model"}], "model.set_constant url, constant, value": [{"prefix": "model.set_constant url, constant, value", "body": "model.set_constant(${1:url}, ${2:constant}, ${3:value})", "description": "set a shader constant for a model"}], "model_animation_done animation_id, playback": [{"prefix": "model_animation_done animation_id, playback", "body": "msg.post(${1:receiver}, \"model_animation_done\", ${2:{${3:animation_id}, ${4:playback}\\}})", "description": "reports the completion of a Model animation"}], "playback_rate": [{"prefix": "playback_rate", "body": "\"playback_rate\"", "description": "number model playback_rate"}, {"prefix": "playback_rate", "body": "\"playback_rate\"", "description": "number spine playback_rate"}], "texture0": [{"prefix": "texture0", "body": "\"texture0\"", "description": "hash model texture0"}, {"prefix": "texture0", "body": "\"texture0\"", "description": "hash sprite texture0"}], "acquire_camera_focus": [{"prefix": "acquire_camera_focus", "body": "msg.post(${1:receiver}, \"acquire_camera_focus\")", "description": "makes the receiving camera become the active camera"}], "release_camera_focus": [{"prefix": "release_camera_focus", "body": "msg.post(${1:receiver}, \"release_camera_focus\")", "description": "deactivates the receiving camera"}], "set_camera aspect_ratio, fov, near_z, far_z": [{"prefix": "set_camera aspect_ratio, fov, near_z, far_z", "body": "msg.post(${1:receiver}, \"set_camera\", ${2:{${3:aspect_ratio}, ${4:fov}, ${5:near_z}, ${6:far_z}\\}})", "description": "sets camera properties"}], "iac.TYPE_INVOCATION": [{"prefix": "iac.TYPE_INVOCATION", "body": "iac.TYPE_INVOCATION", "description": "iac type"}], "iac.set_listener listener": [{"prefix": "iac.set_listener listener", "body": "iac.set_listener(${1:listener})", "description": "set iac listener"}], "zlib.deflate buf": [{"prefix": "zlib.deflate buf", "body": "zlib.deflate(${1:buf})", "description": "Deflate (compress) a buffer"}], "zlib.inflate buf": [{"prefix": "zlib.inflate buf", "body": "zlib.inflate(${1:buf})", "description": "Inflate (decompress) a buffer"}], "particlefx.EMITTER_STATE_POSTSPAWN": [{"prefix": "particlefx.EMITTER_STATE_POSTSPAWN", "body": "particlefx.EMITTER_STATE_POSTSPAWN", "description": "postspawn state"}], "particlefx.EMITTER_STATE_PRESPAWN": [{"prefix": "particlefx.EMITTER_STATE_PRESPAWN", "body": "particlefx.EMITTER_STATE_PRESPAWN", "description": "prespawn state"}], "particlefx.EMITTER_STATE_SLEEPING": [{"prefix": "particlefx.EMITTER_STATE_SLEEPING", "body": "particlefx.EMITTER_STATE_SLEEPING", "description": "sleeping state"}], "particlefx.EMITTER_STATE_SPAWNING": [{"prefix": "particlefx.EMITTER_STATE_SPAWNING", "body": "particlefx.EMITTER_STATE_SPAWNING", "description": "spawning state"}], "particlefx.play url, [emitter_state_function]": [{"prefix": "particlefx.play url, [emitter_state_function]", "body": "particlefx.play(${1:url}, ${2:[emitter_state_function]})", "description": "start playing a particle FX"}], "particlefx.reset_constant url, emitter, constant": [{"prefix": "particlefx.reset_constant url, emitter, constant", "body": "particlefx.reset_constant(${1:url}, ${2:emitter}, ${3:constant})", "description": "reset a shader constant for a particle FX component emitter"}], "particlefx.set_constant url, emitter, constant, value": [{"prefix": "particlefx.set_constant url, emitter, constant, value", "body": "particlefx.set_constant(${1:url}, ${2:emitter}, ${3:constant}, ${4:value})", "description": "set a shader constant for a particle FX component emitter"}], "particlefx.stop url": [{"prefix": "particlefx.stop url", "body": "particlefx.stop(${1:url})", "description": "stop playing a particle fx"}], "DM_DLLEXPORT": [{"prefix": "DM_DLLEXPORT", "body": "DM_DLLEXPORT", "description": "storage-class attribute for shared library export/import"}], "acquire_input_focus": [{"prefix": "acquire_input_focus", "body": "msg.post(${1:receiver}, \"acquire_input_focus\")", "description": "acquires the user input focus"}], "euler": [{"prefix": "euler", "body": "\"euler\"", "description": "vector3 game object euler rotation"}], "final self": [{"prefix": "final self", "body": "final(${1:self})", "description": "called when a script component is finalized"}, {"prefix": "final self", "body": "final(${1:self})", "description": "called when a gui component is finalized"}], "go.EASING_INBACK": [{"prefix": "go.EASING_INBACK", "body": "go.EASING_INBACK", "description": "in-back"}], "go.EASING_INBOUNCE": [{"prefix": "go.EASING_INBOUNCE", "body": "go.EASING_INBOUNCE", "description": "in-bounce"}], "go.EASING_INCIRC": [{"prefix": "go.EASING_INCIRC", "body": "go.EASING_INCIRC", "description": "in-circlic"}], "go.EASING_INCUBIC": [{"prefix": "go.EASING_INCUBIC", "body": "go.EASING_INCUBIC", "description": "in-cubic"}], "go.EASING_INELASTIC": [{"prefix": "go.EASING_INELASTIC", "body": "go.EASING_INELASTIC", "description": "in-elastic"}], "go.EASING_INEXPO": [{"prefix": "go.EASING_INEXPO", "body": "go.EASING_INEXPO", "description": "in-exponential"}], "go.EASING_INOUTBACK": [{"prefix": "go.EASING_INOUTBACK", "body": "go.EASING_INOUTBACK", "description": "in-out-back"}], "go.EASING_INOUTBOUNCE": [{"prefix": "go.EASING_INOUTBOUNCE", "body": "go.EASING_INOUTBOUNCE", "description": "in-out-bounce"}], "go.EASING_INOUTCIRC": [{"prefix": "go.EASING_INOUTCIRC", "body": "go.EASING_INOUTCIRC", "description": "in-out-circlic"}], "go.EASING_INOUTCUBIC": [{"prefix": "go.EASING_INOUTCUBIC", "body": "go.EASING_INOUTCUBIC", "description": "in-out-cubic"}], "go.EASING_INOUTELASTIC": [{"prefix": "go.EASING_INOUTELASTIC", "body": "go.EASING_INOUTELASTIC", "description": "in-out-elastic"}], "go.EASING_INOUTEXPO": [{"prefix": "go.EASING_INOUTEXPO", "body": "go.EASING_INOUTEXPO", "description": "in-out-exponential"}], "go.EASING_INOUTQUAD": [{"prefix": "go.EASING_INOUTQUAD", "body": "go.EASING_INOUTQUAD", "description": "in-out-quadratic"}], "go.EASING_INOUTQUART": [{"prefix": "go.EASING_INOUTQUART", "body": "go.EASING_INOUTQUART", "description": "in-out-quartic"}], "go.EASING_INOUTQUINT": [{"prefix": "go.EASING_INOUTQUINT", "body": "go.EASING_INOUTQUINT", "description": "in-out-quintic"}], "go.EASING_INOUTSINE": [{"prefix": "go.EASING_INOUTSINE", "body": "go.EASING_INOUTSINE", "description": "in-out-sine"}], "go.EASING_INQUAD": [{"prefix": "go.EASING_INQUAD", "body": "go.EASING_INQUAD", "description": "in-quadratic"}], "go.EASING_INQUART": [{"prefix": "go.EASING_INQUART", "body": "go.EASING_INQUART", "description": "in-quartic"}], "go.EASING_INQUINT": [{"prefix": "go.EASING_INQUINT", "body": "go.EASING_INQUINT", "description": "in-quintic"}], "go.EASING_INSINE": [{"prefix": "go.EASING_INSINE", "body": "go.EASING_INSINE", "description": "in-sine"}], "go.EASING_LINEAR": [{"prefix": "go.EASING_LINEAR", "body": "go.EASING_LINEAR", "description": "linear interpolation"}], "go.EASING_OUTBACK": [{"prefix": "go.EASING_OUTBACK", "body": "go.EASING_OUTBACK", "description": "out-back"}], "go.EASING_OUTBOUNCE": [{"prefix": "go.EASING_OUTBOUNCE", "body": "go.EASING_OUTBOUNCE", "description": "out-bounce"}], "go.EASING_OUTCIRC": [{"prefix": "go.EASING_OUTCIRC", "body": "go.EASING_OUTCIRC", "description": "out-circlic"}], "go.EASING_OUTCUBIC": [{"prefix": "go.EASING_OUTCUBIC", "body": "go.EASING_OUTCUBIC", "description": "out-cubic"}], "go.EASING_OUTELASTIC": [{"prefix": "go.EASING_OUTELASTIC", "body": "go.EASING_OUTELASTIC", "description": "out-elastic"}], "go.EASING_OUTEXPO": [{"prefix": "go.EASING_OUTEXPO", "body": "go.EASING_OUTEXPO", "description": "out-exponential"}], "go.EASING_OUTINBACK": [{"prefix": "go.EASING_OUTINBACK", "body": "go.EASING_OUTINBACK", "description": "out-in-back"}], "go.EASING_OUTINBOUNCE": [{"prefix": "go.EASING_OUTINBOUNCE", "body": "go.EASING_OUTINBOUNCE", "description": "out-in-bounce"}], "go.EASING_OUTINCIRC": [{"prefix": "go.EASING_OUTINCIRC", "body": "go.EASING_OUTINCIRC", "description": "out-in-circlic"}], "go.EASING_OUTINCUBIC": [{"prefix": "go.EASING_OUTINCUBIC", "body": "go.EASING_OUTINCUBIC", "description": "out-in-cubic"}], "go.EASING_OUTINELASTIC": [{"prefix": "go.EASING_OUTINELASTIC", "body": "go.EASING_OUTINELASTIC", "description": "out-in-elastic"}], "go.EASING_OUTINEXPO": [{"prefix": "go.EASING_OUTINEXPO", "body": "go.EASING_OUTINEXPO", "description": "out-in-exponential"}], "go.EASING_OUTINQUAD": [{"prefix": "go.EASING_OUTINQUAD", "body": "go.EASING_OUTINQUAD", "description": "out-in-quadratic"}], "go.EASING_OUTINQUART": [{"prefix": "go.EASING_OUTINQUART", "body": "go.EASING_OUTINQUART", "description": "out-in-quartic"}], "go.EASING_OUTINQUINT": [{"prefix": "go.EASING_OUTINQUINT", "body": "go.EASING_OUTINQUINT", "description": "out-in-quintic"}], "go.EASING_OUTINSINE": [{"prefix": "go.EASING_OUTINSINE", "body": "go.EASING_OUTINSINE", "description": "out-in-sine"}], "go.EASING_OUTQUAD": [{"prefix": "go.EASING_OUTQUAD", "body": "go.EASING_OUTQUAD", "description": "out-quadratic"}], "go.EASING_OUTQUART": [{"prefix": "go.EASING_OUTQUART", "body": "go.EASING_OUTQUART", "description": "out-quartic"}], "go.EASING_OUTQUINT": [{"prefix": "go.EASING_OUTQUINT", "body": "go.EASING_OUTQUINT", "description": "out-quintic"}], "go.EASING_OUTSINE": [{"prefix": "go.EASING_OUTSINE", "body": "go.EASING_OUTSINE", "description": "out-sine"}], "go.PLAYBACK_LOOP_BACKWARD": [{"prefix": "go.PLAYBACK_LOOP_BACKWARD", "body": "go.PLAYBACK_LOOP_BACKWARD", "description": "loop backward"}], "go.PLAYBACK_LOOP_FORWARD": [{"prefix": "go.PLAYBACK_LOOP_FORWARD", "body": "go.PLAYBACK_LOOP_FORWARD", "description": "loop forward"}], "go.PLAYBACK_LOOP_PINGPONG": [{"prefix": "go.PLAYBACK_LOOP_PINGPONG", "body": "go.PLAYBACK_LOOP_PINGPONG", "description": "ping pong loop"}], "go.PLAYBACK_NONE": [{"prefix": "go.PLAYBACK_NONE", "body": "go.PLAYBACK_NONE", "description": "no playback"}], "go.PLAYBACK_ONCE_BACKWARD": [{"prefix": "go.PLAYBACK_ONCE_BACKWARD", "body": "go.PLAYBACK_ONCE_BACKWARD", "description": "once backward"}], "go.PLAYBACK_ONCE_FORWARD": [{"prefix": "go.PLAYBACK_ONCE_FORWARD", "body": "go.PLAYBACK_ONCE_FORWARD", "description": "once forward"}], "go.PLAYBACK_ONCE_PINGPONG": [{"prefix": "go.PLAYBACK_ONCE_PINGPONG", "body": "go.PLAYBACK_ONCE_PINGPONG", "description": "once ping pong"}], "go.animate url, property, playback, to, easing, duration, [delay], [complete_function]": [{"prefix": "go.animate url, property, playback, to, easing, duration, [delay], [complete_function]", "body": "go.animate(${1:url}, ${2:property}, ${3:playback}, ${4:to}, ${5:easing}, ${6:duration}, ${7:[delay]}, ${8:[complete_function]})", "description": "animates a named property of the specified game object or component"}], "go.cancel_animations url, property": [{"prefix": "go.cancel_animations url, property", "body": "go.cancel_animations(${1:url}, ${2:property})", "description": "cancels all animations of the named property of the specified game object or component"}], "go.delete [id], [recursive]": [{"prefix": "go.delete [id], [recursive]", "body": "go.delete(${1:[id]}, ${2:[recursive]})", "description": "delete one or more game object instances"}], "go.get url, property": [{"prefix": "go.get url, property", "body": "go.get(${1:url}, ${2:property})", "description": "gets a named property of the specified game object or component"}], "go.get_id [path]": [{"prefix": "go.get_id [path]", "body": "go.get_id(${1:[path]})", "description": "gets the id of an instance"}], "go.get_position [id]": [{"prefix": "go.get_position [id]", "body": "go.get_position(${1:[id]})", "description": "gets the position of a game object instance"}], "go.get_rotation [id]": [{"prefix": "go.get_rotation [id]", "body": "go.get_rotation(${1:[id]})", "description": "gets the rotation of the game object instance"}], "go.get_scale [id]": [{"prefix": "go.get_scale [id]", "body": "go.get_scale(${1:[id]})", "description": "gets the 3D scale factor of the game object instance"}], "go.get_scale_uniform [id]": [{"prefix": "go.get_scale_uniform [id]", "body": "go.get_scale_uniform(${1:[id]})", "description": "gets the uniform scale factor of the game object instance"}], "go.get_world_position [id]": [{"prefix": "go.get_world_position [id]", "body": "go.get_world_position(${1:[id]})", "description": "gets the game object instance world position"}], "go.get_world_rotation [id]": [{"prefix": "go.get_world_rotation [id]", "body": "go.get_world_rotation(${1:[id]})", "description": "gets the game object instance world rotation"}], "go.get_world_scale [id]": [{"prefix": "go.get_world_scale [id]", "body": "go.get_world_scale(${1:[id]})", "description": "gets the game object instance world 3D scale factor"}], "go.get_world_scale_uniform [id]": [{"prefix": "go.get_world_scale_uniform [id]", "body": "go.get_world_scale_uniform(${1:[id]})", "description": "gets the uniform game object instance world scale factor"}], "go.property name, value": [{"prefix": "go.property name, value", "body": "go.property(${1:name}, ${2:value})", "description": "define a property for the script"}], "go.set url, property, value": [{"prefix": "go.set url, property, value", "body": "go.set(${1:url}, ${2:property}, ${3:value})", "description": "sets a named property of the specified game object or component"}], "go.set_position position, [id]": [{"prefix": "go.set_position position, [id]", "body": "go.set_position(${1:position}, ${2:[id]})", "description": "sets the position of the game object instance"}], "go.set_rotation rotation, [id]": [{"prefix": "go.set_rotation rotation, [id]", "body": "go.set_rotation(${1:rotation}, ${2:[id]})", "description": "sets the rotation of the game object instance"}], "go.set_scale scale, [id]": [{"prefix": "go.set_scale scale, [id]", "body": "go.set_scale(${1:scale}, ${2:[id]})", "description": "sets the scale factor of the game object instance"}], "init self": [{"prefix": "init self", "body": "init(${1:self})", "description": "called when a script component is initialized"}, {"prefix": "init self", "body": "init(${1:self})", "description": "called when a gui component is initialized"}], "on_input self, action_id, action": [{"prefix": "on_input self, action_id, action", "body": "on_input(${1:self}, ${2:action_id}, ${3:action})", "description": "called when user input is received"}, {"prefix": "on_input self, action_id, action", "body": "on_input(${1:self}, ${2:action_id}, ${3:action})", "description": "called when user input is received"}], "on_message self, message_id, message, sender": [{"prefix": "on_message self, message_id, message, sender", "body": "on_message(${1:self}, ${2:message_id}, ${3:message}, ${4:sender})", "description": "called when a message has been sent to the script component"}], "on_reload self": [{"prefix": "on_reload self", "body": "on_reload(${1:self})", "description": "called when the script component is reloaded"}, {"prefix": "on_reload self", "body": "on_reload(${1:self})", "description": "called when the gui script is reloaded"}], "position": [{"prefix": "position", "body": "\"position\"", "description": "vector3 game object position"}], "release_input_focus": [{"prefix": "release_input_focus", "body": "msg.post(${1:receiver}, \"release_input_focus\")", "description": "releases the user input focus"}], "rotation": [{"prefix": "rotation", "body": "\"rotation\"", "description": "quaternion game object rotation"}], "set_parent parent_id, keep_world_transform": [{"prefix": "set_parent parent_id, keep_world_transform", "body": "msg.post(${1:receiver}, \"set_parent\", ${2:{${3:parent_id}, ${4:keep_world_transform}\\}})", "description": "sets the parent of the receiving instance"}], "update self, dt": [{"prefix": "update self, dt", "body": "update(${1:self}, ${2:dt})", "description": "called every frame to update the script component"}, {"prefix": "update self, dt", "body": "update(${1:self}, ${2:dt})", "description": "called every frame to update the gui component"}], "_G": [{"prefix": "_G", "body": "_G", "description": "global variable that holds the global environment"}], "_VERSION": [{"prefix": "_VERSION", "body": "_VERSION", "description": "global variable containing the running Lua version"}], "assert v, [message]": [{"prefix": "assert v, [message]", "body": "assert(${1:v}, ${2:[message]})", "description": "asserts that condition is not nil and not false"}], "collectgarbage [opt], [arg]": [{"prefix": "collectgarbage [opt], [arg]", "body": "collectgarbage(${1:[opt]}, ${2:[arg]})", "description": "collects garbage"}], "dofile [filename]": [{"prefix": "dofile [filename]", "body": "dofile(${1:[filename]})", "description": "executes a Lua file"}], "error message, [level]": [{"prefix": "error message, [level]", "body": "error(${1:message}, ${2:[level]})", "description": "raises an error message"}], "getfenv [f]": [{"prefix": "getfenv [f]", "body": "getfenv(${1:[f]})", "description": "returns the current environment table"}], "getmetatable object": [{"prefix": "getmetatable object", "body": "getmetatable(${1:object})", "description": "returns the metatable for the object"}], "ipairs t": [{"prefix": "ipairs t", "body": "ipairs(${1:t})", "description": "iterates over a numerically keyed table"}], "load func, [chunkname]": [{"prefix": "load func, [chunkname]", "body": "load(${1:func}, ${2:[chunkname]})", "description": "loads a chunk by calling a function repeatedly"}], "loadfile [filename]": [{"prefix": "loadfile [filename]", "body": "loadfile(${1:[filename]})", "description": "loads a Lua file and parses it"}], "loadstring string, [chunkname]": [{"prefix": "loadstring string, [chunkname]", "body": "loadstring(${1:string}, ${2:[chunkname]})", "description": "compiles a string of Lua code"}], "module name, [...]": [{"prefix": "module name, [...]", "body": "module(${1:name}, ${2:[...]})", "description": "creates a Lua module"}], "next table, [index]": [{"prefix": "next table, [index]", "body": "next(${1:table}, ${2:[index]})", "description": "returns next key / value pair in a table"}], "pairs t": [{"prefix": "pairs t", "body": "pairs(${1:t})", "description": "traverse all items in a table"}], "pcall f, arg1, ...": [{"prefix": "pcall f, arg1, ...", "body": "pcall(${1:f}, ${2:arg1}, ${3:...})", "description": "calls a function in protected mode"}], "print ...": [{"prefix": "print ...", "body": "print(${1:...})", "description": "prints its arguments"}], "rawequal v1, v2": [{"prefix": "rawequal v1, v2", "body": "rawequal(${1:v1}, ${2:v2})", "description": "compares two values for equality without invoking metamethods"}], "rawget table, index": [{"prefix": "rawget table, index", "body": "rawget(${1:table}, ${2:index})", "description": "gets the value of a table item without invoking metamethods"}], "rawset table, index, value": [{"prefix": "rawset table, index, value", "body": "rawset(${1:table}, ${2:index}, ${3:value})", "description": "sets the value of a table item without invoking metamethods"}], "require modname": [{"prefix": "require modname", "body": "require(${1:modname})", "description": "loads a module"}], "select index, ...": [{"prefix": "select index, ...", "body": "select(${1:index}, ${2:...})", "description": "returns items in a list"}], "setfenv f, table": [{"prefix": "setfenv f, table", "body": "setfenv(${1:f}, ${2:table})", "description": "sets a function's environment"}], "setmetatable table, metatable": [{"prefix": "setmetatable table, metatable", "body": "setmetatable(${1:table}, ${2:metatable})", "description": "sets the metatable for a table"}], "tonumber e, [base]": [{"prefix": "tonumber e, [base]", "body": "tonumber(${1:e}, ${2:[base]})", "description": "converts a string (of the given base) to a number"}], "tostring e": [{"prefix": "tostring e", "body": "tostring(${1:e})", "description": "converts its argument to a string"}], "type v": [{"prefix": "type v", "body": "type(${1:v})", "description": "returns the type of a variable"}], "unpack list, [i], [j]": [{"prefix": "unpack list, [i], [j]", "body": "unpack(${1:list}, ${2:[i]}, ${3:[j]})", "description": "unpacks a table into individual items"}], "xpcall f, err": [{"prefix": "xpcall f, err", "body": "xpcall(${1:f}, ${2:err})", "description": "calls a function with a custom error handler"}], "animation_done current_tile, id": [{"prefix": "animation_done current_tile, id", "body": "msg.post(${1:receiver}, \"animation_done\", ${2:{${3:current_tile}, ${4:id}\\}})", "description": "reports that an animation has completed"}], "play_animation id": [{"prefix": "play_animation id", "body": "msg.post(${1:receiver}, \"play_animation\", ${2:{${3:id}\\}})", "description": "play a sprite animation"}], "sprite.play_flipbook url, id, [complete_function]": [{"prefix": "sprite.play_flipbook url, id, [complete_function]", "body": "sprite.play_flipbook(${1:url}, ${2:id}, ${3:[complete_function]})", "description": "Play an animation on a sprite component"}], "sprite.reset_constant url, constant": [{"prefix": "sprite.reset_constant url, constant", "body": "sprite.reset_constant(${1:url}, ${2:constant})", "description": "reset a shader constant for a sprite"}], "sprite.set_constant url, constant, value": [{"prefix": "sprite.set_constant url, constant, value", "body": "sprite.set_constant(${1:url}, ${2:constant}, ${3:value})", "description": "set a shader constant for a sprite"}], "sprite.set_hflip url, flip": [{"prefix": "sprite.set_hflip url, flip", "body": "sprite.set_hflip(${1:url}, ${2:flip})", "description": "set horizontal flipping on a sprite's animations"}], "sprite.set_vflip url, flip": [{"prefix": "sprite.set_vflip url, flip", "body": "sprite.set_vflip(${1:url}, ${2:flip})", "description": "set vertical flipping on a sprite's animations"}], "msg.post receiver, message_id, [message]": [{"prefix": "msg.post receiver, message_id, [message]", "body": "msg.post(${1:receiver}, ${2:message_id}, ${3:[message]})", "description": "posts a message to a receiving URL"}], "msg.url": [{"prefix": "msg.url", "body": "msg.url()", "description": "creates a new URL"}], "msg.url urlstring": [{"prefix": "msg.url urlstring", "body": "msg.url(${1:urlstring})", "description": "creates a new URL from a string"}], "msg.url [socket], [path], [fragment]": [{"prefix": "msg.url [socket], [path], [fragment]", "body": "msg.url(${1:[socket]}, ${2:[path]}, ${3:[fragment]})", "description": "creates a new URL from separate arguments"}], "crash.SYSFIELD_ANDROID_BUILD_FINGERPRINT": [{"prefix": "crash.SYSFIELD_ANDROID_BUILD_FINGERPRINT", "body": "crash.SYSFIELD_ANDROID_BUILD_FINGERPRINT", "description": "android build fingerprint"}], "crash.SYSFIELD_DEVICE_LANGUAGE": [{"prefix": "crash.SYSFIELD_DEVICE_LANGUAGE", "body": "crash.SYSFIELD_DEVICE_LANGUAGE", "description": "system device language as reported by sys.get_sys_info"}], "crash.SYSFIELD_DEVICE_MANUFACTURER": [{"prefix": "crash.SYSFIELD_DEVICE_MANUFACTURER", "body": "crash.SYSFIELD_DEVICE_MANUFACTURER", "description": "device manufacturer as reported by sys.get_sys_info"}], "crash.SYSFIELD_DEVICE_MODEL": [{"prefix": "crash.SYSFIELD_DEVICE_MODEL", "body": "crash.SYSFIELD_DEVICE_MODEL", "description": "device model as reported by sys.get_sys_info"}], "crash.SYSFIELD_ENGINE_HASH": [{"prefix": "crash.SYSFIELD_ENGINE_HASH", "body": "crash.SYSFIELD_ENGINE_HASH", "description": "engine version as hash"}], "crash.SYSFIELD_ENGINE_VERSION": [{"prefix": "crash.SYSFIELD_ENGINE_VERSION", "body": "crash.SYSFIELD_ENGINE_VERSION", "description": "engine version as release number"}], "crash.SYSFIELD_LANGUAGE": [{"prefix": "crash.SYSFIELD_LANGUAGE", "body": "crash.SYSFIELD_LANGUAGE", "description": "system language as reported by sys.get_sys_info"}], "crash.SYSFIELD_SYSTEM_NAME": [{"prefix": "crash.SYSFIELD_SYSTEM_NAME", "body": "crash.SYSFIELD_SYSTEM_NAME", "description": "system name as reported by sys.get_sys_info"}], "crash.SYSFIELD_SYSTEM_VERSION": [{"prefix": "crash.SYSFIELD_SYSTEM_VERSION", "body": "crash.SYSFIELD_SYSTEM_VERSION", "description": "system version as reported by sys.get_sys_info"}], "crash.SYSFIELD_TERRITORY": [{"prefix": "crash.SYSFIELD_TERRITORY", "body": "crash.SYSFIELD_TERRITORY", "description": "system territory as reported by sys.get_sys_info"}], "crash.get_backtrace handle": [{"prefix": "crash.get_backtrace handle", "body": "crash.get_backtrace(${1:handle})", "description": "read backtrace recorded in a loaded crash dump"}], "crash.get_extra_data handle": [{"prefix": "crash.get_extra_data handle", "body": "crash.get_extra_data(${1:handle})", "description": "read text blob recorded in a crash dump"}], "crash.get_modules handle": [{"prefix": "crash.get_modules handle", "body": "crash.get_modules(${1:handle})", "description": "get all loaded modules from when the crash occured"}], "crash.get_signum handle": [{"prefix": "crash.get_signum handle", "body": "crash.get_signum(${1:handle})", "description": "read signal number from a crash report"}], "crash.get_sys_field handle, index": [{"prefix": "crash.get_sys_field handle, index", "body": "crash.get_sys_field(${1:handle}, ${2:index})", "description": "reads a system field from a loaded crash dump"}], "crash.get_user_field handle, index": [{"prefix": "crash.get_user_field handle, index", "body": "crash.get_user_field(${1:handle}, ${2:index})", "description": "reads user field from a loaded crash dump"}], "crash.load_previous": [{"prefix": "crash.load_previous", "body": "crash.load_previous()", "description": "loads a previously written crash dump"}], "crash.release handle": [{"prefix": "crash.release handle", "body": "crash.release(${1:handle})", "description": "releases a previously loaded crash dump"}], "crash.set_file_path path": [{"prefix": "crash.set_file_path path", "body": "crash.set_file_path(${1:path})", "description": "sets the file location for crash dumps"}], "crash.set_user_field index, value": [{"prefix": "crash.set_user_field index, value", "body": "crash.set_user_field(${1:index}, ${2:value})", "description": "stores user-defined string value"}], "crash.write_dump": [{"prefix": "crash.write_dump", "body": "crash.write_dump()", "description": "writes crash dump"}], "resource.LIVEUPDATE_ENGINE_VERSION_MISMATCH": [{"prefix": "resource.LIVEUPDATE_ENGINE_VERSION_MISMATCH", "body": "resource.LIVEUPDATE_ENGINE_VERSION_MISMATCH", "description": "LIVEUPDATE_ENGINE_VERSION_MISMATCH"}], "resource.LIVEUPDATE_INVALID_RESOURCE": [{"prefix": "resource.LIVEUPDATE_INVALID_RESOURCE", "body": "resource.LIVEUPDATE_INVALID_RESOURCE", "description": "LIVEUPDATE_INVALID_RESOURCE"}], "resource.LIVEUPDATE_OK": [{"prefix": "resource.LIVEUPDATE_OK", "body": "resource.LIVEUPDATE_OK", "description": "LIVEUPDATE_OK"}], "resource.LIVEUPDATE_SCHEME_MISMATCH": [{"prefix": "resource.LIVEUPDATE_SCHEME_MISMATCH", "body": "resource.LIVEUPDATE_SCHEME_MISMATCH", "description": "LIVEUPDATE_SCHEME_MISMATCH"}], "resource.LIVEUPDATE_SIGNATURE_MISMATCH": [{"prefix": "resource.LIVEUPDATE_SIGNATURE_MISMATCH", "body": "resource.LIVEUPDATE_SIGNATURE_MISMATCH", "description": "LIVEUPDATE_SIGNATURE_MISMATCH"}], "resource.LIVEUPDATE_VERSION_MISMATCH": [{"prefix": "resource.LIVEUPDATE_VERSION_MISMATCH", "body": "resource.LIVEUPDATE_VERSION_MISMATCH", "description": "LIVEUPDATE_VERSION_MISMATCH"}], "resource.TEXTURE_FORMAT_LUMINANCE": [{"prefix": "resource.TEXTURE_FORMAT_LUMINANCE", "body": "resource.TEXTURE_FORMAT_LUMINANCE", "description": "luminance type texture format"}], "resource.TEXTURE_FORMAT_RGB": [{"prefix": "resource.TEXTURE_FORMAT_RGB", "body": "resource.TEXTURE_FORMAT_RGB", "description": "RGB type texture format"}], "resource.TEXTURE_FORMAT_RGBA": [{"prefix": "resource.TEXTURE_FORMAT_RGBA", "body": "resource.TEXTURE_FORMAT_RGBA", "description": "RGBA type texture format"}], "resource.TEXTURE_TYPE_2D": [{"prefix": "resource.TEXTURE_TYPE_2D", "body": "resource.TEXTURE_TYPE_2D", "description": "2D texture type"}], "resource.get_current_manifest": [{"prefix": "resource.get_current_manifest", "body": "resource.get_current_manifest()", "description": "return a reference to the Manifest that is currently loaded"}], "resource.load path": [{"prefix": "resource.load path", "body": "resource.load(${1:path})", "description": "load a resource"}], "resource.set path, buffer": [{"prefix": "resource.set path, buffer", "body": "resource.set(${1:path}, ${2:buffer})", "description": "Set a resource"}], "resource.set_texture path, table, buffer": [{"prefix": "resource.set_texture path, table, buffer", "body": "resource.set_texture(${1:path}, ${2:table}, ${3:buffer})", "description": "set a texture"}], "resource.store_manifest manifest_buffer, callback": [{"prefix": "resource.store_manifest manifest_buffer, callback", "body": "resource.store_manifest(${1:manifest_buffer}, ${2:callback})", "description": "create, verify, and store a manifest to device"}], "resource.store_resource manifest_reference, data, hexdigest, callback": [{"prefix": "resource.store_resource manifest_reference, data, hexdigest, callback", "body": "resource.store_resource(${1:manifest_reference}, ${2:data}, ${3:hexdigest}, ${4:callback})", "description": "add a resource to the data archive and runtime index"}], "vmath.conj q1": [{"prefix": "vmath.conj q1", "body": "vmath.conj(${1:q1})", "description": "calculates the conjugate of a quaternion"}], "vmath.cross v1, v2": [{"prefix": "vmath.cross v1, v2", "body": "vmath.cross(${1:v1}, ${2:v2})", "description": "calculates the cross-product of two vectors"}], "vmath.dot v1, v2": [{"prefix": "vmath.dot v1, v2", "body": "vmath.dot(${1:v1}, ${2:v2})", "description": "calculates the dot-product of two vectors"}], "vmath.inv m1": [{"prefix": "vmath.inv m1", "body": "vmath.inv(${1:m1})", "description": "calculates the inverse matrix."}], "vmath.length v": [{"prefix": "vmath.length v", "body": "vmath.length(${1:v})", "description": "calculates the length of a vector or quaternion"}], "vmath.length_sqr v": [{"prefix": "vmath.length_sqr v", "body": "vmath.length_sqr(${1:v})", "description": "calculates the squared length of a vector or quaternion"}], "vmath.lerp t, v1, v2": [{"prefix": "vmath.lerp t, v1, v2", "body": "vmath.lerp(${1:t}, ${2:v1}, ${3:v2})", "description": "lerps between two vectors"}], "vmath.lerp t, q1, q2": [{"prefix": "vmath.lerp t, q1, q2", "body": "vmath.lerp(${1:t}, ${2:q1}, ${3:q2})", "description": "lerps between two quaternions"}], "vmath.lerp t, n1, n2": [{"prefix": "vmath.lerp t, n1, n2", "body": "vmath.lerp(${1:t}, ${2:n1}, ${3:n2})", "description": "lerps between two numbers"}], "vmath.matrix4": [{"prefix": "vmath.matrix4", "body": "vmath.matrix4()", "description": "creates a new identity matrix"}], "vmath.matrix4 m1": [{"prefix": "vmath.matrix4 m1", "body": "vmath.matrix4(${1:m1})", "description": "creates a new matrix from another existing matrix"}], "vmath.matrix4_axis_angle v, angle": [{"prefix": "vmath.matrix4_axis_angle v, angle", "body": "vmath.matrix4_axis_angle(${1:v}, ${2:angle})", "description": "creates a matrix from an axis and an angle"}], "vmath.matrix4_from_quat q": [{"prefix": "vmath.matrix4_from_quat q", "body": "vmath.matrix4_from_quat(${1:q})", "description": "creates a matrix from a quaternion"}], "vmath.matrix4_frustum left, right, bottom, top, near, far": [{"prefix": "vmath.matrix4_frustum left, right, bottom, top, near, far", "body": "vmath.matrix4_frustum(${1:left}, ${2:right}, ${3:bottom}, ${4:top}, ${5:near}, ${6:far})", "description": "creates a frustum matrix"}], "vmath.matrix4_look_at eye, look_at, up": [{"prefix": "vmath.matrix4_look_at eye, look_at, up", "body": "vmath.matrix4_look_at(${1:eye}, ${2:look_at}, ${3:up})", "description": "creates a look-at view matrix"}], "vmath.matrix4_orthographic left, right, bottom, top, near, far": [{"prefix": "vmath.matrix4_orthographic left, right, bottom, top, near, far", "body": "vmath.matrix4_orthographic(${1:left}, ${2:right}, ${3:bottom}, ${4:top}, ${5:near}, ${6:far})", "description": "creates an orthographic projection matrix"}], "vmath.matrix4_perspective fov, aspect, near, far": [{"prefix": "vmath.matrix4_perspective fov, aspect, near, far", "body": "vmath.matrix4_perspective(${1:fov}, ${2:aspect}, ${3:near}, ${4:far})", "description": "creates a perspective projection matrix"}], "vmath.matrix4_rotation_x angle": [{"prefix": "vmath.matrix4_rotation_x angle", "body": "vmath.matrix4_rotation_x(${1:angle})", "description": "creates a matrix from rotation around x-axis"}], "vmath.matrix4_rotation_y angle": [{"prefix": "vmath.matrix4_rotation_y angle", "body": "vmath.matrix4_rotation_y(${1:angle})", "description": "creates a matrix from rotation around y-axis"}], "vmath.matrix4_rotation_z angle": [{"prefix": "vmath.matrix4_rotation_z angle", "body": "vmath.matrix4_rotation_z(${1:angle})", "description": "creates a matrix from rotation around z-axis"}], "vmath.mul_per_elem v1, v2": [{"prefix": "vmath.mul_per_elem v1, v2", "body": "vmath.mul_per_elem(${1:v1}, ${2:v2})", "description": "performs an element wise multiplication of two vectors"}], "vmath.normalize v1": [{"prefix": "vmath.normalize v1", "body": "vmath.normalize(${1:v1})", "description": "normalizes a vector"}], "vmath.ortho_inv m1": [{"prefix": "vmath.ortho_inv m1", "body": "vmath.ortho_inv(${1:m1})", "description": "calculates the inverse of an ortho-normal matrix."}], "vmath.project v1, v2": [{"prefix": "vmath.project v1, v2", "body": "vmath.project(${1:v1}, ${2:v2})", "description": "projects a vector onto another vector"}], "vmath.quat": [{"prefix": "vmath.quat", "body": "vmath.quat()", "description": "creates a new identity quaternion"}], "vmath.quat q1": [{"prefix": "vmath.quat q1", "body": "vmath.quat(${1:q1})", "description": "creates a new quaternion from another existing quaternion"}], "vmath.quat x, y, z, w": [{"prefix": "vmath.quat x, y, z, w", "body": "vmath.quat(${1:x}, ${2:y}, ${3:z}, ${4:w})", "description": "creates a new quaternion from its coordinates"}], "vmath.quat_axis_angle v, angle": [{"prefix": "vmath.quat_axis_angle v, angle", "body": "vmath.quat_axis_angle(${1:v}, ${2:angle})", "description": "creates a quaternion to rotate around a unit vector"}], "vmath.quat_basis x, y, z": [{"prefix": "vmath.quat_basis x, y, z", "body": "vmath.quat_basis(${1:x}, ${2:y}, ${3:z})", "description": "creates a quaternion from three base unit vectors"}], "vmath.quat_from_to v1, v2": [{"prefix": "vmath.quat_from_to v1, v2", "body": "vmath.quat_from_to(${1:v1}, ${2:v2})", "description": "creates a quaternion to rotate between two unit vectors"}], "vmath.quat_rotation_x angle": [{"prefix": "vmath.quat_rotation_x angle", "body": "vmath.quat_rotation_x(${1:angle})", "description": "creates a quaternion from rotation around x-axis"}], "vmath.quat_rotation_y angle": [{"prefix": "vmath.quat_rotation_y angle", "body": "vmath.quat_rotation_y(${1:angle})", "description": "creates a quaternion from rotation around y-axis"}], "vmath.quat_rotation_z angle": [{"prefix": "vmath.quat_rotation_z angle", "body": "vmath.quat_rotation_z(${1:angle})", "description": "creates a quaternion from rotation around z-axis"}], "vmath.rotate q, v1": [{"prefix": "vmath.rotate q, v1", "body": "vmath.rotate(${1:q}, ${2:v1})", "description": "rotates a vector by a quaternion"}], "vmath.slerp t, v1, v2": [{"prefix": "vmath.slerp t, v1, v2", "body": "vmath.slerp(${1:t}, ${2:v1}, ${3:v2})", "description": "slerps between two vectors"}], "vmath.slerp t, q1, q2": [{"prefix": "vmath.slerp t, q1, q2", "body": "vmath.slerp(${1:t}, ${2:q1}, ${3:q2})", "description": "slerps between two quaternions"}], "vmath.vector t": [{"prefix": "vmath.vector t", "body": "vmath.vector(${1:t})", "description": "create a new vector from a table of values"}], "vmath.vector3": [{"prefix": "vmath.vector3", "body": "vmath.vector3()", "description": "creates a new zero vector"}], "vmath.vector3 n": [{"prefix": "vmath.vector3 n", "body": "vmath.vector3(${1:n})", "description": "creates a new vector from scalar value"}], "vmath.vector3 v1": [{"prefix": "vmath.vector3 v1", "body": "vmath.vector3(${1:v1})", "description": "creates a new vector from another existing vector"}], "vmath.vector3 x, y, z": [{"prefix": "vmath.vector3 x, y, z", "body": "vmath.vector3(${1:x}, ${2:y}, ${3:z})", "description": "creates a new vector from its coordinates"}], "vmath.vector4": [{"prefix": "vmath.vector4", "body": "vmath.vector4()", "description": "creates a new zero vector"}], "vmath.vector4 n": [{"prefix": "vmath.vector4 n", "body": "vmath.vector4(${1:n})", "description": "creates a new vector from scalar value"}], "vmath.vector4 v1": [{"prefix": "vmath.vector4 v1", "body": "vmath.vector4(${1:v1})", "description": "creates a new vector from another existing vector"}], "vmath.vector4 x, y, z, w": [{"prefix": "vmath.vector4 x, y, z, w", "body": "vmath.vector4(${1:x}, ${2:y}, ${3:z}, ${4:w})", "description": "creates a new vector from its coordinates"}], "dmHashBuffer64 buffer, buffer_len": [{"prefix": "dmHashBuffer64 buffer, buffer_len", "body": "dmHashBuffer64(${1:buffer}, ${2:buffer_len})", "description": "calculate 64-bit hash value from buffer"}], "dmHashString64 string": [{"prefix": "dmHashString64 string", "body": "dmHashString64(${1:string})", "description": "calculate 64-bit hash value from string"}], "dmhash_t": [{"prefix": "dmhash_t", "body": "dmhash_t", "description": "dmhash_t type definition"}], "factory.STATUS_LOADED": [{"prefix": "factory.STATUS_LOADED", "body": "factory.STATUS_LOADED", "description": "loaded"}], "factory.STATUS_LOADING": [{"prefix": "factory.STATUS_LOADING", "body": "factory.STATUS_LOADING", "description": "loading"}], "factory.STATUS_UNLOADED": [{"prefix": "factory.STATUS_UNLOADED", "body": "factory.STATUS_UNLOADED", "description": "unloaded"}], "factory.create url, [position], [rotation], [properties], [scale]": [{"prefix": "factory.create url, [position], [rotation], [properties], [scale]", "body": "factory.create(${1:url}, ${2:[position]}, ${3:[rotation]}, ${4:[properties]}, ${5:[scale]})", "description": "make a factory create a new game object"}], "factory.get_status [url]": [{"prefix": "factory.get_status [url]", "body": "factory.get_status(${1:[url]})", "description": "Get factory status"}], "factory.load [url], [complete_function]": [{"prefix": "factory.load [url], [complete_function]", "body": "factory.load(${1:[url]}, ${2:[complete_function]})", "description": "Load resources of a factory prototype."}], "factory.unload [url]": [{"prefix": "factory.unload [url]", "body": "factory.unload(${1:[url]})", "description": "Unload resources previously loaded using factory.load"}], "hash s": [{"prefix": "hash s", "body": "hash(${1:s})", "description": "hashes a string"}], "hash_to_hex h": [{"prefix": "hash_to_hex h", "body": "hash_to_hex(${1:h})", "description": "get hex representation of a hash value as a string"}], "pprint v": [{"prefix": "pprint v", "body": "pprint(${1:v})", "description": "pretty printing"}], "DM_LUA_ERROR fmt, args": [{"prefix": "DM_LUA_ERROR fmt, args", "body": "DM_LUA_ERROR", "description": "helper macro to validate the Lua stack state and throw a lua error."}], "DM_LUA_STACK_CHECK L, diff": [{"prefix": "DM_LUA_STACK_CHECK L, diff", "body": "DM_LUA_STACK_CHECK", "description": "helper macro to validate the Lua stack state before leaving a function."}], "dmScript::CheckBuffer L, index": [{"prefix": "dmScript::CheckBuffer L, index", "body": "dmScript::CheckBuffer(${1:L}, ${2:index})", "description": "retrieve a HBuffer from the supplied lua state"}], "dmScript::GetInstance L": [{"prefix": "dmScript::GetInstance L", "body": "dmScript::GetInstance(${1:L})", "description": ""}], "dmScript::GetMainThread L": [{"prefix": "dmScript::GetMainThread L", "body": "dmScript::GetMainThread(${1:L})", "description": ""}], "dmScript::IsBuffer L, index": [{"prefix": "dmScript::IsBuffer L, index", "body": "dmScript::IsBuffer(${1:L}, ${2:index})", "description": "check if the value at #index is a dmScript::LuaHBuffer"}], "dmScript::IsInstanceValid L": [{"prefix": "dmScript::IsInstanceValid L", "body": "dmScript::IsInstanceValid(${1:L})", "description": ""}], "dmScript::LuaHBuffer": [{"prefix": "dmScript::LuaHBuffer", "body": "dmScript::LuaHBuffer", "description": "Lua wrapper for a dmBuffer::HBuffer"}], "dmScript::PushBuffer L, buffer": [{"prefix": "dmScript::PushBuffer L, buffer", "body": "dmScript::PushBuffer(${1:L}, ${2:buffer})", "description": "push a LuaHBuffer onto the supplied lua state"}], "dmScript::Ref L, table": [{"prefix": "dmScript::Ref L, table", "body": "dmScript::Ref(${1:L}, ${2:table})", "description": "wrapper for luaL_ref."}], "dmScript::SetInstance L": [{"prefix": "dmScript::SetInstance L", "body": "dmScript::SetInstance(${1:L})", "description": ""}], "dmScript::Unref L, table, reference": [{"prefix": "dmScript::Unref L, table, reference", "body": "dmScript::Unref(${1:L}, ${2:table}, ${3:reference})", "description": "wrapper for luaL_unref."}], "skin": [{"prefix": "skin", "body": "\"skin\"", "description": "hash spine skin"}], "spine.cancel url": [{"prefix": "spine.cancel url", "body": "spine.cancel(${1:url})", "description": "cancel all animation on a spine model"}], "spine.get_go url, bone_id": [{"prefix": "spine.get_go url, bone_id", "body": "spine.get_go(${1:url}, ${2:bone_id})", "description": "retrieve the game object corresponding to a spine model skeleton bone"}], "spine.play_anim url, anim_id, playback, [play_properties], [complete_function]": [{"prefix": "spine.play_anim url, anim_id, playback, [play_properties], [complete_function]", "body": "spine.play_anim(${1:url}, ${2:anim_id}, ${3:playback}, ${4:[play_properties]}, ${5:[complete_function]})", "description": "play an animation on a spine model"}], "spine.reset_constant url, constant": [{"prefix": "spine.reset_constant url, constant", "body": "spine.reset_constant(${1:url}, ${2:constant})", "description": "reset a shader constant for a spine model"}], "spine.reset_ik_target url, ik_constraint_id": [{"prefix": "spine.reset_ik_target url, ik_constraint_id", "body": "spine.reset_ik_target(${1:url}, ${2:ik_constraint_id})", "description": "reset the IK constraint target position to default of a spinemodel"}], "spine.set_constant url, constant, value": [{"prefix": "spine.set_constant url, constant, value", "body": "spine.set_constant(${1:url}, ${2:constant}, ${3:value})", "description": "set a shader constant for a spine model"}], "spine.set_ik_target url, ik_constraint_id, target_url": [{"prefix": "spine.set_ik_target url, ik_constraint_id, target_url", "body": "spine.set_ik_target(${1:url}, ${2:ik_constraint_id}, ${3:target_url})", "description": "set the IK constraint object target position to follow position of a game object"}], "spine.set_ik_target_position url, ik_constraint_id, position": [{"prefix": "spine.set_ik_target_position url, ik_constraint_id, position", "body": "spine.set_ik_target_position(${1:url}, ${2:ik_constraint_id}, ${3:position})", "description": "set the target position of an IK constraint object"}], "spine.set_skin url, spine_skin, [spine_slot]": [{"prefix": "spine.set_skin url, spine_skin, [spine_slot]", "body": "spine.set_skin(${1:url}, ${2:spine_skin}, ${3:[spine_slot]})", "description": "sets the spine skin"}], "spine_animation_done animation_id, playback": [{"prefix": "spine_animation_done animation_id, playback", "body": "msg.post(${1:receiver}, \"spine_animation_done\", ${2:{${3:animation_id}, ${4:playback}\\}})", "description": "reports the completion of a Spine animation"}], "spine_event event_id, animation_id, t, blend_weight, integer, float, string, node": [{"prefix": "spine_event event_id, animation_id, t, blend_weight, integer, float, string, node", "body": "msg.post(${1:receiver}, \"spine_event\", ${2:{${3:event_id}, ${4:animation_id}, ${5:t}, ${6:blend_weight}, ${7:integer}, ${8:float}, ${9:string}, ${10:node}\\}})", "description": "reports an incoming event from the Spine animation"}], "clear_color color": [{"prefix": "clear_color color", "body": "msg.post(${1:receiver}, \"clear_color\", ${2:{${3:color}\\}})", "description": "set clear color"}], "draw_line start_point, end_point, color": [{"prefix": "draw_line start_point, end_point, color", "body": "msg.post(${1:receiver}, \"draw_line\", ${2:{${3:start_point}, ${4:end_point}, ${5:color}\\}})", "description": "draw a line on the screen"}], "draw_text position, text": [{"prefix": "draw_text position, text", "body": "msg.post(${1:receiver}, \"draw_text\", ${2:{${3:position}, ${4:text}\\}})", "description": "draw a text on the screen"}], "render.BLEND_CONSTANT_ALPHA": [{"prefix": "render.BLEND_CONSTANT_ALPHA", "body": "render.BLEND_CONSTANT_ALPHA", "description": ""}], "render.BLEND_CONSTANT_COLOR": [{"prefix": "render.BLEND_CONSTANT_COLOR", "body": "render.BLEND_CONSTANT_COLOR", "description": ""}], "render.BLEND_DST_ALPHA": [{"prefix": "render.BLEND_DST_ALPHA", "body": "render.BLEND_DST_ALPHA", "description": ""}], "render.BLEND_DST_COLOR": [{"prefix": "render.BLEND_DST_COLOR", "body": "render.BLEND_DST_COLOR", "description": ""}], "render.BLEND_ONE": [{"prefix": "render.BLEND_ONE", "body": "render.BLEND_ONE", "description": ""}], "render.BLEND_ONE_MINUS_CONSTANT_ALPHA": [{"prefix": "render.BLEND_ONE_MINUS_CONSTANT_ALPHA", "body": "render.BLEND_ONE_MINUS_CONSTANT_ALPHA", "description": ""}], "render.BLEND_ONE_MINUS_CONSTANT_COLOR": [{"prefix": "render.BLEND_ONE_MINUS_CONSTANT_COLOR", "body": "render.BLEND_ONE_MINUS_CONSTANT_COLOR", "description": ""}], "render.BLEND_ONE_MINUS_DST_ALPHA": [{"prefix": "render.BLEND_ONE_MINUS_DST_ALPHA", "body": "render.BLEND_ONE_MINUS_DST_ALPHA", "description": ""}], "render.BLEND_ONE_MINUS_DST_COLOR": [{"prefix": "render.BLEND_ONE_MINUS_DST_COLOR", "body": "render.BLEND_ONE_MINUS_DST_COLOR", "description": ""}], "render.BLEND_ONE_MINUS_SRC_ALPHA": [{"prefix": "render.BLEND_ONE_MINUS_SRC_ALPHA", "body": "render.BLEND_ONE_MINUS_SRC_ALPHA", "description": ""}], "render.BLEND_ONE_MINUS_SRC_COLOR": [{"prefix": "render.BLEND_ONE_MINUS_SRC_COLOR", "body": "render.BLEND_ONE_MINUS_SRC_COLOR", "description": ""}], "render.BLEND_SRC_ALPHA": [{"prefix": "render.BLEND_SRC_ALPHA", "body": "render.BLEND_SRC_ALPHA", "description": ""}], "render.BLEND_SRC_ALPHA_SATURATE": [{"prefix": "render.BLEND_SRC_ALPHA_SATURATE", "body": "render.BLEND_SRC_ALPHA_SATURATE", "description": ""}], "render.BLEND_SRC_COLOR": [{"prefix": "render.BLEND_SRC_COLOR", "body": "render.BLEND_SRC_COLOR", "description": ""}], "render.BLEND_ZERO": [{"prefix": "render.BLEND_ZERO", "body": "render.BLEND_ZERO", "description": ""}], "render.BUFFER_COLOR_BIT": [{"prefix": "render.BUFFER_COLOR_BIT", "body": "render.BUFFER_COLOR_BIT", "description": ""}], "render.BUFFER_DEPTH_BIT": [{"prefix": "render.BUFFER_DEPTH_BIT", "body": "render.BUFFER_DEPTH_BIT", "description": ""}], "render.BUFFER_STENCIL_BIT": [{"prefix": "render.BUFFER_STENCIL_BIT", "body": "render.BUFFER_STENCIL_BIT", "description": ""}], "render.COMPARE_FUNC_ALWAYS": [{"prefix": "render.COMPARE_FUNC_ALWAYS", "body": "render.COMPARE_FUNC_ALWAYS", "description": ""}], "render.COMPARE_FUNC_EQUAL": [{"prefix": "render.COMPARE_FUNC_EQUAL", "body": "render.COMPARE_FUNC_EQUAL", "description": ""}], "render.COMPARE_FUNC_GEQUAL": [{"prefix": "render.COMPARE_FUNC_GEQUAL", "body": "render.COMPARE_FUNC_GEQUAL", "description": ""}], "render.COMPARE_FUNC_GREATER": [{"prefix": "render.COMPARE_FUNC_GREATER", "body": "render.COMPARE_FUNC_GREATER", "description": ""}], "render.COMPARE_FUNC_LEQUAL": [{"prefix": "render.COMPARE_FUNC_LEQUAL", "body": "render.COMPARE_FUNC_LEQUAL", "description": ""}], "render.COMPARE_FUNC_LESS": [{"prefix": "render.COMPARE_FUNC_LESS", "body": "render.COMPARE_FUNC_LESS", "description": ""}], "render.COMPARE_FUNC_NEVER": [{"prefix": "render.COMPARE_FUNC_NEVER", "body": "render.COMPARE_FUNC_NEVER", "description": ""}], "render.COMPARE_FUNC_NOTEQUAL": [{"prefix": "render.COMPARE_FUNC_NOTEQUAL", "body": "render.COMPARE_FUNC_NOTEQUAL", "description": ""}], "render.FACE_BACK": [{"prefix": "render.FACE_BACK", "body": "render.FACE_BACK", "description": ""}], "render.FACE_FRONT": [{"prefix": "render.FACE_FRONT", "body": "render.FACE_FRONT", "description": ""}], "render.FACE_FRONT_AND_BACK": [{"prefix": "render.FACE_FRONT_AND_BACK", "body": "render.FACE_FRONT_AND_BACK", "description": ""}], "render.FILTER_LINEAR": [{"prefix": "render.FILTER_LINEAR", "body": "render.FILTER_LINEAR", "description": ""}], "render.FILTER_NEAREST": [{"prefix": "render.FILTER_NEAREST", "body": "render.FILTER_NEAREST", "description": ""}], "render.FORMAT_DEPTH": [{"prefix": "render.FORMAT_DEPTH", "body": "render.FORMAT_DEPTH", "description": ""}], "render.FORMAT_LUMINANCE": [{"prefix": "render.FORMAT_LUMINANCE", "body": "render.FORMAT_LUMINANCE", "description": ""}], "render.FORMAT_RGB": [{"prefix": "render.FORMAT_RGB", "body": "render.FORMAT_RGB", "description": ""}], "render.FORMAT_RGBA": [{"prefix": "render.FORMAT_RGBA", "body": "render.FORMAT_RGBA", "description": ""}], "render.FORMAT_RGBA_DXT1": [{"prefix": "render.FORMAT_RGBA_DXT1", "body": "render.FORMAT_RGBA_DXT1", "description": ""}], "render.FORMAT_RGBA_DXT3": [{"prefix": "render.FORMAT_RGBA_DXT3", "body": "render.FORMAT_RGBA_DXT3", "description": ""}], "render.FORMAT_RGBA_DXT5": [{"prefix": "render.FORMAT_RGBA_DXT5", "body": "render.FORMAT_RGBA_DXT5", "description": ""}], "render.FORMAT_RGB_DXT1": [{"prefix": "render.FORMAT_RGB_DXT1", "body": "render.FORMAT_RGB_DXT1", "description": ""}], "render.FORMAT_STENCIL": [{"prefix": "render.FORMAT_STENCIL", "body": "render.FORMAT_STENCIL", "description": ""}], "render.STATE_BLEND": [{"prefix": "render.STATE_BLEND", "body": "render.STATE_BLEND", "description": ""}], "render.STATE_CULL_FACE": [{"prefix": "render.STATE_CULL_FACE", "body": "render.STATE_CULL_FACE", "description": ""}], "render.STATE_DEPTH_TEST": [{"prefix": "render.STATE_DEPTH_TEST", "body": "render.STATE_DEPTH_TEST", "description": ""}], "render.STATE_POLYGON_OFFSET_FILL": [{"prefix": "render.STATE_POLYGON_OFFSET_FILL", "body": "render.STATE_POLYGON_OFFSET_FILL", "description": ""}], "render.STATE_STENCIL_TEST": [{"prefix": "render.STATE_STENCIL_TEST", "body": "render.STATE_STENCIL_TEST", "description": ""}], "render.STENCIL_OP_DECR": [{"prefix": "render.STENCIL_OP_DECR", "body": "render.STENCIL_OP_DECR", "description": ""}], "render.STENCIL_OP_DECR_WRAP": [{"prefix": "render.STENCIL_OP_DECR_WRAP", "body": "render.STENCIL_OP_DECR_WRAP", "description": ""}], "render.STENCIL_OP_INCR": [{"prefix": "render.STENCIL_OP_INCR", "body": "render.STENCIL_OP_INCR", "description": ""}], "render.STENCIL_OP_INCR_WRAP": [{"prefix": "render.STENCIL_OP_INCR_WRAP", "body": "render.STENCIL_OP_INCR_WRAP", "description": ""}], "render.STENCIL_OP_INVERT": [{"prefix": "render.STENCIL_OP_INVERT", "body": "render.STENCIL_OP_INVERT", "description": ""}], "render.STENCIL_OP_KEEP": [{"prefix": "render.STENCIL_OP_KEEP", "body": "render.STENCIL_OP_KEEP", "description": ""}], "render.STENCIL_OP_REPLACE": [{"prefix": "render.STENCIL_OP_REPLACE", "body": "render.STENCIL_OP_REPLACE", "description": ""}], "render.STENCIL_OP_ZERO": [{"prefix": "render.STENCIL_OP_ZERO", "body": "render.STENCIL_OP_ZERO", "description": ""}], "render.WRAP_CLAMP_TO_BORDER": [{"prefix": "render.WRAP_CLAMP_TO_BORDER", "body": "render.WRAP_CLAMP_TO_BORDER", "description": ""}], "render.WRAP_CLAMP_TO_EDGE": [{"prefix": "render.WRAP_CLAMP_TO_EDGE", "body": "render.WRAP_CLAMP_TO_EDGE", "description": ""}], "render.WRAP_MIRRORED_REPEAT": [{"prefix": "render.WRAP_MIRRORED_REPEAT", "body": "render.WRAP_MIRRORED_REPEAT", "description": ""}], "render.WRAP_REPEAT": [{"prefix": "render.WRAP_REPEAT", "body": "render.WRAP_REPEAT", "description": ""}], "render.clear buffers": [{"prefix": "render.clear buffers", "body": "render.clear(${1:buffers})", "description": "clears the active render target"}], "render.constant_buffer": [{"prefix": "render.constant_buffer", "body": "render.constant_buffer()", "description": "create a new constant buffer."}], "render.delete_render_target render_target": [{"prefix": "render.delete_render_target render_target", "body": "render.delete_render_target(${1:render_target})", "description": "deletes a render target"}], "render.disable_material": [{"prefix": "render.disable_material", "body": "render.disable_material()", "description": "disables the currently enabled material"}], "render.disable_render_target render_target": [{"prefix": "render.disable_render_target render_target", "body": "render.disable_render_target(${1:render_target})", "description": "disables a render target"}], "render.disable_state state": [{"prefix": "render.disable_state state", "body": "render.disable_state(${1:state})", "description": "disables a render state"}], "render.disable_texture unit": [{"prefix": "render.disable_texture unit", "body": "render.disable_texture(${1:unit})", "description": "disables a texture for a render target"}], "render.draw predicate, [constants]": [{"prefix": "render.draw predicate, [constants]", "body": "render.draw(${1:predicate}, ${2:[constants]})", "description": "draws all objects matching a predicate"}], "render.draw_debug3d": [{"prefix": "render.draw_debug3d", "body": "render.draw_debug3d()", "description": "draws all 3d debug graphics"}], "render.enable_material material_id": [{"prefix": "render.enable_material material_id", "body": "render.enable_material(${1:material_id})", "description": "enables a material"}], "render.enable_render_target render_target": [{"prefix": "render.enable_render_target render_target", "body": "render.enable_render_target(${1:render_target})", "description": "enables a render target"}], "render.enable_state state": [{"prefix": "render.enable_state state", "body": "render.enable_state(${1:state})", "description": "enables a render state"}], "render.enable_texture unit, render_target, buffer_type": [{"prefix": "render.enable_texture unit, render_target, buffer_type", "body": "render.enable_texture(${1:unit}, ${2:render_target}, ${3:buffer_type})", "description": "enables a texture for a render target"}], "render.get_height": [{"prefix": "render.get_height", "body": "render.get_height()", "description": "gets the window height, as specified for the project"}], "render.get_render_target_height render_target, buffer_type": [{"prefix": "render.get_render_target_height render_target, buffer_type", "body": "render.get_render_target_height(${1:render_target}, ${2:buffer_type})", "description": "retrieve a buffer height from a render target"}], "render.get_render_target_width render_target, buffer_type": [{"prefix": "render.get_render_target_width render_target, buffer_type", "body": "render.get_render_target_width(${1:render_target}, ${2:buffer_type})", "description": "retrieve the buffer width from a render target"}], "render.get_width": [{"prefix": "render.get_width", "body": "render.get_width()", "description": "gets the window width, as specified for the project"}], "render.get_window_height": [{"prefix": "render.get_window_height", "body": "render.get_window_height()", "description": "gets the actual window height"}], "render.get_window_width": [{"prefix": "render.get_window_width", "body": "render.get_window_width()", "description": "gets the actual window width"}], "render.predicate tags": [{"prefix": "render.predicate tags", "body": "render.predicate(${1:tags})", "description": "creates a new render predicate"}], "render.render_target name, parameters": [{"prefix": "render.render_target name, parameters", "body": "render.render_target(${1:name}, ${2:parameters})", "description": "creates a new render target"}], "render.set_blend_func source_factor, destination_factor": [{"prefix": "render.set_blend_func source_factor, destination_factor", "body": "render.set_blend_func(${1:source_factor}, ${2:destination_factor})", "description": "sets the blending function"}], "render.set_color_mask red, green, blue, alpha": [{"prefix": "render.set_color_mask red, green, blue, alpha", "body": "render.set_color_mask(${1:red}, ${2:green}, ${3:blue}, ${4:alpha})", "description": "sets the color mask"}], "render.set_cull_face face_type": [{"prefix": "render.set_cull_face face_type", "body": "render.set_cull_face(${1:face_type})", "description": "sets the cull face"}], "render.set_depth_func func": [{"prefix": "render.set_depth_func func", "body": "render.set_depth_func(${1:func})", "description": "sets the depth test function"}], "render.set_depth_mask depth": [{"prefix": "render.set_depth_mask depth", "body": "render.set_depth_mask(${1:depth})", "description": "sets the depth mask"}], "render.set_polygon_offset factor, units": [{"prefix": "render.set_polygon_offset factor, units", "body": "render.set_polygon_offset(${1:factor}, ${2:units})", "description": "sets the polygon offset"}], "render.set_projection matrix": [{"prefix": "render.set_projection matrix", "body": "render.set_projection(${1:matrix})", "description": "sets the projection matrix"}], "render.set_render_target_size render_target, width, height": [{"prefix": "render.set_render_target_size render_target, width, height", "body": "render.set_render_target_size(${1:render_target}, ${2:width}, ${3:height})", "description": "sets the render target size"}], "render.set_stencil_func func, ref, mask": [{"prefix": "render.set_stencil_func func, ref, mask", "body": "render.set_stencil_func(${1:func}, ${2:ref}, ${3:mask})", "description": "sets the stencil test function"}], "render.set_stencil_mask mask": [{"prefix": "render.set_stencil_mask mask", "body": "render.set_stencil_mask(${1:mask})", "description": "sets the stencil mask"}], "render.set_stencil_op sfail, dpfail, dppass": [{"prefix": "render.set_stencil_op sfail, dpfail, dppass", "body": "render.set_stencil_op(${1:sfail}, ${2:dpfail}, ${3:dppass})", "description": "sets the stencil operator"}], "render.set_view matrix": [{"prefix": "render.set_view matrix", "body": "render.set_view(${1:matrix})", "description": "sets the view matrix"}], "render.set_viewport x, y, width, height": [{"prefix": "render.set_viewport x, y, width, height", "body": "render.set_viewport(${1:x}, ${2:y}, ${3:width}, ${4:height})", "description": "sets the render viewport"}], "window_resized height, width": [{"prefix": "window_resized height, width", "body": "msg.post(${1:receiver}, \"window_resized\", ${2:{${3:height}, ${4:width}\\}})", "description": "reports a window size change"}], "file:close": [{"prefix": "file:close", "body": "file:close()", "description": "closes a file"}], "file:flush": [{"prefix": "file:flush", "body": "file:flush()", "description": "flushes outstanding data to disk"}], "file:lines": [{"prefix": "file:lines", "body": "file:lines()", "description": "returns an iterator function for reading the file line-by-line"}], "file:read ...": [{"prefix": "file:read ...", "body": "file:read(${1:...})", "description": "reads the file according to the specified formats"}], "file:seek [whence], [offset]": [{"prefix": "file:seek [whence], [offset]", "body": "file:seek(${1:[whence]}, ${2:[offset]})", "description": "sets and gets the current file position"}], "file:setvbuf mode, [size]": [{"prefix": "file:setvbuf mode, [size]", "body": "file:setvbuf(${1:mode}, ${2:[size]})", "description": "sets the buffering mode for an output file"}], "file:write ...": [{"prefix": "file:write ...", "body": "file:write(${1:...})", "description": "writes to a file"}], "io.close [file]": [{"prefix": "io.close [file]", "body": "io.close(${1:[file]})", "description": "closes a file"}], "io.flush": [{"prefix": "io.flush", "body": "io.flush()", "description": "flushes outstanding data to disk for the default output file"}], "io.input [file]": [{"prefix": "io.input [file]", "body": "io.input(${1:[file]})", "description": "opens filename for input in text mode"}], "io.lines [filename]": [{"prefix": "io.lines [filename]", "body": "io.lines(${1:[filename]})", "description": "returns an iterator function for reading a named file line-by-line"}], "io.open filename, [mode]": [{"prefix": "io.open filename, [mode]", "body": "io.open(${1:filename}, ${2:[mode]})", "description": "opens a file"}], "io.output [file]": [{"prefix": "io.output [file]", "body": "io.output(${1:[file]})", "description": "opens a file for output"}], "io.popen prog, [mode]": [{"prefix": "io.popen prog, [mode]", "body": "io.popen(${1:prog}, ${2:[mode]})", "description": "creates a pipe and executes a command"}], "io.read ...": [{"prefix": "io.read ...", "body": "io.read(${1:...})", "description": "reads from the default input file"}], "io.tmpfile": [{"prefix": "io.tmpfile", "body": "io.tmpfile()", "description": "returns a handle to a temporary file"}], "io.type obj": [{"prefix": "io.type obj", "body": "io.type(${1:obj})", "description": "returns type of file handle"}], "io.write ...": [{"prefix": "io.write ...", "body": "io.write(${1:...})", "description": "writes to the default output file"}], "package.cpath": [{"prefix": "package.cpath", "body": "package.cpath()", "description": "search path used for loading DLLs using the require function"}], "package.loaded": [{"prefix": "package.loaded", "body": "package.loaded()", "description": "table of loaded packages"}], "package.loaders": [{"prefix": "package.loaders", "body": "package.loaders()", "description": "table of package loaders"}], "package.loadlib libname, funcname": [{"prefix": "package.loadlib libname, funcname", "body": "package.loadlib(${1:libname}, ${2:funcname})", "description": "loads a dynamic link library (DLL)"}], "package.path": [{"prefix": "package.path", "body": "package.path()", "description": "search path used for loading Lua code using the require function"}], "package.preload": [{"prefix": "package.preload", "body": "package.preload()", "description": "a table of special function loaders"}], "package.seeall module": [{"prefix": "package.seeall module", "body": "package.seeall(${1:module})", "description": "sets a metatable for the module so it can see global variables"}], "window.DIMMING_OFF": [{"prefix": "window.DIMMING_OFF", "body": "window.DIMMING_OFF", "description": "dimming mode off"}], "window.DIMMING_ON": [{"prefix": "window.DIMMING_ON", "body": "window.DIMMING_ON", "description": "dimming mode on"}], "window.DIMMING_UNKNOWN": [{"prefix": "window.DIMMING_UNKNOWN", "body": "window.DIMMING_UNKNOWN", "description": "dimming mode unknown"}], "window.WINDOW_EVENT_FOCUS_GAINED": [{"prefix": "window.WINDOW_EVENT_FOCUS_GAINED", "body": "window.WINDOW_EVENT_FOCUS_GAINED", "description": "focus gained window event"}], "window.WINDOW_EVENT_FOCUS_LOST": [{"prefix": "window.WINDOW_EVENT_FOCUS_LOST", "body": "window.WINDOW_EVENT_FOCUS_LOST", "description": "focus lost window event"}], "window.WINDOW_EVENT_RESIZED": [{"prefix": "window.WINDOW_EVENT_RESIZED", "body": "window.WINDOW_EVENT_RESIZED", "description": "resized window event"}], "window.get_dim_mode": [{"prefix": "window.get_dim_mode", "body": "window.get_dim_mode()", "description": "get the mode for screen dimming"}], "window.set_dim_mode mode": [{"prefix": "window.set_dim_mode mode", "body": "window.set_dim_mode(${1:mode})", "description": "set the mode for screen dimming"}], "window.set_listener callback": [{"prefix": "window.set_listener callback", "body": "window.set_listener(${1:callback})", "description": "sets a window event listener"}], "DM_DECLARE_EXTENSION symbol, name, appinit, appfinal, init, update, on_event, final": [{"prefix": "DM_DECLARE_EXTENSION symbol, name, appinit, appfinal, init, update, on_event, final", "body": "DM_DECLARE_EXTENSION", "description": "declare a new extension"}], "DM_PLATFORM_ANDROID": [{"prefix": "DM_PLATFORM_ANDROID", "body": "DM_PLATFORM_ANDROID", "description": "Set if the platform is Android "}], "DM_PLATFORM_HTML5": [{"prefix": "DM_PLATFORM_HTML5", "body": "DM_PLATFORM_HTML5", "description": "Set if the platform is Html5 "}], "DM_PLATFORM_IOS": [{"prefix": "DM_PLATFORM_IOS", "body": "DM_PLATFORM_IOS", "description": "Set if the platform is iPhoneOS "}], "DM_PLATFORM_LINUX": [{"prefix": "DM_PLATFORM_LINUX", "body": "DM_PLATFORM_LINUX", "description": "Set if the platform is Linux "}], "DM_PLATFORM_OSX": [{"prefix": "DM_PLATFORM_OSX", "body": "DM_PLATFORM_OSX", "description": "Set if the platform is OSX "}], "DM_PLATFORM_WIN32": [{"prefix": "DM_PLATFORM_WIN32", "body": "DM_PLATFORM_WIN32", "description": "Set if the platform is Windows  (on both x86 and x86_64)"}], "OnActivityResult env, activity, request_code, result_code, result": [{"prefix": "OnActivityResult env, activity, request_code, result_code, result", "body": "OnActivityResult", "description": "onActivityResult callback typedef"}], "RegisteriOSUIApplicationDelegate delegate": [{"prefix": "RegisteriOSUIApplicationDelegate delegate", "body": "RegisteriOSUIApplicationDelegate(${1:delegate})", "description": "Register application delegate"}], "UnregisteriOSUIApplicationDelegate delegate": [{"prefix": "UnregisteriOSUIApplicationDelegate delegate", "body": "UnregisteriOSUIApplicationDelegate(${1:delegate})", "description": "Unregister an application delegate"}], "dmExtension::AppParams": [{"prefix": "dmExtension::AppParams", "body": "dmExtension::AppParams", "description": "application level callback data"}], "dmExtension::Event": [{"prefix": "dmExtension::Event", "body": "dmExtension::Event", "description": "event callback data"}], "dmExtension::EventID": [{"prefix": "dmExtension::EventID", "body": "dmExtension::EventID", "description": "event id enumeration"}], "dmExtension::Params": [{"prefix": "dmExtension::Params", "body": "dmExtension::Params", "description": "extension level callback data"}], "dmExtension::Result": [{"prefix": "dmExtension::Result", "body": "dmExtension::Result", "description": "result enumeration"}], "webview.create callback": [{"prefix": "webview.create callback", "body": "webview.create(${1:callback})", "description": "Creates a webview"}], "webview.destroy webview_id": [{"prefix": "webview.destroy webview_id", "body": "webview.destroy(${1:webview_id})", "description": "Destroys a webview"}], "webview.eval webview_id, code": [{"prefix": "webview.eval webview_id, code", "body": "webview.eval(${1:webview_id}, ${2:code})", "description": "Evaluates javascript in a webview"}], "webview.is_visible webview_id": [{"prefix": "webview.is_visible webview_id", "body": "webview.is_visible(${1:webview_id})", "description": "Gets the visibility state of the webview"}], "webview.open webview_id, url, options": [{"prefix": "webview.open webview_id, url, options", "body": "webview.open(${1:webview_id}, ${2:url}, ${3:options})", "description": "Open a page using an url"}], "webview.open_raw webview_id, html, options": [{"prefix": "webview.open_raw webview_id, html, options", "body": "webview.open_raw(${1:webview_id}, ${2:html}, ${3:options})", "description": "Open a page using html"}], "webview.set_position webview_id, x, y, width, height": [{"prefix": "webview.set_position webview_id, x, y, width, height", "body": "webview.set_position(${1:webview_id}, ${2:x}, ${3:y}, ${4:width}, ${5:height})", "description": "Sets the position and size of the webview"}], "webview.set_visible webview_id, visible": [{"prefix": "webview.set_visible webview_id, visible", "body": "webview.set_visible(${1:webview_id}, ${2:visible})", "description": "Shows or hides a web view"}], "string.byte s, [i], [j]": [{"prefix": "string.byte s, [i], [j]", "body": "string.byte(${1:s}, ${2:[i]}, ${3:[j]})", "description": "converts a character into its ASCII (decimal) equivalent"}], "string.char ...": [{"prefix": "string.char ...", "body": "string.char(${1:...})", "description": "converts ASCII codes into their equivalent characters"}], "string.dump function": [{"prefix": "string.dump function", "body": "string.dump(${1:function})", "description": "converts a function into binary"}], "string.find s, pattern, [init], [plain]": [{"prefix": "string.find s, pattern, [init], [plain]", "body": "string.find(${1:s}, ${2:pattern}, ${3:[init]}, ${4:[plain]})", "description": "searches a string for a pattern"}], "string.format formatstring, ...": [{"prefix": "string.format formatstring, ...", "body": "string.format(${1:formatstring}, ${2:...})", "description": "formats a string"}], "string.gmatch s, pattern": [{"prefix": "string.gmatch s, pattern", "body": "string.gmatch(${1:s}, ${2:pattern})", "description": "iterate over a string"}], "string.gsub s, pattern, repl, [n]": [{"prefix": "string.gsub s, pattern, repl, [n]", "body": "string.gsub(${1:s}, ${2:pattern}, ${3:repl}, ${4:[n]})", "description": "substitute strings inside another string"}], "string.len s": [{"prefix": "string.len s", "body": "string.len(${1:s})", "description": "return the length of a string"}], "string.lower s": [{"prefix": "string.lower s", "body": "string.lower(${1:s})", "description": "converts a string to lower-case"}], "string.match s, pattern, [init]": [{"prefix": "string.match s, pattern, [init]", "body": "string.match(${1:s}, ${2:pattern}, ${3:[init]})", "description": "searches a string for a pattern"}], "string.rep s, n": [{"prefix": "string.rep s, n", "body": "string.rep(${1:s}, ${2:n})", "description": "returns repeated copies of a string"}], "string.reverse s": [{"prefix": "string.reverse s", "body": "string.reverse(${1:s})", "description": "reverses the order of characters in a string"}], "string.sub s, i, [j]": [{"prefix": "string.sub s, i, [j]", "body": "string.sub(${1:s}, ${2:i}, ${3:[j]})", "description": "returns a substring of a string"}], "string.upper s": [{"prefix": "string.upper s", "body": "string.upper(${1:s})", "description": "converts a string to upper-case"}], "http.request url, method, callback, [headers], [post_data], [options]": [{"prefix": "http.request url, method, callback, [headers], [post_data], [options]", "body": "http.request(${1:url}, ${2:method}, ${3:callback}, ${4:[headers]}, ${5:[post_data]}, ${6:[options]})", "description": "perform a HTTP/HTTPS request"}], "tilemap.get_bounds url": [{"prefix": "tilemap.get_bounds url", "body": "tilemap.get_bounds(${1:url})", "description": "get the bounds of a tile map"}], "tilemap.get_tile url, layer, x, y": [{"prefix": "tilemap.get_tile url, layer, x, y", "body": "tilemap.get_tile(${1:url}, ${2:layer}, ${3:x}, ${4:y})", "description": "get a tile from a tile map"}], "tilemap.reset_constant url, constant": [{"prefix": "tilemap.reset_constant url, constant", "body": "tilemap.reset_constant(${1:url}, ${2:constant})", "description": "reset a shader constant for a tile map"}], "tilemap.set_constant url, constant, value": [{"prefix": "tilemap.set_constant url, constant, value", "body": "tilemap.set_constant(${1:url}, ${2:constant}, ${3:value})", "description": "set a shader constant for a tile map"}], "tilemap.set_tile url, layer, x, y, tile, [h-flipped], [v-flipped]": [{"prefix": "tilemap.set_tile url, layer, x, y, tile, [h-flipped], [v-flipped]", "body": "tilemap.set_tile(${1:url}, ${2:layer}, ${3:x}, ${4:y}, ${5:tile}, ${6:[h-flipped]}, ${7:[v-flipped]})", "description": "set a tile in a tile map"}], "client:close": [{"prefix": "client:close", "body": "client:close()", "description": "closes a client TCP object"}], "client:dirty": [{"prefix": "client:dirty", "body": "client:dirty()", "description": "checks the read buffer status"}], "client:getfd": [{"prefix": "client:getfd", "body": "client:getfd()", "description": "gets the socket descriptor"}], "client:getoption option": [{"prefix": "client:getoption option", "body": "client:getoption(${1:option})", "description": "gets options for the socket"}], "client:getpeername": [{"prefix": "client:getpeername", "body": "client:getpeername()", "description": "gets information about a client's peer"}], "client:getsockname": [{"prefix": "client:getsockname", "body": "client:getsockname()", "description": "gets the local address information from client"}], "client:getstats": [{"prefix": "client:getstats", "body": "client:getstats()", "description": "gets accounting information on the socket"}], "client:receive [pattern], [prefix]": [{"prefix": "client:receive [pattern], [prefix]", "body": "client:receive(${1:[pattern]}, ${2:[prefix]})", "description": "receives data from a client socket"}], "client:send data, [i], [j]": [{"prefix": "client:send data, [i], [j]", "body": "client:send(${1:data}, ${2:[i]}, ${3:[j]})", "description": "sends data through client socket"}], "client:setfd handle": [{"prefix": "client:setfd handle", "body": "client:setfd(${1:handle})", "description": "sets the socket descriptor"}], "client:setoption option, [value]": [{"prefix": "client:setoption option, [value]", "body": "client:setoption(${1:option}, ${2:[value]})", "description": "sets options for the socket"}], "client:setstats received, sent, age": [{"prefix": "client:setstats received, sent, age", "body": "client:setstats(${1:received}, ${2:sent}, ${3:age})", "description": "resets accounting information on the socket"}], "client:settimeout value, [mode]": [{"prefix": "client:settimeout value, [mode]", "body": "client:settimeout(${1:value}, ${2:[mode]})", "description": "set the timeout values for the socket"}], "client:shutdown mode": [{"prefix": "client:shutdown mode", "body": "client:shutdown(${1:mode})", "description": "shut down socket"}], "connected:close": [{"prefix": "connected:close", "body": "connected:close()", "description": "closes the UDP socket"}], "connected:getoption option": [{"prefix": "connected:getoption option", "body": "connected:getoption(${1:option})", "description": "gets options for the UDP socket"}], "connected:getpeername": [{"prefix": "connected:getpeername", "body": "connected:getpeername()", "description": "gets information about the UDP socket peer"}], "connected:getsockname": [{"prefix": "connected:getsockname", "body": "connected:getsockname()", "description": "gets the local address information associated to the socket"}], "connected:receive [size]": [{"prefix": "connected:receive [size]", "body": "connected:receive(${1:[size]})", "description": "receives a datagram from the UDP socket"}], "connected:send datagram": [{"prefix": "connected:send datagram", "body": "connected:send(${1:datagram})", "description": "sends a datagram through the connected UDP socket"}], "connected:setoption option, [value]": [{"prefix": "connected:setoption option, [value]", "body": "connected:setoption(${1:option}, ${2:[value]})", "description": "sets options for the UDP socket"}], "connected:setpeername \"*\"": [{"prefix": "connected:setpeername \"*\"", "body": "connected:setpeername(${1:\"*\"})", "description": "remove the peer of the connected UDP socket"}], "connected:settimeout value": [{"prefix": "connected:settimeout value", "body": "connected:settimeout(${1:value})", "description": "sets the timeout value for the UDP socket"}], "master:bind address, port": [{"prefix": "master:bind address, port", "body": "master:bind(${1:address}, ${2:port})", "description": "binds a master object to address and port on the local host"}], "master:close": [{"prefix": "master:close", "body": "master:close()", "description": "closes a master TCP object"}], "master:connect address, port": [{"prefix": "master:connect address, port", "body": "master:connect(${1:address}, ${2:port})", "description": "connects a master object to a remote host"}], "master:dirty": [{"prefix": "master:dirty", "body": "master:dirty()", "description": "checks the read buffer status"}], "master:getfd": [{"prefix": "master:getfd", "body": "master:getfd()", "description": "gets the socket descriptor"}], "master:getsockname": [{"prefix": "master:getsockname", "body": "master:getsockname()", "description": "gets the local address information from master"}], "master:getstats": [{"prefix": "master:getstats", "body": "master:getstats()", "description": "gets accounting information on the socket"}], "master:listen backlog": [{"prefix": "master:listen backlog", "body": "master:listen(${1:backlog})", "description": "makes the master socket listen for connections"}], "master:setfd handle": [{"prefix": "master:setfd handle", "body": "master:setfd(${1:handle})", "description": "sets the socket descriptor"}], "master:setstats received, sent, age": [{"prefix": "master:setstats received, sent, age", "body": "master:setstats(${1:received}, ${2:sent}, ${3:age})", "description": "resets accounting information on the socket"}], "master:settimeout value, [mode]": [{"prefix": "master:settimeout value, [mode]", "body": "master:settimeout(${1:value}, ${2:[mode]})", "description": "set the timeout values for the socket"}], "server:accept": [{"prefix": "server:accept", "body": "server:accept()", "description": "waits for a remote connection on the server object"}], "server:close": [{"prefix": "server:close", "body": "server:close()", "description": "closes a server TCP object"}], "server:dirty": [{"prefix": "server:dirty", "body": "server:dirty()", "description": "checks the read buffer status"}], "server:getfd": [{"prefix": "server:getfd", "body": "server:getfd()", "description": "gets the socket descriptor"}], "server:getoption option": [{"prefix": "server:getoption option", "body": "server:getoption(${1:option})", "description": "gets options for the socket"}], "server:getsockname": [{"prefix": "server:getsockname", "body": "server:getsockname()", "description": "gets the local address information from server"}], "server:getstats": [{"prefix": "server:getstats", "body": "server:getstats()", "description": "gets accounting information on the socket"}], "server:setfd handle": [{"prefix": "server:setfd handle", "body": "server:setfd(${1:handle})", "description": "sets the socket descriptor"}], "server:setoption option, [value]": [{"prefix": "server:setoption option, [value]", "body": "server:setoption(${1:option}, ${2:[value]})", "description": "sets options for the socket"}], "server:setstats received, sent, age": [{"prefix": "server:setstats received, sent, age", "body": "server:setstats(${1:received}, ${2:sent}, ${3:age})", "description": "resets accounting information on the socket"}], "server:settimeout value, [mode]": [{"prefix": "server:settimeout value, [mode]", "body": "server:settimeout(${1:value}, ${2:[mode]})", "description": "set the timeout values for the socket"}], "socket._SETSIZE": [{"prefix": "socket._SETSIZE", "body": "socket._SETSIZE", "description": "max numbers of sockets the select function can handle"}], "socket._VERSION": [{"prefix": "socket._VERSION", "body": "socket._VERSION", "description": "the current LuaSocket version"}], "socket.connect address, port, [locaddr], [locport], [family]": [{"prefix": "socket.connect address, port, [locaddr], [locport], [family]", "body": "socket.connect(${1:address}, ${2:port}, ${3:[locaddr]}, ${4:[locport]}, ${5:[family]})", "description": "creates a new connected TCP client object"}], "socket.dns.getaddrinfo address": [{"prefix": "socket.dns.getaddrinfo address", "body": "socket.dns.getaddrinfo(${1:address})", "description": "resolve to IPv4 or IPv6 address"}], "socket.dns.gethostname": [{"prefix": "socket.dns.gethostname", "body": "socket.dns.gethostname()", "description": "gets the machine host name"}], "socket.dns.getnameinfo address": [{"prefix": "socket.dns.getnameinfo address", "body": "socket.dns.getnameinfo(${1:address})", "description": "resolve to hostname (IPv4 or IPv6)"}], "socket.dns.tohostname address": [{"prefix": "socket.dns.tohostname address", "body": "socket.dns.tohostname(${1:address})", "description": "resolve to host name (IPv4)"}], "socket.dns.toip address": [{"prefix": "socket.dns.toip address", "body": "socket.dns.toip(${1:address})", "description": "resolve to IPv4 address"}], "socket.gettime": [{"prefix": "socket.gettime", "body": "socket.gettime()", "description": "gets seconds since system epoch"}], "socket.newtry finalizer": [{"prefix": "socket.newtry finalizer", "body": "socket.newtry(${1:finalizer})", "description": "creates a new try function"}], "socket.protect func": [{"prefix": "socket.protect func", "body": "socket.protect(${1:func})", "description": "converts a function that throws exceptions into a safe function"}], "socket.select recvt, sendt, [timeout]": [{"prefix": "socket.select recvt, sendt, [timeout]", "body": "socket.select(${1:recvt}, ${2:sendt}, ${3:[timeout]})", "description": "waits for a number of sockets to change status"}], "socket.skip d, [ret1], [ret2], [retN]": [{"prefix": "socket.skip d, [ret1], [ret2], [retN]", "body": "socket.skip(${1:d}, ${2:[ret1]}, ${3:[ret2]}, ${4:[retN]})", "description": "drops a number of arguments and returns the remaining"}], "socket.sleep time": [{"prefix": "socket.sleep time", "body": "socket.sleep(${1:time})", "description": "sleeps for a number of seconds"}], "socket.tcp": [{"prefix": "socket.tcp", "body": "socket.tcp()", "description": "creates a new IPv4 TCP master object"}], "socket.tcp6": [{"prefix": "socket.tcp6", "body": "socket.tcp6()", "description": "creates a new IPv6 TCP master object"}], "socket.udp": [{"prefix": "socket.udp", "body": "socket.udp()", "description": "creates a new IPv4 UDP object"}], "socket.udp6": [{"prefix": "socket.udp6", "body": "socket.udp6()", "description": "creates a new IPv6 UDP object"}], "unconnected:close": [{"prefix": "unconnected:close", "body": "unconnected:close()", "description": "closes the UDP socket"}], "unconnected:getoption option": [{"prefix": "unconnected:getoption option", "body": "unconnected:getoption(${1:option})", "description": "gets options for the UDP socket"}], "unconnected:getsockname": [{"prefix": "unconnected:getsockname", "body": "unconnected:getsockname()", "description": "gets the local address information associated to the socket"}], "unconnected:receive [size]": [{"prefix": "unconnected:receive [size]", "body": "unconnected:receive(${1:[size]})", "description": "receives a datagram from the UDP socket"}], "unconnected:receivefrom [size]": [{"prefix": "unconnected:receivefrom [size]", "body": "unconnected:receivefrom(${1:[size]})", "description": "receives a datagram from the UDP socket"}], "unconnected:sendto datagram, ip, port": [{"prefix": "unconnected:sendto datagram, ip, port", "body": "unconnected:sendto(${1:datagram}, ${2:ip}, ${3:port})", "description": "sends a datagram through the UDP socket to the specified IP address and port number"}], "unconnected:setoption option, [value]": [{"prefix": "unconnected:setoption option, [value]", "body": "unconnected:setoption(${1:option}, ${2:[value]})", "description": "sets options for the UDP socket"}], "unconnected:setpeername address, port": [{"prefix": "unconnected:setpeername address, port", "body": "unconnected:setpeername(${1:address}, ${2:port})", "description": "set the peer of the unconnected UDP socket"}], "unconnected:setsockname address, port": [{"prefix": "unconnected:setsockname address, port", "body": "unconnected:setsockname(${1:address}, ${2:port})", "description": "binds the UDP socket to a local address"}], "unconnected:settimeout value": [{"prefix": "unconnected:settimeout value", "body": "unconnected:settimeout(${1:value})", "description": "sets the timeout value for the UDP socket"}], "dmConfigFile::GetFloat config, key, default_value": [{"prefix": "dmConfigFile::GetFloat config, key, default_value", "body": "dmConfigFile::GetFloat(${1:config}, ${2:key}, ${3:default_value})", "description": "get config value as float"}], "dmConfigFile::GetInt config, key, default_value": [{"prefix": "dmConfigFile::GetInt config, key, default_value", "body": "dmConfigFile::GetInt(${1:config}, ${2:key}, ${3:default_value})", "description": "get config value as int"}], "dmConfigFile::GetString config, key, default_value": [{"prefix": "dmConfigFile::GetString config, key, default_value", "body": "dmConfigFile::GetString(${1:config}, ${2:key}, ${3:default_value})", "description": "get config value as string"}], "dmConfigFile::HConfig": [{"prefix": "dmConfigFile::HConfig", "body": "dmConfigFile::HConfig", "description": "HConfig type definition"}], "debug.debug": [{"prefix": "debug.debug", "body": "debug.debug()", "description": "enters interactive debugging"}], "debug.getfenv o": [{"prefix": "debug.getfenv o", "body": "debug.getfenv(${1:o})", "description": "returns the environment of an object"}], "debug.gethook [thread]": [{"prefix": "debug.gethook [thread]", "body": "debug.gethook(${1:[thread]})", "description": "returns the current hook settings"}], "debug.getinfo [thread], function, [what]": [{"prefix": "debug.getinfo [thread], function, [what]", "body": "debug.getinfo(${1:[thread]}, ${2:function}, ${3:[what]})", "description": "returns a table with information about a function"}], "debug.getlocal [thread], level, local": [{"prefix": "debug.getlocal [thread], level, local", "body": "debug.getlocal(${1:[thread]}, ${2:level}, ${3:local})", "description": "returns name and value of a local variable"}], "debug.getmetatable object": [{"prefix": "debug.getmetatable object", "body": "debug.getmetatable(${1:object})", "description": "returns the metatable of the given object"}], "debug.getregistry": [{"prefix": "debug.getregistry", "body": "debug.getregistry()", "description": "returns the registry table"}], "debug.getupvalue func, up": [{"prefix": "debug.getupvalue func, up", "body": "debug.getupvalue(${1:func}, ${2:up})", "description": "returns the name and value of an upvalue"}], "debug.setfenv object, table": [{"prefix": "debug.setfenv object, table", "body": "debug.setfenv(${1:object}, ${2:table})", "description": "sets the environment of an object"}], "debug.sethook [thread], hook, mask, [count]": [{"prefix": "debug.sethook [thread], hook, mask, [count]", "body": "debug.sethook(${1:[thread]}, ${2:hook}, ${3:mask}, ${4:[count]})", "description": "sets a debug hook function"}], "debug.setlocal [thread], level, local, value": [{"prefix": "debug.setlocal [thread], level, local, value", "body": "debug.setlocal(${1:[thread]}, ${2:level}, ${3:local}, ${4:value})", "description": "sets the value of the local variable"}], "debug.setmetatable object, table": [{"prefix": "debug.setmetatable object, table", "body": "debug.setmetatable(${1:object}, ${2:table})", "description": "sets the metatable for an object"}], "debug.setupvalue func, up, value": [{"prefix": "debug.setupvalue func, up, value", "body": "debug.setupvalue(${1:func}, ${2:up}, ${3:value})", "description": "sets an upvalue for a function"}], "debug.traceback [thread], [message], [level]": [{"prefix": "debug.traceback [thread], [message], [level]", "body": "debug.traceback(${1:[thread]}, ${2:[message]}, ${3:[level]})", "description": "returns a string with a traceback of the stack call"}], "play_sound [delay], [gain]": [{"prefix": "play_sound [delay], [gain]", "body": "msg.post(${1:receiver}, \"play_sound\", ${2:{${3:[delay]}, ${4:[gain]}\\}})", "description": "plays a sound"}], "set_gain [gain]": [{"prefix": "set_gain [gain]", "body": "msg.post(${1:receiver}, \"set_gain\", ${2:{${3:[gain]}\\}})", "description": "set sound gain"}], "sound.get_group_gain group": [{"prefix": "sound.get_group_gain group", "body": "sound.get_group_gain(${1:group})", "description": "get mixer group gain"}], "sound.get_group_name group": [{"prefix": "sound.get_group_name group", "body": "sound.get_group_name(${1:group})", "description": "get mixer group name string"}], "sound.get_groups": [{"prefix": "sound.get_groups", "body": "sound.get_groups()", "description": "get all mixer group names"}], "sound.get_peak group, window": [{"prefix": "sound.get_peak group, window", "body": "sound.get_peak(${1:group}, ${2:window})", "description": "get peak gain value from mixer group"}], "sound.get_rms group, window": [{"prefix": "sound.get_rms group, window", "body": "sound.get_rms(${1:group}, ${2:window})", "description": "get RMS value from mixer group"}], "sound.is_music_playing": [{"prefix": "sound.is_music_playing", "body": "sound.is_music_playing()", "description": "check if background music is playing"}], "sound.is_phone_call_active": [{"prefix": "sound.is_phone_call_active", "body": "sound.is_phone_call_active()", "description": "check if a phone call is active"}], "sound.play url, [play_properties]": [{"prefix": "sound.play url, [play_properties]", "body": "sound.play(${1:url}, ${2:[play_properties]})", "description": "plays a sound"}], "sound.set_gain url, [gain]": [{"prefix": "sound.set_gain url, [gain]", "body": "sound.set_gain(${1:url}, ${2:[gain]})", "description": "set sound gain"}], "sound.set_group_gain group, gain": [{"prefix": "sound.set_group_gain group, gain", "body": "sound.set_group_gain(${1:group}, ${2:gain})", "description": "set mixer group gain"}], "sound.stop url": [{"prefix": "sound.stop url", "body": "sound.stop(${1:url})", "description": "stop a playing a sound(s)"}], "stop_sound": [{"prefix": "stop_sound", "body": "msg.post(${1:receiver}, \"stop_sound\")", "description": "stop a playing a sound(s)"}], "dmArray::Back": [{"prefix": "dmArray::Back", "body": "dmArray::Back()", "description": "array back"}, {"prefix": "dmArray::Back", "body": "dmArray::Back()", "description": "array back (const)"}], "dmArray::Begin": [{"prefix": "dmArray::Begin", "body": "dmArray::Begin()", "description": "array begin"}], "dmArray::Capacity": [{"prefix": "dmArray::Capacity", "body": "dmArray::Capacity()", "description": "capacity of array"}], "dmArray::Empty": [{"prefix": "dmArray::Empty", "body": "dmArray::Empty()", "description": "array empty"}], "dmArray::End": [{"prefix": "dmArray::End", "body": "dmArray::End()", "description": "array end"}], "dmArray::EraseSwap index": [{"prefix": "dmArray::EraseSwap index", "body": "dmArray::EraseSwap(${1:index})", "description": "array eraseswap"}], "dmArray::EraseSwapRef element": [{"prefix": "dmArray::EraseSwapRef element", "body": "dmArray::EraseSwapRef(${1:element})", "description": "array reference eraseswap"}], "dmArray::Front": [{"prefix": "dmArray::Front", "body": "dmArray::Front()", "description": "array front"}, {"prefix": "dmArray::Front", "body": "dmArray::Front()", "description": "array front (const)"}], "dmArray::Full": [{"prefix": "dmArray::Full", "body": "dmArray::Full()", "description": "array full"}], "dmArray::OffsetCapacity offset": [{"prefix": "dmArray::OffsetCapacity offset", "body": "dmArray::OffsetCapacity(${1:offset})", "description": "array offset capacity"}], "dmArray::Pop": [{"prefix": "dmArray::Pop", "body": "dmArray::Pop()", "description": "array pop"}], "dmArray::Push element": [{"prefix": "dmArray::Push element", "body": "dmArray::Push(${1:element})", "description": "array push"}], "dmArray::PushArray array, count": [{"prefix": "dmArray::PushArray array, count", "body": "dmArray::PushArray(${1:array}, ${2:count})", "description": "array push array"}], "dmArray::Remaining": [{"prefix": "dmArray::Remaining", "body": "dmArray::Remaining()", "description": "remaining size of array"}], "dmArray::SetCapacity capacity": [{"prefix": "dmArray::SetCapacity capacity", "body": "dmArray::SetCapacity(${1:capacity})", "description": "array set capacity"}], "dmArray::SetSize size": [{"prefix": "dmArray::SetSize size", "body": "dmArray::SetSize(${1:size})", "description": "array set size"}], "dmArray::Size": [{"prefix": "dmArray::Size", "body": "dmArray::Size()", "description": "size of array"}], "dmArray::Swap rhs": [{"prefix": "dmArray::Swap rhs", "body": "dmArray::Swap(${1:rhs})", "description": "array swap"}], "dmArray::dmArray": [{"prefix": "dmArray::dmArray", "body": "dmArray::dmArray()", "description": "empty auto-allocated array"}], "dmArray::dmArray user_array, size, capacity": [{"prefix": "dmArray::dmArray user_array, size, capacity", "body": "dmArray::dmArray(${1:user_array}, ${2:size}, ${3:capacity})", "description": "user-allocated array"}], "dmArray::operator[] index": [{"prefix": "dmArray::operator[] index", "body": "dmArray::operator[](${1:index})", "description": "array operator[]"}, {"prefix": "dmArray::operator[] index", "body": "dmArray::operator[](${1:index})", "description": "array operator[] (const)"}], "dmArray::~dmArray": [{"prefix": "dmArray::~dmArray", "body": "dmArray::~dmArray()", "description": "array destructor"}], "angular_damping": [{"prefix": "angular_damping", "body": "\"angular_damping\"", "description": "number collision object angular damping"}], "angular_velocity": [{"prefix": "angular_velocity", "body": "\"angular_velocity\"", "description": "vector3 collision object angular velocity"}], "apply_force force, position": [{"prefix": "apply_force force, position", "body": "msg.post(${1:receiver}, \"apply_force\", ${2:{${3:force}, ${4:position}\\}})", "description": "applies a force on a collision object"}], "collision_response other_id, other_position, other_group, own_group": [{"prefix": "collision_response other_id, other_position, other_group, own_group", "body": "msg.post(${1:receiver}, \"collision_response\", ${2:{${3:other_id}, ${4:other_position}, ${5:other_group}, ${6:own_group}\\}})", "description": "reports a collision between two collision objects"}], "contact_point_response position, normal, relative_velocity, distance, applied_impulse, life_time, mass, other_mass, other_id, other_position, other_group, own_group": [{"prefix": "contact_point_response position, normal, relative_velocity, distance, applied_impulse, life_time, mass, other_mass, other_id, other_position, other_group, own_group", "body": "msg.post(${1:receiver}, \"contact_point_response\", ${2:{${3:position}, ${4:normal}, ${5:relative_velocity}, ${6:distance}, ${7:applied_impulse}, ${8:life_time}, ${9:mass}, ${10:other_mass}, ${11:other_id}, ${12:other_position}, ${13:other_group}, ${14:own_group}\\}})", "description": "reports a contact point between two collision objects"}], "linear_damping": [{"prefix": "linear_damping", "body": "\"linear_damping\"", "description": "number collision object linear damping"}], "linear_velocity": [{"prefix": "linear_velocity", "body": "\"linear_velocity\"", "description": "vector3 collision object linear velocity"}], "mass": [{"prefix": "mass", "body": "\"mass\"", "description": "number collision object mass"}], "physics.ray_cast from, to, groups, [request_id]": [{"prefix": "physics.ray_cast from, to, groups, [request_id]", "body": "physics.ray_cast(${1:from}, ${2:to}, ${3:groups}, ${4:[request_id]})", "description": "requests a ray cast to be performed"}], "ray_cast_missed request_id": [{"prefix": "ray_cast_missed request_id", "body": "msg.post(${1:receiver}, \"ray_cast_missed\", ${2:{${3:request_id}\\}})", "description": "reports a ray cast miss"}], "ray_cast_response fraction, position, normal, id, group, request_id": [{"prefix": "ray_cast_response fraction, position, normal, id, group, request_id", "body": "msg.post(${1:receiver}, \"ray_cast_response\", ${2:{${3:fraction}, ${4:position}, ${5:normal}, ${6:id}, ${7:group}, ${8:request_id}\\}})", "description": "reports a ray cast hit"}], "trigger_response other_id, enter, other_group, own_group": [{"prefix": "trigger_response other_id, enter, other_group, own_group", "body": "msg.post(${1:receiver}, \"trigger_response\", ${2:{${3:other_id}, ${4:enter}, ${5:other_group}, ${6:own_group}\\}})", "description": "reports interaction (enter/exit) between a trigger collision object and another collision object"}], "collectionfactory.STATUS_LOADED": [{"prefix": "collectionfactory.STATUS_LOADED", "body": "collectionfactory.STATUS_LOADED", "description": "loaded"}], "collectionfactory.STATUS_LOADING": [{"prefix": "collectionfactory.STATUS_LOADING", "body": "collectionfactory.STATUS_LOADING", "description": "loading"}], "collectionfactory.STATUS_UNLOADED": [{"prefix": "collectionfactory.STATUS_UNLOADED", "body": "collectionfactory.STATUS_UNLOADED", "description": "unloaded"}], "collectionfactory.create url, [position], [rotation], [properties], [scale]": [{"prefix": "collectionfactory.create url, [position], [rotation], [properties], [scale]", "body": "collectionfactory.create(${1:url}, ${2:[position]}, ${3:[rotation]}, ${4:[properties]}, ${5:[scale]})", "description": "Spawn a new instance of a collection into the existing collection."}], "collectionfactory.get_status [url]": [{"prefix": "collectionfactory.get_status [url]", "body": "collectionfactory.get_status(${1:[url]})", "description": "Get collection factory status"}], "collectionfactory.load [url], [complete_function]": [{"prefix": "collectionfactory.load [url], [complete_function]", "body": "collectionfactory.load(${1:[url]}, ${2:[complete_function]})", "description": "Load resources of a collection factory prototype."}], "collectionfactory.unload [url]": [{"prefix": "collectionfactory.unload [url]", "body": "collectionfactory.unload(${1:[url]})", "description": "Unload resources previously loaded using collectionfactory.load"}], "Result": [{"prefix": "Result", "body": "Result", "description": "result enumeration"}], "ValueType": [{"prefix": "ValueType", "body": "ValueType", "description": "valueType enumeration"}], "dmBuffer::Create count, streams_decl, streams_decl_count, out_buffer": [{"prefix": "dmBuffer::Create count, streams_decl, streams_decl_count, out_buffer", "body": "dmBuffer::Create(${1:count}, ${2:streams_decl}, ${3:streams_decl_count}, ${4:out_buffer})", "description": "create Buffer"}], "dmBuffer::Destroy buffer": [{"prefix": "dmBuffer::Destroy buffer", "body": "dmBuffer::Destroy(${1:buffer})", "description": "destroy Buffer."}], "dmBuffer::GetBytes buffer, out_bytes, out_size": [{"prefix": "dmBuffer::GetBytes buffer, out_bytes, out_size", "body": "dmBuffer::GetBytes(${1:buffer}, ${2:out_bytes}, ${3:out_size})", "description": "get buffer as a byte array."}], "dmBuffer::GetCount buffer, count": [{"prefix": "dmBuffer::GetCount buffer, count", "body": "dmBuffer::GetCount(${1:buffer}, ${2:count})", "description": "get buffer count."}], "dmBuffer::GetResultString result": [{"prefix": "dmBuffer::GetResultString result", "body": "dmBuffer::GetResultString(${1:result})", "description": "result to string"}], "dmBuffer::GetSizeForValueType type": [{"prefix": "dmBuffer::GetSizeForValueType type", "body": "dmBuffer::GetSizeForValueType(${1:type})", "description": "get size of a value type"}], "dmBuffer::GetStream buffer, stream_name, stream, count, components, stride": [{"prefix": "dmBuffer::GetStream buffer, stream_name, stream, count, components, stride", "body": "dmBuffer::GetStream(${1:buffer}, ${2:stream_name}, ${3:stream}, ${4:count}, ${5:components}, ${6:stride})", "description": "get stream from buffer."}], "dmBuffer::GetStreamType buffer, stream_name, type, components": [{"prefix": "dmBuffer::GetStreamType buffer, stream_name, type, components", "body": "dmBuffer::GetStreamType(${1:buffer}, ${2:stream_name}, ${3:type}, ${4:components})", "description": "get stream type and type count"}], "dmBuffer::GetValueTypeString result": [{"prefix": "dmBuffer::GetValueTypeString result", "body": "dmBuffer::GetValueTypeString(${1:result})", "description": "value type to string"}], "dmBuffer::HBuffer": [{"prefix": "dmBuffer::HBuffer", "body": "dmBuffer::HBuffer", "description": "HBuffer type definition"}], "dmBuffer::IsBufferValid buffer": [{"prefix": "dmBuffer::IsBufferValid buffer", "body": "dmBuffer::IsBufferValid(${1:buffer})", "description": "check buffer handle"}], "dmBuffer::StreamDeclaration": [{"prefix": "dmBuffer::StreamDeclaration", "body": "dmBuffer::StreamDeclaration", "description": "StreamDeclaration struct"}], "dmBuffer::ValidateBuffer buffer": [{"prefix": "dmBuffer::ValidateBuffer buffer", "body": "dmBuffer::ValidateBuffer(${1:buffer})", "description": "validate buffer."}], "push.NOTIFICATION_ALERT": [{"prefix": "push.NOTIFICATION_ALERT", "body": "push.NOTIFICATION_ALERT", "description": "alert notification type"}], "push.NOTIFICATION_BADGE": [{"prefix": "push.NOTIFICATION_BADGE", "body": "push.NOTIFICATION_BADGE", "description": "badge notification type"}], "push.NOTIFICATION_SOUND": [{"prefix": "push.NOTIFICATION_SOUND", "body": "push.NOTIFICATION_SOUND", "description": "sound notification type"}], "push.ORIGIN_LOCAL": [{"prefix": "push.ORIGIN_LOCAL", "body": "push.ORIGIN_LOCAL", "description": "local push origin"}], "push.ORIGIN_REMOTE": [{"prefix": "push.ORIGIN_REMOTE", "body": "push.ORIGIN_REMOTE", "description": "remote push origin"}, {"prefix": "push.ORIGIN_REMOTE", "body": "push.ORIGIN_REMOTE", "description": "remote push origin"}], "push.PRIORITY_DEFAULT": [{"prefix": "push.PRIORITY_DEFAULT", "body": "push.PRIORITY_DEFAULT", "description": "default notification priority "}], "push.PRIORITY_HIGH": [{"prefix": "push.PRIORITY_HIGH", "body": "push.PRIORITY_HIGH", "description": "higher notification priority "}], "push.PRIORITY_LOW": [{"prefix": "push.PRIORITY_LOW", "body": "push.PRIORITY_LOW", "description": "lower notification priority "}], "push.PRIORITY_MAX": [{"prefix": "push.PRIORITY_MAX", "body": "push.PRIORITY_MAX", "description": "highest notification priority "}], "push.PRIORITY_MIN": [{"prefix": "push.PRIORITY_MIN", "body": "push.PRIORITY_MIN", "description": "lowest notification priority "}], "push.cancel id": [{"prefix": "push.cancel id", "body": "push.cancel(${1:id})", "description": "Cancel a scheduled local push notification"}], "push.get_all_scheduled": [{"prefix": "push.get_all_scheduled", "body": "push.get_all_scheduled()", "description": "Retrieve data on all scheduled local push notifications"}], "push.get_scheduled id": [{"prefix": "push.get_scheduled id", "body": "push.get_scheduled(${1:id})", "description": "Retrieve data on a scheduled local push notification"}], "push.register notifications, callback": [{"prefix": "push.register notifications, callback", "body": "push.register(${1:notifications}, ${2:callback})", "description": "Register for push notifications"}], "push.schedule time, title, alert, payload, notification_settings": [{"prefix": "push.schedule time, title, alert, payload, notification_settings", "body": "push.schedule(${1:time}, ${2:title}, ${3:alert}, ${4:payload}, ${5:notification_settings})", "description": "Schedule a local push notification to be triggered at a specific time in the future"}], "push.set_badge_count count": [{"prefix": "push.set_badge_count count", "body": "push.set_badge_count(${1:count})", "description": "set badge icon count "}], "push.set_listener listener": [{"prefix": "push.set_listener listener", "body": "push.set_listener(${1:listener})", "description": "set push listener"}], "gui.ADJUST_FIT": [{"prefix": "gui.ADJUST_FIT", "body": "gui.ADJUST_FIT", "description": "fit adjust mode"}], "gui.ADJUST_STRETCH": [{"prefix": "gui.ADJUST_STRETCH", "body": "gui.ADJUST_STRETCH", "description": "stretch adjust mode"}], "gui.ADJUST_ZOOM": [{"prefix": "gui.ADJUST_ZOOM", "body": "gui.ADJUST_ZOOM", "description": "zoom adjust mode"}], "gui.ANCHOR_BOTTOM": [{"prefix": "gui.ANCHOR_BOTTOM", "body": "gui.ANCHOR_BOTTOM", "description": "bottom y-anchor"}], "gui.ANCHOR_LEFT": [{"prefix": "gui.ANCHOR_LEFT", "body": "gui.ANCHOR_LEFT", "description": "left x-anchor"}], "gui.ANCHOR_RIGHT": [{"prefix": "gui.ANCHOR_RIGHT", "body": "gui.ANCHOR_RIGHT", "description": "right x-anchor"}], "gui.ANCHOR_TOP": [{"prefix": "gui.ANCHOR_TOP", "body": "gui.ANCHOR_TOP", "description": "top y-anchor"}], "gui.BLEND_ADD": [{"prefix": "gui.BLEND_ADD", "body": "gui.BLEND_ADD", "description": "additive blending"}], "gui.BLEND_ADD_ALPHA": [{"prefix": "gui.BLEND_ADD_ALPHA", "body": "gui.BLEND_ADD_ALPHA", "description": "additive alpha blending"}], "gui.BLEND_ALPHA": [{"prefix": "gui.BLEND_ALPHA", "body": "gui.BLEND_ALPHA", "description": "alpha blending"}], "gui.BLEND_MULT": [{"prefix": "gui.BLEND_MULT", "body": "gui.BLEND_MULT", "description": "multiply blending"}], "gui.CLIPPING_MODE_NONE": [{"prefix": "gui.CLIPPING_MODE_NONE", "body": "gui.CLIPPING_MODE_NONE", "description": "clipping mode none"}], "gui.CLIPPING_MODE_STENCIL": [{"prefix": "gui.CLIPPING_MODE_STENCIL", "body": "gui.CLIPPING_MODE_STENCIL", "description": "clipping mode stencil"}], "gui.EASING_INBACK": [{"prefix": "gui.EASING_INBACK", "body": "gui.EASING_INBACK", "description": "in-back"}], "gui.EASING_INBOUNCE": [{"prefix": "gui.EASING_INBOUNCE", "body": "gui.EASING_INBOUNCE", "description": "in-bounce"}], "gui.EASING_INCIRC": [{"prefix": "gui.EASING_INCIRC", "body": "gui.EASING_INCIRC", "description": "in-circlic"}], "gui.EASING_INCUBIC": [{"prefix": "gui.EASING_INCUBIC", "body": "gui.EASING_INCUBIC", "description": "in-cubic"}], "gui.EASING_INELASTIC": [{"prefix": "gui.EASING_INELASTIC", "body": "gui.EASING_INELASTIC", "description": "in-elastic"}], "gui.EASING_INEXPO": [{"prefix": "gui.EASING_INEXPO", "body": "gui.EASING_INEXPO", "description": "in-exponential"}], "gui.EASING_INOUTBACK": [{"prefix": "gui.EASING_INOUTBACK", "body": "gui.EASING_INOUTBACK", "description": "in-out-back"}], "gui.EASING_INOUTBOUNCE": [{"prefix": "gui.EASING_INOUTBOUNCE", "body": "gui.EASING_INOUTBOUNCE", "description": "in-out-bounce"}], "gui.EASING_INOUTCIRC": [{"prefix": "gui.EASING_INOUTCIRC", "body": "gui.EASING_INOUTCIRC", "description": "in-out-circlic"}], "gui.EASING_INOUTCUBIC": [{"prefix": "gui.EASING_INOUTCUBIC", "body": "gui.EASING_INOUTCUBIC", "description": "in-out-cubic"}], "gui.EASING_INOUTELASTIC": [{"prefix": "gui.EASING_INOUTELASTIC", "body": "gui.EASING_INOUTELASTIC", "description": "in-out-elastic"}], "gui.EASING_INOUTEXPO": [{"prefix": "gui.EASING_INOUTEXPO", "body": "gui.EASING_INOUTEXPO", "description": "in-out-exponential"}], "gui.EASING_INOUTQUAD": [{"prefix": "gui.EASING_INOUTQUAD", "body": "gui.EASING_INOUTQUAD", "description": "in-out-quadratic"}], "gui.EASING_INOUTQUART": [{"prefix": "gui.EASING_INOUTQUART", "body": "gui.EASING_INOUTQUART", "description": "in-out-quartic"}], "gui.EASING_INOUTQUINT": [{"prefix": "gui.EASING_INOUTQUINT", "body": "gui.EASING_INOUTQUINT", "description": "in-out-quintic"}], "gui.EASING_INOUTSINE": [{"prefix": "gui.EASING_INOUTSINE", "body": "gui.EASING_INOUTSINE", "description": "in-out-sine"}], "gui.EASING_INQUAD": [{"prefix": "gui.EASING_INQUAD", "body": "gui.EASING_INQUAD", "description": "in-quadratic"}], "gui.EASING_INQUART": [{"prefix": "gui.EASING_INQUART", "body": "gui.EASING_INQUART", "description": "in-quartic"}], "gui.EASING_INQUINT": [{"prefix": "gui.EASING_INQUINT", "body": "gui.EASING_INQUINT", "description": "in-quintic"}], "gui.EASING_INSINE": [{"prefix": "gui.EASING_INSINE", "body": "gui.EASING_INSINE", "description": "in-sine"}], "gui.EASING_LINEAR": [{"prefix": "gui.EASING_LINEAR", "body": "gui.EASING_LINEAR", "description": "linear interpolation"}], "gui.EASING_OUTBACK": [{"prefix": "gui.EASING_OUTBACK", "body": "gui.EASING_OUTBACK", "description": "out-back"}], "gui.EASING_OUTBOUNCE": [{"prefix": "gui.EASING_OUTBOUNCE", "body": "gui.EASING_OUTBOUNCE", "description": "out-bounce"}], "gui.EASING_OUTCIRC": [{"prefix": "gui.EASING_OUTCIRC", "body": "gui.EASING_OUTCIRC", "description": "out-circlic"}], "gui.EASING_OUTCUBIC": [{"prefix": "gui.EASING_OUTCUBIC", "body": "gui.EASING_OUTCUBIC", "description": "out-cubic"}], "gui.EASING_OUTELASTIC": [{"prefix": "gui.EASING_OUTELASTIC", "body": "gui.EASING_OUTELASTIC", "description": "out-elastic"}], "gui.EASING_OUTEXPO": [{"prefix": "gui.EASING_OUTEXPO", "body": "gui.EASING_OUTEXPO", "description": "out-exponential"}], "gui.EASING_OUTINBACK": [{"prefix": "gui.EASING_OUTINBACK", "body": "gui.EASING_OUTINBACK", "description": "out-in-back"}], "gui.EASING_OUTINBOUNCE": [{"prefix": "gui.EASING_OUTINBOUNCE", "body": "gui.EASING_OUTINBOUNCE", "description": "out-in-bounce"}], "gui.EASING_OUTINCIRC": [{"prefix": "gui.EASING_OUTINCIRC", "body": "gui.EASING_OUTINCIRC", "description": "out-in-circlic"}], "gui.EASING_OUTINCUBIC": [{"prefix": "gui.EASING_OUTINCUBIC", "body": "gui.EASING_OUTINCUBIC", "description": "out-in-cubic"}], "gui.EASING_OUTINELASTIC": [{"prefix": "gui.EASING_OUTINELASTIC", "body": "gui.EASING_OUTINELASTIC", "description": "out-in-elastic"}], "gui.EASING_OUTINEXPO": [{"prefix": "gui.EASING_OUTINEXPO", "body": "gui.EASING_OUTINEXPO", "description": "out-in-exponential"}], "gui.EASING_OUTINQUAD": [{"prefix": "gui.EASING_OUTINQUAD", "body": "gui.EASING_OUTINQUAD", "description": "out-in-quadratic"}], "gui.EASING_OUTINQUART": [{"prefix": "gui.EASING_OUTINQUART", "body": "gui.EASING_OUTINQUART", "description": "out-in-quartic"}], "gui.EASING_OUTINQUINT": [{"prefix": "gui.EASING_OUTINQUINT", "body": "gui.EASING_OUTINQUINT", "description": "out-in-quintic"}], "gui.EASING_OUTINSINE": [{"prefix": "gui.EASING_OUTINSINE", "body": "gui.EASING_OUTINSINE", "description": "out-in-sine"}], "gui.EASING_OUTQUAD": [{"prefix": "gui.EASING_OUTQUAD", "body": "gui.EASING_OUTQUAD", "description": "out-quadratic"}], "gui.EASING_OUTQUART": [{"prefix": "gui.EASING_OUTQUART", "body": "gui.EASING_OUTQUART", "description": "out-quartic"}], "gui.EASING_OUTQUINT": [{"prefix": "gui.EASING_OUTQUINT", "body": "gui.EASING_OUTQUINT", "description": "out-quintic"}], "gui.EASING_OUTSINE": [{"prefix": "gui.EASING_OUTSINE", "body": "gui.EASING_OUTSINE", "description": "out-sine"}], "gui.KEYBOARD_TYPE_DEFAULT": [{"prefix": "gui.KEYBOARD_TYPE_DEFAULT", "body": "gui.KEYBOARD_TYPE_DEFAULT", "description": "default keyboard"}], "gui.KEYBOARD_TYPE_EMAIL": [{"prefix": "gui.KEYBOARD_TYPE_EMAIL", "body": "gui.KEYBOARD_TYPE_EMAIL", "description": "email keyboard"}], "gui.KEYBOARD_TYPE_NUMBER_PAD": [{"prefix": "gui.KEYBOARD_TYPE_NUMBER_PAD", "body": "gui.KEYBOARD_TYPE_NUMBER_PAD", "description": "number input keyboard"}], "gui.KEYBOARD_TYPE_PASSWORD": [{"prefix": "gui.KEYBOARD_TYPE_PASSWORD", "body": "gui.KEYBOARD_TYPE_PASSWORD", "description": "password keyboard"}], "gui.PIEBOUNDS_ELLIPSE": [{"prefix": "gui.PIEBOUNDS_ELLIPSE", "body": "gui.PIEBOUNDS_ELLIPSE", "description": "elliptical pie node bounds"}], "gui.PIEBOUNDS_RECTANGLE": [{"prefix": "gui.PIEBOUNDS_RECTANGLE", "body": "gui.PIEBOUNDS_RECTANGLE", "description": "rectangular pie node bounds"}], "gui.PIVOT_CENTER": [{"prefix": "gui.PIVOT_CENTER", "body": "gui.PIVOT_CENTER", "description": "center pivor"}], "gui.PIVOT_E": [{"prefix": "gui.PIVOT_E", "body": "gui.PIVOT_E", "description": "east pivot"}], "gui.PIVOT_N": [{"prefix": "gui.PIVOT_N", "body": "gui.PIVOT_N", "description": "north pivot"}], "gui.PIVOT_NE": [{"prefix": "gui.PIVOT_NE", "body": "gui.PIVOT_NE", "description": "north-east pivot"}], "gui.PIVOT_NW": [{"prefix": "gui.PIVOT_NW", "body": "gui.PIVOT_NW", "description": "north-west pivot"}], "gui.PIVOT_S": [{"prefix": "gui.PIVOT_S", "body": "gui.PIVOT_S", "description": "south pivot"}], "gui.PIVOT_SE": [{"prefix": "gui.PIVOT_SE", "body": "gui.PIVOT_SE", "description": "south-east pivot"}], "gui.PIVOT_SW": [{"prefix": "gui.PIVOT_SW", "body": "gui.PIVOT_SW", "description": "south-west pivot"}], "gui.PIVOT_W": [{"prefix": "gui.PIVOT_W", "body": "gui.PIVOT_W", "description": "west pivot"}], "gui.PLAYBACK_LOOP_BACKWARD": [{"prefix": "gui.PLAYBACK_LOOP_BACKWARD", "body": "gui.PLAYBACK_LOOP_BACKWARD", "description": "loop backward"}], "gui.PLAYBACK_LOOP_FORWARD": [{"prefix": "gui.PLAYBACK_LOOP_FORWARD", "body": "gui.PLAYBACK_LOOP_FORWARD", "description": "loop forward"}], "gui.PLAYBACK_LOOP_PINGPONG": [{"prefix": "gui.PLAYBACK_LOOP_PINGPONG", "body": "gui.PLAYBACK_LOOP_PINGPONG", "description": "ping pong loop"}], "gui.PLAYBACK_ONCE_BACKWARD": [{"prefix": "gui.PLAYBACK_ONCE_BACKWARD", "body": "gui.PLAYBACK_ONCE_BACKWARD", "description": "once backward"}], "gui.PLAYBACK_ONCE_FORWARD": [{"prefix": "gui.PLAYBACK_ONCE_FORWARD", "body": "gui.PLAYBACK_ONCE_FORWARD", "description": "once forward"}], "gui.PLAYBACK_ONCE_PINGPONG": [{"prefix": "gui.PLAYBACK_ONCE_PINGPONG", "body": "gui.PLAYBACK_ONCE_PINGPONG", "description": "once forward and then backward"}], "gui.PROP_COLOR": [{"prefix": "gui.PROP_COLOR", "body": "gui.PROP_COLOR", "description": "color property"}], "gui.PROP_FILL_ANGLE": [{"prefix": "gui.PROP_FILL_ANGLE", "body": "gui.PROP_FILL_ANGLE", "description": "fill_angle property"}], "gui.PROP_INNER_RADIUS": [{"prefix": "gui.PROP_INNER_RADIUS", "body": "gui.PROP_INNER_RADIUS", "description": "inner_radius property"}], "gui.PROP_OUTLINE": [{"prefix": "gui.PROP_OUTLINE", "body": "gui.PROP_OUTLINE", "description": "outline color property"}], "gui.PROP_POSITION": [{"prefix": "gui.PROP_POSITION", "body": "gui.PROP_POSITION", "description": "position property"}], "gui.PROP_ROTATION": [{"prefix": "gui.PROP_ROTATION", "body": "gui.PROP_ROTATION", "description": "rotation property"}], "gui.PROP_SCALE": [{"prefix": "gui.PROP_SCALE", "body": "gui.PROP_SCALE", "description": "scale property"}], "gui.PROP_SHADOW": [{"prefix": "gui.PROP_SHADOW", "body": "gui.PROP_SHADOW", "description": "shadow color property"}], "gui.PROP_SIZE": [{"prefix": "gui.PROP_SIZE", "body": "gui.PROP_SIZE", "description": "size property"}], "gui.PROP_SLICE9": [{"prefix": "gui.PROP_SLICE9", "body": "gui.PROP_SLICE9", "description": "slice9 property"}], "gui.SIZE_MODE_AUTO": [{"prefix": "gui.SIZE_MODE_AUTO", "body": "gui.SIZE_MODE_AUTO", "description": "automatic size mode"}], "gui.SIZE_MODE_MANUAL": [{"prefix": "gui.SIZE_MODE_MANUAL", "body": "gui.SIZE_MODE_MANUAL", "description": "manual size mode"}], "gui.animate node, property, to, easing, duration, [delay], [complete_function], [playback]": [{"prefix": "gui.animate node, property, to, easing, duration, [delay], [complete_function], [playback]", "body": "gui.animate(${1:node}, ${2:property}, ${3:to}, ${4:easing}, ${5:duration}, ${6:[delay]}, ${7:[complete_function]}, ${8:[playback]})", "description": "animates a node property"}], "gui.cancel_animation node, property": [{"prefix": "gui.cancel_animation node, property", "body": "gui.cancel_animation(${1:node}, ${2:property})", "description": "cancels an ongoing animation"}], "gui.cancel_flipbook node": [{"prefix": "gui.cancel_flipbook node", "body": "gui.cancel_flipbook(${1:node})", "description": "cancel a node flipbook animation"}], "gui.cancel_spine node": [{"prefix": "gui.cancel_spine node", "body": "gui.cancel_spine(${1:node})", "description": "cancel a spine animation"}], "gui.clone node": [{"prefix": "gui.clone node", "body": "gui.clone(${1:node})", "description": "clone a node"}], "gui.clone_tree node": [{"prefix": "gui.clone_tree node", "body": "gui.clone_tree(${1:node})", "description": "clone a node including its children"}], "gui.delete_node node": [{"prefix": "gui.delete_node node", "body": "gui.delete_node(${1:node})", "description": "deletes a node"}], "gui.delete_texture texture": [{"prefix": "gui.delete_texture texture", "body": "gui.delete_texture(${1:texture})", "description": "delete texture"}], "gui.get_adjust_mode node": [{"prefix": "gui.get_adjust_mode node", "body": "gui.get_adjust_mode(${1:node})", "description": "gets the node adjust mode"}], "gui.get_blend_mode node": [{"prefix": "gui.get_blend_mode node", "body": "gui.get_blend_mode(${1:node})", "description": "gets the node blend mode"}], "gui.get_clipping_inverted node": [{"prefix": "gui.get_clipping_inverted node", "body": "gui.get_clipping_inverted(${1:node})", "description": "gets node clipping inverted state"}], "gui.get_clipping_mode node": [{"prefix": "gui.get_clipping_mode node", "body": "gui.get_clipping_mode(${1:node})", "description": "gets the node clipping mode"}], "gui.get_clipping_visible node": [{"prefix": "gui.get_clipping_visible node", "body": "gui.get_clipping_visible(${1:node})", "description": "gets node clipping visibility state"}], "gui.get_color node": [{"prefix": "gui.get_color node", "body": "gui.get_color(${1:node})", "description": "gets the node color"}], "gui.get_fill_angle node": [{"prefix": "gui.get_fill_angle node", "body": "gui.get_fill_angle(${1:node})", "description": "gets the angle for the filled pie sector"}], "gui.get_flipbook node": [{"prefix": "gui.get_flipbook node", "body": "gui.get_flipbook(${1:node})", "description": "gets the node flipbook animation"}], "gui.get_font node": [{"prefix": "gui.get_font node", "body": "gui.get_font(${1:node})", "description": "gets the node font"}], "gui.get_height": [{"prefix": "gui.get_height", "body": "gui.get_height()", "description": "gets the scene height"}], "gui.get_id node": [{"prefix": "gui.get_id node", "body": "gui.get_id(${1:node})", "description": "gets the id of the specified node"}], "gui.get_index node": [{"prefix": "gui.get_index node", "body": "gui.get_index(${1:node})", "description": "gets the index of the specified node"}], "gui.get_inherit_alpha node": [{"prefix": "gui.get_inherit_alpha node", "body": "gui.get_inherit_alpha(${1:node})", "description": "gets the node inherit alpha state"}], "gui.get_inner_radius node": [{"prefix": "gui.get_inner_radius node", "body": "gui.get_inner_radius(${1:node})", "description": "gets the pie inner radius"}], "gui.get_layer node": [{"prefix": "gui.get_layer node", "body": "gui.get_layer(${1:node})", "description": "gets the node layer"}], "gui.get_layout": [{"prefix": "gui.get_layout", "body": "gui.get_layout()", "description": "gets the scene current layout"}], "gui.get_leading node": [{"prefix": "gui.get_leading node", "body": "gui.get_leading(${1:node})", "description": "gets the leading of the text node"}], "gui.get_line_break node": [{"prefix": "gui.get_line_break node", "body": "gui.get_line_break(${1:node})", "description": "get line-break mode"}], "gui.get_node id": [{"prefix": "gui.get_node id", "body": "gui.get_node(${1:id})", "description": "gets the node with the specified id"}], "gui.get_outer_bounds node": [{"prefix": "gui.get_outer_bounds node", "body": "gui.get_outer_bounds(${1:node})", "description": "gets the pie outer bounds mode"}], "gui.get_outline node": [{"prefix": "gui.get_outline node", "body": "gui.get_outline(${1:node})", "description": "gets the node outline color"}], "gui.get_parent node": [{"prefix": "gui.get_parent node", "body": "gui.get_parent(${1:node})", "description": "gets the parent of the specified node"}], "gui.get_particlefx node": [{"prefix": "gui.get_particlefx node", "body": "gui.get_particlefx(${1:node})", "description": "Gets a particle fx"}], "gui.get_perimeter_vertices node": [{"prefix": "gui.get_perimeter_vertices node", "body": "gui.get_perimeter_vertices(${1:node})", "description": "gets the number of generated vertices around the perimeter"}], "gui.get_pivot node": [{"prefix": "gui.get_pivot node", "body": "gui.get_pivot(${1:node})", "description": "gets the pivot of a node"}], "gui.get_position node": [{"prefix": "gui.get_position node", "body": "gui.get_position(${1:node})", "description": "gets the node position"}], "gui.get_rotation node": [{"prefix": "gui.get_rotation node", "body": "gui.get_rotation(${1:node})", "description": "gets the node rotation"}], "gui.get_scale node": [{"prefix": "gui.get_scale node", "body": "gui.get_scale(${1:node})", "description": "gets the node scale"}], "gui.get_screen_position node": [{"prefix": "gui.get_screen_position node", "body": "gui.get_screen_position(${1:node})", "description": "gets the node screen position"}], "gui.get_shadow node": [{"prefix": "gui.get_shadow node", "body": "gui.get_shadow(${1:node})", "description": "gets the node shadow color"}], "gui.get_size node": [{"prefix": "gui.get_size node", "body": "gui.get_size(${1:node})", "description": "gets the node size"}], "gui.get_size_mode node": [{"prefix": "gui.get_size_mode node", "body": "gui.get_size_mode(${1:node})", "description": "gets the node size mode"}], "gui.get_slice9 node": [{"prefix": "gui.get_slice9 node", "body": "gui.get_slice9(${1:node})", "description": "get the slice9 values for the node"}], "gui.get_spine_animation node": [{"prefix": "gui.get_spine_animation node", "body": "gui.get_spine_animation(${1:node})", "description": "gets the playing animation on a spine node"}], "gui.get_spine_bone node, bone_id": [{"prefix": "gui.get_spine_bone node, bone_id", "body": "gui.get_spine_bone(${1:node}, ${2:bone_id})", "description": "retrieve the GUI node corresponding to a spine skeleton bone"}], "gui.get_spine_cursor node": [{"prefix": "gui.get_spine_cursor node", "body": "gui.get_spine_cursor(${1:node})", "description": "gets the normalized cursor of the animation on a spine node"}], "gui.get_spine_playback_rate node": [{"prefix": "gui.get_spine_playback_rate node", "body": "gui.get_spine_playback_rate(${1:node})", "description": "gets the playback rate of the animation on a spine node"}], "gui.get_spine_scene node": [{"prefix": "gui.get_spine_scene node", "body": "gui.get_spine_scene(${1:node})", "description": "gets the spine scene of a node"}], "gui.get_spine_skin node": [{"prefix": "gui.get_spine_skin node", "body": "gui.get_spine_skin(${1:node})", "description": "gets the skin of a spine node"}], "gui.get_text node": [{"prefix": "gui.get_text node", "body": "gui.get_text(${1:node})", "description": "gets the node text"}], "gui.get_text_metrics font, text, width, line_break, leading, tracking": [{"prefix": "gui.get_text_metrics font, text, width, line_break, leading, tracking", "body": "gui.get_text_metrics(${1:font}, ${2:text}, ${3:width}, ${4:line_break}, ${5:leading}, ${6:tracking})", "description": "get text metrics"}], "gui.get_text_metrics_from_node node": [{"prefix": "gui.get_text_metrics_from_node node", "body": "gui.get_text_metrics_from_node(${1:node})", "description": "get text metrics from node"}], "gui.get_texture node": [{"prefix": "gui.get_texture node", "body": "gui.get_texture(${1:node})", "description": "gets node texture"}], "gui.get_tracking node": [{"prefix": "gui.get_tracking node", "body": "gui.get_tracking(${1:node})", "description": "gets the tracking of the text node"}], "gui.get_width": [{"prefix": "gui.get_width", "body": "gui.get_width()", "description": "gets the scene width"}], "gui.get_xanchor node": [{"prefix": "gui.get_xanchor node", "body": "gui.get_xanchor(${1:node})", "description": "gets the x-anchor of a node"}], "gui.get_yanchor node": [{"prefix": "gui.get_yanchor node", "body": "gui.get_yanchor(${1:node})", "description": "gets the y-anchor of a node"}], "gui.hide_keyboard": [{"prefix": "gui.hide_keyboard", "body": "gui.hide_keyboard()", "description": "hides on-display keyboard if available"}], "gui.is_enabled node": [{"prefix": "gui.is_enabled node", "body": "gui.is_enabled(${1:node})", "description": "returns if a node is enabled or not"}], "gui.move_above node, node": [{"prefix": "gui.move_above node, node", "body": "gui.move_above(${1:node}, ${2:node})", "description": "moves the first node above the second"}], "gui.move_below node, node": [{"prefix": "gui.move_below node, node", "body": "gui.move_below(${1:node}, ${2:node})", "description": "moves the first node below the second"}], "gui.new_box_node pos, size": [{"prefix": "gui.new_box_node pos, size", "body": "gui.new_box_node(${1:pos}, ${2:size})", "description": "creates a new box node"}], "gui.new_particlefx_node pos, particlefx": [{"prefix": "gui.new_particlefx_node pos, particlefx", "body": "gui.new_particlefx_node(${1:pos}, ${2:particlefx})", "description": "creates a new particle fx node"}], "gui.new_pie_node pos, size": [{"prefix": "gui.new_pie_node pos, size", "body": "gui.new_pie_node(${1:pos}, ${2:size})", "description": "creates a new pie node"}], "gui.new_spine_node pos, spine_scene": [{"prefix": "gui.new_spine_node pos, spine_scene", "body": "gui.new_spine_node(${1:pos}, ${2:spine_scene})", "description": "creates a new spine node"}], "gui.new_text_node pos, text": [{"prefix": "gui.new_text_node pos, text", "body": "gui.new_text_node(${1:pos}, ${2:text})", "description": "creates a new text node"}], "gui.new_texture texture, width, height, type, buffer, flip": [{"prefix": "gui.new_texture texture, width, height, type, buffer, flip", "body": "gui.new_texture(${1:texture}, ${2:width}, ${3:height}, ${4:type}, ${5:buffer}, ${6:flip})", "description": "create new texture"}], "gui.pick_node node, x, y": [{"prefix": "gui.pick_node node, x, y", "body": "gui.pick_node(${1:node}, ${2:x}, ${3:y})", "description": "determines if the node is pickable by the supplied coordinates"}], "gui.play_flipbook node, animation, [complete_function]": [{"prefix": "gui.play_flipbook node, animation, [complete_function]", "body": "gui.play_flipbook(${1:node}, ${2:animation}, ${3:[complete_function]})", "description": "play node flipbook animation"}], "gui.play_particlefx node, [emitter_state_function]": [{"prefix": "gui.play_particlefx node, [emitter_state_function]", "body": "gui.play_particlefx(${1:node}, ${2:[emitter_state_function]})", "description": "Plays a particle fx"}], "gui.play_spine_anim node, animation_id, playback, [play_properties], [complete_function]": [{"prefix": "gui.play_spine_anim node, animation_id, playback, [play_properties], [complete_function]", "body": "gui.play_spine_anim(${1:node}, ${2:animation_id}, ${3:playback}, ${4:[play_properties]}, ${5:[complete_function]})", "description": "play a spine animation"}], "gui.reset_keyboard": [{"prefix": "gui.reset_keyboard", "body": "gui.reset_keyboard()", "description": "resets on-display keyboard if available"}], "gui.reset_nodes": [{"prefix": "gui.reset_nodes", "body": "gui.reset_nodes()", "description": "resets all nodes to initial state"}], "gui.set_adjust_mode node, adjust_mode": [{"prefix": "gui.set_adjust_mode node, adjust_mode", "body": "gui.set_adjust_mode(${1:node}, ${2:adjust_mode})", "description": "sets node adjust mode"}], "gui.set_blend_mode node, blend_mode": [{"prefix": "gui.set_blend_mode node, blend_mode", "body": "gui.set_blend_mode(${1:node}, ${2:blend_mode})", "description": "sets node blend mode"}], "gui.set_clipping_inverted node, inverted": [{"prefix": "gui.set_clipping_inverted node, inverted", "body": "gui.set_clipping_inverted(${1:node}, ${2:inverted})", "description": "sets node clipping inversion"}], "gui.set_clipping_mode node, clipping_mode": [{"prefix": "gui.set_clipping_mode node, clipping_mode", "body": "gui.set_clipping_mode(${1:node}, ${2:clipping_mode})", "description": "sets node clipping mode state"}], "gui.set_clipping_visible node, visible": [{"prefix": "gui.set_clipping_visible node, visible", "body": "gui.set_clipping_visible(${1:node}, ${2:visible})", "description": "sets node clipping visibility"}], "gui.set_color node, color": [{"prefix": "gui.set_color node, color", "body": "gui.set_color(${1:node}, ${2:color})", "description": "sets the node color"}], "gui.set_enabled node, enabled": [{"prefix": "gui.set_enabled node, enabled", "body": "gui.set_enabled(${1:node}, ${2:enabled})", "description": "enables/disables a node"}], "gui.set_fill_angle node, angle": [{"prefix": "gui.set_fill_angle node, angle", "body": "gui.set_fill_angle(${1:node}, ${2:angle})", "description": "sets the angle for the filled pie sector"}], "gui.set_font node, font": [{"prefix": "gui.set_font node, font", "body": "gui.set_font(${1:node}, ${2:font})", "description": "sets the node font"}], "gui.set_id node, id": [{"prefix": "gui.set_id node, id", "body": "gui.set_id(${1:node}, ${2:id})", "description": "sets the id of the specified node"}], "gui.set_inherit_alpha node, inherit_alpha": [{"prefix": "gui.set_inherit_alpha node, inherit_alpha", "body": "gui.set_inherit_alpha(${1:node}, ${2:inherit_alpha})", "description": "sets the node inherit alpha state"}], "gui.set_inner_radius node, radius": [{"prefix": "gui.set_inner_radius node, radius", "body": "gui.set_inner_radius(${1:node}, ${2:radius})", "description": "sets the pie inner radius"}], "gui.set_layer node, layer": [{"prefix": "gui.set_layer node, layer", "body": "gui.set_layer(${1:node}, ${2:layer})", "description": "sets the node layer"}], "gui.set_leading node, leading": [{"prefix": "gui.set_leading node, leading", "body": "gui.set_leading(${1:node}, ${2:leading})", "description": "sets the leading of the text node"}], "gui.set_line_break node, line_break": [{"prefix": "gui.set_line_break node, line_break", "body": "gui.set_line_break(${1:node}, ${2:line_break})", "description": "set line-break mode"}], "gui.set_outer_bounds node, bounds_mode": [{"prefix": "gui.set_outer_bounds node, bounds_mode", "body": "gui.set_outer_bounds(${1:node}, ${2:bounds_mode})", "description": "sets the pie node outer bounds mode"}], "gui.set_outline node, color": [{"prefix": "gui.set_outline node, color", "body": "gui.set_outline(${1:node}, ${2:color})", "description": "sets the node outline color"}], "gui.set_parent node, parent, keep_scene_transform": [{"prefix": "gui.set_parent node, parent, keep_scene_transform", "body": "gui.set_parent(${1:node}, ${2:parent}, ${3:keep_scene_transform})", "description": "sets the parent of the node"}], "gui.set_particlefx node, particlefx": [{"prefix": "gui.set_particlefx node, particlefx", "body": "gui.set_particlefx(${1:node}, ${2:particlefx})", "description": "Sets a particle fx"}], "gui.set_perimeter_vertices node, vertices": [{"prefix": "gui.set_perimeter_vertices node, vertices", "body": "gui.set_perimeter_vertices(${1:node}, ${2:vertices})", "description": "sets the number of generated vertices around the perimeter"}], "gui.set_pivot node, pivot": [{"prefix": "gui.set_pivot node, pivot", "body": "gui.set_pivot(${1:node}, ${2:pivot})", "description": "sets the pivot of a node"}], "gui.set_position node, position": [{"prefix": "gui.set_position node, position", "body": "gui.set_position(${1:node}, ${2:position})", "description": "sets the node position"}], "gui.set_render_order order": [{"prefix": "gui.set_render_order order", "body": "gui.set_render_order(${1:order})", "description": "sets the render ordering for the current GUI scene"}], "gui.set_rotation node, rotation": [{"prefix": "gui.set_rotation node, rotation", "body": "gui.set_rotation(${1:node}, ${2:rotation})", "description": "sets the node rotation"}], "gui.set_scale node, scale": [{"prefix": "gui.set_scale node, scale", "body": "gui.set_scale(${1:node}, ${2:scale})", "description": "sets the node scale"}], "gui.set_shadow node, color": [{"prefix": "gui.set_shadow node, color", "body": "gui.set_shadow(${1:node}, ${2:color})", "description": "sets the node shadow color"}], "gui.set_size node, size": [{"prefix": "gui.set_size node, size", "body": "gui.set_size(${1:node}, ${2:size})", "description": "sets the node size"}], "gui.set_size_mode node, size_mode": [{"prefix": "gui.set_size_mode node, size_mode", "body": "gui.set_size_mode(${1:node}, ${2:size_mode})", "description": "sets node size mode"}], "gui.set_slice9 node, values": [{"prefix": "gui.set_slice9 node, values", "body": "gui.set_slice9(${1:node}, ${2:values})", "description": "set the slice9 configuration for the node"}], "gui.set_spine_cursor node, cursor": [{"prefix": "gui.set_spine_cursor node, cursor", "body": "gui.set_spine_cursor(${1:node}, ${2:cursor})", "description": "sets the normalized cursor of the animation on a spine node"}], "gui.set_spine_playback_rate node, playback_rate": [{"prefix": "gui.set_spine_playback_rate node, playback_rate", "body": "gui.set_spine_playback_rate(${1:node}, ${2:playback_rate})", "description": "sets the playback rate of the animation on a spine node"}], "gui.set_spine_scene node, spine_scene": [{"prefix": "gui.set_spine_scene node, spine_scene", "body": "gui.set_spine_scene(${1:node}, ${2:spine_scene})", "description": "sets the spine scene of a node"}], "gui.set_spine_skin node, spine_skin, [spine_slot]": [{"prefix": "gui.set_spine_skin node, spine_skin, [spine_slot]", "body": "gui.set_spine_skin(${1:node}, ${2:spine_skin}, ${3:[spine_slot]})", "description": "sets the spine skin"}], "gui.set_text node, text": [{"prefix": "gui.set_text node, text", "body": "gui.set_text(${1:node}, ${2:text})", "description": "sets the node text"}], "gui.set_texture node, texture": [{"prefix": "gui.set_texture node, texture", "body": "gui.set_texture(${1:node}, ${2:texture})", "description": "sets the node texture"}], "gui.set_texture_data texture, width, height, type, buffer, flip": [{"prefix": "gui.set_texture_data texture, width, height, type, buffer, flip", "body": "gui.set_texture_data(${1:texture}, ${2:width}, ${3:height}, ${4:type}, ${5:buffer}, ${6:flip})", "description": "set the buffer data for a texture"}], "gui.set_tracking node, tracking": [{"prefix": "gui.set_tracking node, tracking", "body": "gui.set_tracking(${1:node}, ${2:tracking})", "description": "sets the tracking of the text node"}], "gui.set_xanchor node, anchor": [{"prefix": "gui.set_xanchor node, anchor", "body": "gui.set_xanchor(${1:node}, ${2:anchor})", "description": "sets the x-anchor of a node"}], "gui.set_yanchor node, anchor": [{"prefix": "gui.set_yanchor node, anchor", "body": "gui.set_yanchor(${1:node}, ${2:anchor})", "description": "sets the y-anchor of a node"}], "gui.show_keyboard type, autoclose": [{"prefix": "gui.show_keyboard type, autoclose", "body": "gui.show_keyboard(${1:type}, ${2:autoclose})", "description": "shows the on-display keyboard if available  "}], "gui.stop_particlefx node": [{"prefix": "gui.stop_particlefx node", "body": "gui.stop_particlefx(${1:node})", "description": "Stops a particle fx"}], "layout_changed id, previous_id": [{"prefix": "layout_changed id, previous_id", "body": "msg.post(${1:receiver}, \"layout_changed\", ${2:{${3:id}, ${4:previous_id}\\}})", "description": "reports a layout change"}], "on_message self, message_id, message": [{"prefix": "on_message self, message_id, message", "body": "on_message(${1:self}, ${2:message_id}, ${3:message})", "description": "called when a message has been sent to the gui component"}], "json.decode json": [{"prefix": "json.decode json", "body": "json.decode(${1:json})", "description": "decode JSON from a string to a lua-table"}], "bit.arshift x, n": [{"prefix": "bit.arshift x, n", "body": "bit.arshift(${1:x}, ${2:n})", "description": "bitwise arithmetic right-shift"}], "bit.band x1, [x2...]": [{"prefix": "bit.band x1, [x2...]", "body": "bit.band(${1:x1}, ${2:[x2...]})", "description": "bitwise and"}], "bit.bnot x": [{"prefix": "bit.bnot x", "body": "bit.bnot(${1:x})", "description": "bitwise not"}], "bit.bor x1, [x2...]": [{"prefix": "bit.bor x1, [x2...]", "body": "bit.bor(${1:x1}, ${2:[x2...]})", "description": "bitwise or"}], "bit.bswap x": [{"prefix": "bit.bswap x", "body": "bit.bswap(${1:x})", "description": "bitwise swap"}], "bit.bxor x1, [x2...]": [{"prefix": "bit.bxor x1, [x2...]", "body": "bit.bxor(${1:x1}, ${2:[x2...]})", "description": "bitwise xor"}], "bit.lshift x, n": [{"prefix": "bit.lshift x, n", "body": "bit.lshift(${1:x}, ${2:n})", "description": "bitwise logical left-shift"}], "bit.rol x, n": [{"prefix": "bit.rol x, n", "body": "bit.rol(${1:x}, ${2:n})", "description": "bitwise left rotation"}], "bit.ror x, n": [{"prefix": "bit.ror x, n", "body": "bit.ror(${1:x}, ${2:n})", "description": "bitwise right rotation"}], "bit.rshift x, n": [{"prefix": "bit.rshift x, n", "body": "bit.rshift(${1:x}, ${2:n})", "description": "bitwise logical right-shift"}], "bit.tobit x": [{"prefix": "bit.tobit x", "body": "bit.tobit(${1:x})", "description": "normalize number to the numeric range for bit operations"}], "bit.tohex x, n": [{"prefix": "bit.tohex x, n", "body": "bit.tohex(${1:x}, ${2:n})", "description": "convert number to a hex string"}], "DM_ALIGN x, a": [{"prefix": "DM_ALIGN x, a", "body": "DM_ALIGN", "description": "value alignment macro"}], "DM_ALIGNED a": [{"prefix": "DM_ALIGNED a", "body": "DM_ALIGNED", "description": "data structure alignment macro"}], "timer.INVALID_TIMER_HANDLE": [{"prefix": "timer.INVALID_TIMER_HANDLE", "body": "timer.INVALID_TIMER_HANDLE", "description": "Indicates an invalid timer handle"}], "timer.cancel handle": [{"prefix": "timer.cancel handle", "body": "timer.cancel(${1:handle})", "description": "cancel a timer"}], "timer.delay delay, repeat, callback": [{"prefix": "timer.delay delay, repeat, callback", "body": "timer.delay(${1:delay}, ${2:repeat}, ${3:callback})", "description": "create a timer"}], "coroutine.create f": [{"prefix": "coroutine.create f", "body": "coroutine.create(${1:f})", "description": "creates a new coroutine thread"}], "coroutine.resume co, [val1], [...]": [{"prefix": "coroutine.resume co, [val1], [...]", "body": "coroutine.resume(${1:co}, ${2:[val1]}, ${3:[...]})", "description": "start or resume a thread"}], "coroutine.running": [{"prefix": "coroutine.running", "body": "coroutine.running()", "description": "returns the running coroutine"}], "coroutine.status co": [{"prefix": "coroutine.status co", "body": "coroutine.status(${1:co})", "description": "returns the status of a thread"}], "coroutine.wrap f": [{"prefix": "coroutine.wrap f", "body": "coroutine.wrap(${1:f})", "description": "creates a thread and returns a function to resume it"}], "coroutine.yield ...": [{"prefix": "coroutine.yield ...", "body": "coroutine.yield(${1:...})", "description": "yields execution of thread back to the caller"}]}