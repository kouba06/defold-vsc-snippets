{
  "info": {
    "description": "<p>Functions for manipulating buffers and streams</p>", 
    "namespace": "buffer", 
    "name": "Buffer", 
    "brief": "<p>Buffer API documentation</p>"
  }, 
  "elements": [
    {
      "replaces": "", 
      "description": "<p>Float, single precision, 4 bytes</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>float32</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "VARIABLE", 
      "name": "buffer.VALUE_TYPE_FLOAT32"
    }, 
    {
      "replaces": "", 
      "description": "<p>Signed integer, 2 bytes</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>int16</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "VARIABLE", 
      "name": "buffer.VALUE_TYPE_INT16"
    }, 
    {
      "replaces": "", 
      "description": "<p>Signed integer, 4 bytes</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>int32</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "VARIABLE", 
      "name": "buffer.VALUE_TYPE_INT32"
    }, 
    {
      "replaces": "", 
      "description": "<p>Signed integer, 8 bytes</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>int64</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "VARIABLE", 
      "name": "buffer.VALUE_TYPE_INT64"
    }, 
    {
      "replaces": "", 
      "description": "<p>Signed integer, 1 byte</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>int8</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "VARIABLE", 
      "name": "buffer.VALUE_TYPE_INT8"
    }, 
    {
      "replaces": "", 
      "description": "<p>Unsigned integer, 2 bytes</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>uint16</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "VARIABLE", 
      "name": "buffer.VALUE_TYPE_UINT16"
    }, 
    {
      "replaces": "", 
      "description": "<p>Unsigned integer, 4 bytes</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>uint32</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "VARIABLE", 
      "name": "buffer.VALUE_TYPE_UINT32"
    }, 
    {
      "replaces": "", 
      "description": "<p>Unsigned integer, 8 bytes</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>uint64</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "VARIABLE", 
      "name": "buffer.VALUE_TYPE_UINT64"
    }, 
    {
      "replaces": "", 
      "description": "<p>Unsigned integer, 1 byte</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>uint8</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "VARIABLE", 
      "name": "buffer.VALUE_TYPE_UINT8"
    }, 
    {
      "replaces": "", 
      "description": "<p>Copy all data streams from one buffer to another, element wise.</p>\n<p><span class=\"icon-attention\"></span> Each of the source streams must have a matching stream in the\ndestination buffer. The streams must match in both type and size.\nThe source and destination buffer can be the same.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">buffer</span> the destination buffer</p>", 
          "name": "dst"
        }, 
        {
          "doc": "<p><span class=\"type\">number</span> the offset to start copying data to</p>", 
          "name": "dstoffset"
        }, 
        {
          "doc": "<p><span class=\"type\">buffer</span> the source data buffer</p>", 
          "name": "src"
        }, 
        {
          "doc": "<p><span class=\"type\">number</span> the offset to start copying data from</p>", 
          "name": "srcoffset"
        }, 
        {
          "doc": "<p><span class=\"type\">number</span> the number of elements to copy</p>", 
          "name": "count"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>copies one buffer to another</p>", 
      "examples": "<p>How to copy elements (e.g. vertices) from one buffer to another</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- copy entire buffer</span>\n<span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">copy_buffer</span><span class=\"p\">(</span><span class=\"n\">dstbuffer</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">srcbuffer</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">#</span><span class=\"n\">srcbuffer</span><span class=\"p\">)</span>\n\n<span class=\"c1\">-- copy last 10 elements to the front of another buffer</span>\n<span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">copy_buffer</span><span class=\"p\">(</span><span class=\"n\">dstbuffer</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">srcbuffer</span><span class=\"p\">,</span> <span class=\"o\">#</span><span class=\"n\">srcbuffer</span> <span class=\"o\">-</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "buffer.copy_buffer"
    }, 
    {
      "replaces": "", 
      "description": "<p>Copy a specified amount of data from one stream to another.</p>\n<p><span class=\"icon-attention\"></span> The value type and size must match between source and destination streams.\nThe source and destination streams can be the same.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">bufferstream</span> the destination stream</p>", 
          "name": "dst"
        }, 
        {
          "doc": "<p><span class=\"type\">number</span> the offset to start copying data to (measured in value type)</p>", 
          "name": "dstoffset"
        }, 
        {
          "doc": "<p><span class=\"type\">bufferstream</span> the source data stream</p>", 
          "name": "src"
        }, 
        {
          "doc": "<p><span class=\"type\">number</span> the offset to start copying data from (measured in value type)</p>", 
          "name": "srcoffset"
        }, 
        {
          "doc": "<p><span class=\"type\">number</span> the number of values to copy (measured in value type)</p>", 
          "name": "count"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>copies data from one stream to another</p>", 
      "examples": "<p>How to update a texture of a sprite:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- copy entire stream</span>\n<span class=\"kd\">local</span> <span class=\"n\">srcstream</span> <span class=\"o\">=</span> <span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">get_stream</span><span class=\"p\">(</span><span class=\"n\">srcbuffer</span><span class=\"p\">,</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">xyz&quot;</span><span class=\"p\">))</span>\n<span class=\"kd\">local</span> <span class=\"n\">dststream</span> <span class=\"o\">=</span> <span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">get_stream</span><span class=\"p\">(</span><span class=\"n\">dstbuffer</span><span class=\"p\">,</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">xyz&quot;</span><span class=\"p\">))</span>\n<span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">copy_stream</span><span class=\"p\">(</span><span class=\"n\">dststream</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">srcstream</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">#</span><span class=\"n\">srcstream</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "buffer.copy_stream"
    }, 
    {
      "replaces": "", 
      "description": "<p>Create a new data buffer containing a specified set of streams. A data buffer\ncan contain one or more streams with typed data. This is useful for managing\ncompound data, for instance a vertex buffer could contain separate streams for\nvertex position, color, normal etc.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">number</span> The number of elements the buffer should hold</p>", 
          "name": "element_count"
        }, 
        {
          "doc": "<p><span class=\"type\">table</span> A table where each entry (table) describes a stream</p>\n<ul>\n<li><span class=\"type\">hash | string</span> <code>name</code>: The name of the stream</li>\n<li><span class=\"type\">constant</span> <code>type</code>: The data type of the stream</li>\n<li><span class=\"type\">number</span> <code>count</code>: The number of values each element should hold</li>\n</ul>", 
          "name": "declaration"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>creates a new buffer</p>", 
      "examples": "<p>How to create and initialize a buffer</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n  <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">create</span><span class=\"p\">(</span> <span class=\"n\">size</span> <span class=\"o\">*</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"p\">{</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">rgb&quot;</span><span class=\"p\">),</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">VALUE_TYPE_UINT8</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">3</span> <span class=\"p\">}</span> <span class=\"p\">})</span>\n  <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">imagestream</span> <span class=\"o\">=</span> <span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">get_stream</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">rgb&quot;</span><span class=\"p\">))</span>\n\n  <span class=\"k\">for</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">height</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">do</span>\n     <span class=\"k\">for</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">width</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">do</span>\n         <span class=\"kd\">local</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">width</span> <span class=\"o\">*</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n         <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">imagestream</span><span class=\"p\">[</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">r</span>\n         <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">imagestream</span><span class=\"p\">[</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">g</span>\n         <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">imagestream</span><span class=\"p\">[</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">b</span>\n     <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "buffer.create"
    }, 
    {
      "replaces": "", 
      "description": "<p>Get a copy of all the bytes from a specified stream as a Lua string.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">buffer</span> the source buffer</p>", 
          "name": "buffer"
        }, 
        {
          "doc": "<p><span class=\"type\">hash</span> the name of the stream</p>", 
          "name": "stream_name"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p><span class=\"type\">string</span> the buffer data as a Lua string</p>", 
          "name": "data"
        }
      ], 
      "brief": "<p>gets data from a stream</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "buffer.get_bytes"
    }, 
    {
      "replaces": "", 
      "description": "<p>Get a specified stream from a buffer.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">buffer</span> the buffer to get the stream from</p>", 
          "name": "buffer"
        }, 
        {
          "doc": "<p><span class=\"type\">hash | string</span> the stream name</p>", 
          "name": "stream_name"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p><span class=\"type\">bufferstream</span> the data stream</p>", 
          "name": "stream"
        }
      ], 
      "brief": "<p>gets a stream from a buffer</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "buffer.get_stream"
    }
  ]
}