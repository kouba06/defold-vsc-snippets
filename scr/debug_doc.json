{
  "info": {
    "description": "<p>Documentation for the Lua debug standard library.</p>\n<p>From <a href=\"https://www.lua.org/manual/5.1/\">Lua 5.1 Reference Manual</a>\nby Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes.</p>\n<p>Copyright &copy; 2006-2012 Lua.org, PUC-Rio.</p>\n<p>Freely available under the terms of the <a href=\"https://www.lua.org/license.html\">Lua license</a>.</p>", 
    "namespace": "debug", 
    "name": "Debug", 
    "brief": "<p>Lua debug standard library</p>"
  }, 
  "elements": [
    {
      "replaces": "", 
      "description": "<p>Enters an interactive mode with the user,\nrunning each string that the user enters.\nUsing simple commands and other debug facilities,\nthe user can inspect global and local variables,\nchange their values, evaluate expressions, and so on.\nA line containing only the word cont finishes this function,\nso that the caller continues its execution.</p>\n<p>Note that commands for debug.debug are not lexically nested\nwithin any function, and so have no direct access to local variables.</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>enters interactive debugging</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "debug.debug"
    }, 
    {
      "replaces": "", 
      "description": "<p>Returns the environment of object o.</p>", 
      "parameters": [
        {
          "doc": "", 
          "name": "o"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>returns the environment of an object</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "debug.getfenv"
    }, 
    {
      "replaces": "", 
      "description": "<p>Returns the current hook settings of the thread, as three values:\nthe current hook function, the current hook mask,\nand the current hook count\n(as set by the debug.sethook function).</p>", 
      "parameters": [
        {
          "doc": "", 
          "name": "[thread]"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>returns the current hook settings</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "debug.gethook"
    }, 
    {
      "replaces": "", 
      "description": "<p>Returns a table with information about a function.\nYou can give the function directly,\nor you can give a number as the value of function,\nwhich means the function running at level function of the call stack\nof the given thread:\nlevel 0 is the current function (getinfo itself);\nlevel 1 is the function that called getinfo;\nand so on.\nIf function is a number larger than the number of active functions,\nthen getinfo returns <span class=\"type\"> nil</span>.</p>\n<p>The returned table can contain all the fields returned by lua_getinfo,\nwith the string what describing which fields to fill in.\nThe default for what is to get all information available,\nexcept the table of valid lines.\nIf present,\nthe option 'f'\nadds a field named func with the function itself.\nIf present,\nthe option 'L'\nadds a field named activelines with the table of\nvalid lines.</p>\n<p>For instance, the expression <code>debug.getinfo(1,\"n\").name</code> returns\na table with a name for the current function,\nif a reasonable name can be found,\nand the expression <code>debug.getinfo(print)</code>\nreturns a table with all available information\nabout the print function.</p>", 
      "parameters": [
        {
          "doc": "", 
          "name": "[thread]"
        }, 
        {
          "doc": "", 
          "name": "function"
        }, 
        {
          "doc": "", 
          "name": "[what]"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>returns a table with information about a function</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "debug.getinfo"
    }, 
    {
      "replaces": "", 
      "description": "<p>This function returns the name and the value of the local variable\nwith index local of the function at level level of the stack.\n(The first parameter or local variable has index 1, and so on,\nuntil the last active local variable.)\nThe function returns <span class=\"type\"> nil</span> if there is no local\nvariable with the given index,\nand raises an error when called with a level out of range.\n(You can call debug.getinfo to check whether the level is valid.)</p>\n<p>Variable names starting with '(' (open parentheses)\nrepresent internal variables\n(loop control variables, temporaries, and C function locals).</p>", 
      "parameters": [
        {
          "doc": "", 
          "name": "[thread]"
        }, 
        {
          "doc": "", 
          "name": "level"
        }, 
        {
          "doc": "", 
          "name": "local"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>returns name and value of a local variable</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "debug.getlocal"
    }, 
    {
      "replaces": "", 
      "description": "<p>Returns the metatable of the given object\nor <span class=\"type\"> nil</span> if it does not have a metatable.</p>", 
      "parameters": [
        {
          "doc": "", 
          "name": "object"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>returns the metatable of the given object</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "debug.getmetatable"
    }, 
    {
      "replaces": "", 
      "description": "<p>Returns the registry table .</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>returns the registry table</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "debug.getregistry"
    }, 
    {
      "replaces": "", 
      "description": "<p>This function returns the name and the value of the upvalue\nwith index up of the function func.\nThe function returns <span class=\"type\"> nil</span> if there is no upvalue with the given index.</p>", 
      "parameters": [
        {
          "doc": "", 
          "name": "func"
        }, 
        {
          "doc": "", 
          "name": "up"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>returns the name and value of an upvalue</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "debug.getupvalue"
    }, 
    {
      "replaces": "", 
      "description": "<p>Sets the environment of the given object to the given table.\nReturns object.</p>", 
      "parameters": [
        {
          "doc": "", 
          "name": "object"
        }, 
        {
          "doc": "", 
          "name": "table"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>sets the environment of an object</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "debug.setfenv"
    }, 
    {
      "replaces": "", 
      "description": "<p>Sets the given function as a hook.\nThe string mask and the number count describe\nwhen the hook will be called.\nThe string mask may have the following characters,\nwith the given meaning:</p>\n<dl>\n<dt><code>\"c\"</code></dt>\n<dd>the hook is called every time Lua calls a function;</dd>\n<dt><code>\"r\"</code></dt>\n<dd>the hook is called every time Lua returns from a function;</dd>\n<dt><code>\"l\"</code></dt>\n<dd>the hook is called every time Lua enters a new line of code.</dd>\n</dl>\n<p>With a count different from zero,\nthe hook is called after every count instructions.</p>\n<p>When called without arguments,\ndebug.sethook turns off the hook.</p>\n<p>When the hook is called, its first parameter is a string\ndescribing the event that has triggered its call:\n<code>\"call\"</code>, <code>\"return\"</code> (or <code>\"tail return\"</code>,\nwhen simulating a return from a tail call),\n<code>\"line\"</code>, and <code>\"count\"</code>.\nFor line events,\nthe hook also gets the new line number as its second parameter.\nInside a hook,\nyou can call getinfo with level 2 to get more information about\nthe running function\n(level 0 is the getinfo function,\nand level 1 is the hook function),\nunless the event is <code>\"tail return\"</code>.\nIn this case, Lua is only simulating the return,\nand a call to getinfo will return invalid data.</p>", 
      "parameters": [
        {
          "doc": "", 
          "name": "[thread]"
        }, 
        {
          "doc": "", 
          "name": "hook"
        }, 
        {
          "doc": "", 
          "name": "mask"
        }, 
        {
          "doc": "", 
          "name": "[count]"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>sets a debug hook function</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "debug.sethook"
    }, 
    {
      "replaces": "", 
      "description": "<p>This function assigns the value value to the local variable\nwith index local of the function at level level of the stack.\nThe function returns <span class=\"type\"> nil</span> if there is no local\nvariable with the given index,\nand raises an error when called with a level out of range.\n(You can call getinfo to check whether the level is valid.)\nOtherwise, it returns the name of the local variable.</p>", 
      "parameters": [
        {
          "doc": "", 
          "name": "[thread]"
        }, 
        {
          "doc": "", 
          "name": "level"
        }, 
        {
          "doc": "", 
          "name": "local"
        }, 
        {
          "doc": "", 
          "name": "value"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>sets the value of the local variable</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "debug.setlocal"
    }, 
    {
      "replaces": "", 
      "description": "<p>Sets the metatable for the given object to the given table\n(which can be <span class=\"type\"> nil</span>).</p>", 
      "parameters": [
        {
          "doc": "", 
          "name": "object"
        }, 
        {
          "doc": "", 
          "name": "table"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>sets the metatable for an object</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "debug.setmetatable"
    }, 
    {
      "replaces": "", 
      "description": "<p>This function assigns the value value to the upvalue\nwith index up of the function func.\nThe function returns <span class=\"type\"> nil</span> if there is no upvalue\nwith the given index.\nOtherwise, it returns the name of the upvalue.</p>", 
      "parameters": [
        {
          "doc": "", 
          "name": "func"
        }, 
        {
          "doc": "", 
          "name": "up"
        }, 
        {
          "doc": "", 
          "name": "value"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>sets an upvalue for a function</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "debug.setupvalue"
    }, 
    {
      "replaces": "", 
      "description": "<p>Returns a string with a traceback of the call stack.\nAn optional message string is appended\nat the beginning of the traceback.\nAn optional level number tells at which level\nto start the traceback\n(default is 1, the function calling traceback).</p>", 
      "parameters": [
        {
          "doc": "", 
          "name": "[thread]"
        }, 
        {
          "doc": "", 
          "name": "[message]"
        }, 
        {
          "doc": "", 
          "name": "[level]"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>returns a string with a traceback of the stack call</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "debug.traceback"
    }
  ]
}