{
  "info": {
    "description": "<p><span class=\"file\">&lt;dmsdk/dlib/buffer.h&gt;</span></p>\n<p>Buffer API for data buffers as the main way to communicate between systems.</p>", 
    "namespace": "dmBuffer", 
    "name": "Buffer", 
    "brief": "<p>SDK Buffer API documentation</p>"
  }, 
  "elements": [
    {
      "replaces": "", 
      "description": "<p>Result enumeration.</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>result enumeration</p>", 
      "examples": "", 
      "members": [
        {
          "doc": "", 
          "name": "dmBuffer::RESULT_OK"
        }, 
        {
          "doc": "", 
          "name": "dmBuffer::RESULT_GUARD_INVALID"
        }, 
        {
          "doc": "", 
          "name": "dmBuffer::RESULT_ALLOCATION_ERROR"
        }, 
        {
          "doc": "", 
          "name": "dmBuffer::RESULT_BUFFER_INVALID"
        }, 
        {
          "doc": "", 
          "name": "dmBuffer::RESULT_BUFFER_SIZE_ERROR"
        }, 
        {
          "doc": "", 
          "name": "dmBuffer::RESULT_STREAM_SIZE_ERROR"
        }, 
        {
          "doc": "", 
          "name": "dmBuffer::RESULT_STREAM_MISSING"
        }, 
        {
          "doc": "", 
          "name": "dmBuffer::RESULT_STREAM_TYPE_MISMATCH"
        }, 
        {
          "doc": "", 
          "name": "dmBuffer::RESULT_STREAM_COUNT_MISMATCH"
        }
      ], 
      "error": "", 
      "type": "ENUM", 
      "name": "Result"
    }, 
    {
      "replaces": "", 
      "description": "<p>ValueType enumeration.</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>valueType enumeration</p>", 
      "examples": "", 
      "members": [
        {
          "doc": "", 
          "name": "dmBuffer::VALUE_TYPE_UINT8"
        }, 
        {
          "doc": "", 
          "name": "dmBuffer::VALUE_TYPE_UINT16"
        }, 
        {
          "doc": "", 
          "name": "dmBuffer::VALUE_TYPE_UINT32"
        }, 
        {
          "doc": "", 
          "name": "dmBuffer::VALUE_TYPE_UINT64"
        }, 
        {
          "doc": "", 
          "name": "dmBuffer::VALUE_TYPE_INT8"
        }, 
        {
          "doc": "", 
          "name": "dmBuffer::VALUE_TYPE_INT16"
        }, 
        {
          "doc": "", 
          "name": "dmBuffer::VALUE_TYPE_INT32"
        }, 
        {
          "doc": "", 
          "name": "dmBuffer::VALUE_TYPE_INT64"
        }, 
        {
          "doc": "", 
          "name": "dmBuffer::VALUE_TYPE_FLOAT32"
        }, 
        {
          "doc": "", 
          "name": "dmBuffer::MAX_VALUE_TYPE_COUNT"
        }
      ], 
      "error": "", 
      "type": "ENUM", 
      "name": "ValueType"
    }, 
    {
      "replaces": "", 
      "description": "<p>Creates a new HBuffer with a number of different streams.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">uint32_t</span> The number of \"structs\" the buffer should hold (e.g. vertex count)</p>", 
          "name": "count"
        }, 
        {
          "doc": "<p><span class=\"type\">const dmBuffer::StreamDeclaration*</span> Array of stream declarations</p>", 
          "name": "streams_decl"
        }, 
        {
          "doc": "<p><span class=\"type\">uint8_t</span> Number of stream declarations inside the decl array (max 256)</p>", 
          "name": "streams_decl_count"
        }, 
        {
          "doc": "<p><span class=\"type\">dmBuffer::HBuffer*</span> Pointer to HBuffer where to store the newly allocated buffer</p>", 
          "name": "out_buffer"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p><span class=\"type\">dmBuffer::Result</span> BUFFER_OK if buffer was allocated successfully</p>", 
          "name": "result"
        }
      ], 
      "brief": "<p>create Buffer</p>", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">const</span> <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">StreamDeclaration</span> <span class=\"n\">streams_decl</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">{</span><span class=\"n\">dmHashString64</span><span class=\"p\">(</span><span class=\"s\">&quot;position&quot;</span><span class=\"p\">),</span> <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">VALUE_TYPE_FLOAT32</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"n\">dmHashString64</span><span class=\"p\">(</span><span class=\"s\">&quot;texcoord0&quot;</span><span class=\"p\">),</span> <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">VALUE_TYPE_UINT16</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"n\">dmHashString64</span><span class=\"p\">(</span><span class=\"s\">&quot;color&quot;</span><span class=\"p\">),</span> <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">VALUE_TYPE_UINT8</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">},</span>\n<span class=\"p\">};</span>\n<span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">HBuffer</span> <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"mh\">0x0</span><span class=\"p\">;</span>\n<span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">Result</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">Create</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"n\">streams_decl</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">RESULT_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// success</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// handle error</span>\n<span class=\"p\">}</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "dmBuffer::Create"
    }, 
    {
      "replaces": "", 
      "description": "<p>Destroys a HBuffer and it's streams.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">dmBuffer::HBuffer</span> Buffer handle to the buffer to free</p>", 
          "name": "buffer"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>destroy Buffer.</p>", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">const</span> <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">StreamDeclaration</span> <span class=\"n\">streams_decl</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">{</span><span class=\"n\">dmHashString64</span><span class=\"p\">(</span><span class=\"s\">&quot;position&quot;</span><span class=\"p\">),</span> <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">VALUE_TYPE_FLOAT32</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span>\n<span class=\"p\">};</span>\n<span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">HBuffer</span> <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"mh\">0x0</span><span class=\"p\">;</span>\n<span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">Result</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">Create</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">streams_decl</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">RESULT_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">Destroy</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// handle error</span>\n<span class=\"p\">}</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "dmBuffer::Destroy"
    }, 
    {
      "replaces": "", 
      "description": "<p>Gets the buffer as a byte array. If the buffer is interleaved (default), a pointer to the whole memory is returned.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">dmBuffer::HBuffer</span> buffer handle.</p>", 
          "name": "buffer"
        }, 
        {
          "doc": "<p><span class=\"type\">void**</span> Pointer to void* where to store the bytes</p>", 
          "name": "out_bytes"
        }, 
        {
          "doc": "<p><span class=\"type\">uint32_t*</span> Pointer to uint32_t where to store the array size</p>", 
          "name": "out_size"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p><span class=\"type\">dmBuffer::Result</span> BUFFER_OK if the buffer was successfully accessed</p>", 
          "name": "result"
        }
      ], 
      "brief": "<p>get buffer as a byte array.</p>", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"kt\">uint8_t</span><span class=\"o\">*</span> <span class=\"n\">bytes</span> <span class=\"o\">=</span> <span class=\"mh\">0x0</span><span class=\"p\">;</span>\n<span class=\"kt\">uint32_t</span> <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">Result</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">GetBytes</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">**</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">bytes</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">size</span><span class=\"p\">);</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">RESULT_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">size</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">stream</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">uint8_t</span><span class=\"p\">)(</span><span class=\"n\">i</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xFF</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// handle error</span>\n<span class=\"p\">}</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "dmBuffer::GetBytes"
    }, 
    {
      "replaces": "", 
      "description": "<p>Get (struct) count for a buffer.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">dmBuffer::HBuffer</span> buffer handle.</p>", 
          "name": "buffer"
        }, 
        {
          "doc": "<p><span class=\"type\">uint32_t*</span> Pointer to uint32_t where to store the element count</p>", 
          "name": "count"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p><span class=\"type\">dmBuffer::Result</span> BUFFER_OK if the element count was successfully accessed</p>", 
          "name": "result"
        }
      ], 
      "brief": "<p>get buffer count.</p>", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"kt\">uint32_t</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">Result</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">GetCount</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">count</span><span class=\"p\">);</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">RESULT_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;buffer %p has %d number of elements&quot;</span><span class=\"p\">,</span> <span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">);</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// handle error</span>\n<span class=\"p\">}</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "dmBuffer::GetCount"
    }, 
    {
      "replaces": "", 
      "description": "<p>Converts result to string</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">dmBuffer::Result</span> The result</p>", 
          "name": "result"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p><span class=\"type\">const char*</span> The result as a string</p>", 
          "name": "result"
        }
      ], 
      "brief": "<p>result to string</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "dmBuffer::GetResultString"
    }, 
    {
      "replaces": "", 
      "description": "<p>Gets the size of a value type</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">dmBuffer::ValueType</span> The value type</p>", 
          "name": "type"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p><span class=\"type\">uint32_t</span> The size in bytes</p>", 
          "name": "size"
        }
      ], 
      "brief": "<p>get size of a value type</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "dmBuffer::GetSizeForValueType"
    }, 
    {
      "replaces": "", 
      "description": "<p>Get a stream from a buffer. Output stream is 16 byte aligned.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">dmBuffer::HBuffer</span> buffer handle.</p>", 
          "name": "buffer"
        }, 
        {
          "doc": "<p><span class=\"type\">dmhash_t</span> Hash of stream name to get</p>", 
          "name": "stream_name"
        }, 
        {
          "doc": "<p><span class=\"type\">void**</span> Where to store the stream</p>", 
          "name": "stream"
        }, 
        {
          "doc": "<p><span class=\"type\">uint32_t*</span> Where to store the count (e.g. vertex count). May be null.</p>", 
          "name": "count"
        }, 
        {
          "doc": "<p><span class=\"type\">uint32_t*</span> Where to store the number of components (e.g. 3 for a Vector3). May be null.</p>", 
          "name": "components"
        }, 
        {
          "doc": "<p><span class=\"type\">uint32_t*</span> Where to store the stride. The stride can be added to the value pointer. May be null.\nE.g. for a float array, the stride is (sizeof(Struct) / sizeof(float))</p>", 
          "name": "stride"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p><span class=\"type\">dmBuffer::Result</span> BUFFER_OK if the stream was successfully accessed</p>", 
          "name": "result"
        }
      ], 
      "brief": "<p>get stream from buffer.</p>", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">positions</span> <span class=\"o\">=</span> <span class=\"mh\">0x0</span><span class=\"p\">;</span>\n<span class=\"kt\">uint32_t</span> <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"kt\">uint32_t</span> <span class=\"n\">components</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"kt\">uint32_t</span> <span class=\"n\">stride</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">Result</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">GetStream</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"n\">dmHashString64</span><span class=\"p\">(</span><span class=\"s\">&quot;position&quot;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">**</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">positions</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">components</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">stride</span><span class=\"p\">);</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">RESULT_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">count</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">c</span> <span class=\"o\">&lt;</span> <span class=\"n\">components</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">c</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n             <span class=\"n\">positions</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">]</span> <span class=\"o\">*=</span> <span class=\"mf\">1.1f</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">positions</span> <span class=\"o\">+=</span> <span class=\"n\">stride</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// handle error</span>\n<span class=\"p\">}</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "dmBuffer::GetStream"
    }, 
    {
      "replaces": "", 
      "description": "<p>Gets the stream type</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">dmBuffer::HBuffer</span> Pointer to a buffer.</p>", 
          "name": "buffer"
        }, 
        {
          "doc": "<p><span class=\"type\">dmhash_t</span> Hash of stream name to get</p>", 
          "name": "stream_name"
        }, 
        {
          "doc": "<p><span class=\"type\">dmBuffer::ValueType*</span> The value type</p>", 
          "name": "type"
        }, 
        {
          "doc": "<p><span class=\"type\">uint32_t*</span> The number of values (E.g. 3 for a Vector3)</p>", 
          "name": "components"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p><span class=\"type\">dmBuffer::Result</span> Returns BUFFER_OK if all went ok</p>", 
          "name": "result"
        }
      ], 
      "brief": "<p>get stream type and type count</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "dmBuffer::GetStreamType"
    }, 
    {
      "replaces": "", 
      "description": "<p>Converts a value type to string</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">dmBuffer::ValueType</span> The value type</p>", 
          "name": "result"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p><span class=\"type\">const char*</span> The value type as a string</p>", 
          "name": "result"
        }
      ], 
      "brief": "<p>value type to string</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "dmBuffer::GetValueTypeString"
    }, 
    {
      "replaces": "", 
      "description": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">Buffer</span><span class=\"o\">*</span> <span class=\"n\">HBuffer</span><span class=\"p\">;</span>\n</pre></div>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>HBuffer type definition</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "TYPEDEF", 
      "name": "dmBuffer::HBuffer"
    }, 
    {
      "replaces": "", 
      "description": "<p>Checks if a handle is still valid</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">dmBuffer::HBuffer</span> The buffer</p>", 
          "name": "buffer"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p><span class=\"type\">bool</span> True if the handle is valid</p>", 
          "name": "result"
        }
      ], 
      "brief": "<p>check buffer handle</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "dmBuffer::IsBufferValid"
    }, 
    {
      "replaces": "", 
      "description": "<p>Buffer stream declaration structure</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>StreamDeclaration struct</p>", 
      "examples": "<p>Declare a typical position stream:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">const</span> <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">StreamDeclaration</span> <span class=\"n\">streams_decl</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">{</span><span class=\"n\">dmHashString64</span><span class=\"p\">(</span><span class=\"s\">&quot;position&quot;</span><span class=\"p\">),</span> <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">VALUE_TYPE_FLOAT32</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</pre></div>", 
      "members": [
        {
          "doc": "<p><span class=\"type\">dmhash_t</span> Hash of stream name</p>", 
          "name": "m_Name"
        }, 
        {
          "doc": "<p><span class=\"type\">dmBuffer::ValueType</span> Stream ValueType type</p>", 
          "name": "m_Type"
        }, 
        {
          "doc": "<p><span class=\"type\">uint8_t</span> Component count of stream type. E.g. 3 for a Vector3</p>", 
          "name": "m_Count"
        }, 
        {
          "doc": "<p><span class=\"type\">uint32_t</span> Flags for a stream.</p>", 
          "name": "m_Flags"
        }, 
        {
          "doc": "<p><span class=\"type\">uint32_t</span> Reserved for future use.</p>", 
          "name": "m_Reserved"
        }
      ], 
      "error": "", 
      "type": "STRUCT", 
      "name": "dmBuffer::StreamDeclaration"
    }, 
    {
      "replaces": "", 
      "description": "<p>Validate a buffer and it's streams.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">dmBuffer::HBuffer</span> Buffer handle to the buffer to validate</p>", 
          "name": "buffer"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>validate buffer.</p>", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Pass buffer to third party library that does operations on the buffer or streams.</span>\n<span class=\"n\">ThirdPartyLib</span><span class=\"o\">::</span><span class=\"n\">PerformOperation</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">ValidateBuffer</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"n\">dmBuffer</span><span class=\"o\">::</span><span class=\"n\">RESULT_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// buffer and streams are valid</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// the third party lib made the buffer invalid</span>\n<span class=\"p\">}</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "dmBuffer::ValidateBuffer"
    }
  ]
}