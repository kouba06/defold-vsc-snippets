{
  "info": {
    "description": "<p><span class=\"file\">&lt;dmsdk/extension/extension.h&gt;</span></p>\n<p>Functions for creating and controlling engine native extension libraries.</p>", 
    "namespace": "dmExtension", 
    "name": "Extension", 
    "brief": "<p>SDK Extension API documentation</p>"
  }, 
  "elements": [
    {
      "replaces": "", 
      "description": "<p>Declare and register new extension to the engine.\nThis macro is used to declare the extension callback functions used by the engine to communicate with the extension.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">symbol</span> external extension symbol description (no quotes).</p>", 
          "name": "symbol"
        }, 
        {
          "doc": "<p><span class=\"type\">const char*</span> extension name. Human readable.</p>", 
          "name": "name"
        }, 
        {
          "doc": "<p><span class=\"type\">function(dmExtension::AppParams* app_params)</span> app-init function. May be null.</p>\n<dl>\n<dt><code>app_params</code></dt>\n<dd><span class=\"type\">dmExtension::AppParams*</span> Pointer to an <code>AppParams</code> structure.</dd>\n</dl>", 
          "name": "appinit"
        }, 
        {
          "doc": "<p><span class=\"type\">function(dmExtension::AppParams* app_params)</span> app-final function. May be null.</p>\n<dl>\n<dt><code>app_params</code></dt>\n<dd><span class=\"type\">dmExtension::AppParams*</span> Pointer to an <code>AppParams</code> structure.</dd>\n</dl>", 
          "name": "appfinal"
        }, 
        {
          "doc": "<p><span class=\"type\">function(dmExtension::Params* params)</span> init function. May not be null.</p>\n<dl>\n<dt><code>params</code></dt>\n<dd><span class=\"type\">dmExtension::Params*</span> Pointer to a <code>Params</code> structure</dd>\n</dl>", 
          "name": "init"
        }, 
        {
          "doc": "<p><span class=\"type\">function(dmExtension::Params* params)</span> update function. May be null.</p>\n<dl>\n<dt><code>params</code></dt>\n<dd><span class=\"type\">dmExtension::Params*</span> Pointer to a <code>Params</code> structure</dd>\n</dl>", 
          "name": "update"
        }, 
        {
          "doc": "<p><span class=\"type\">function(dmExtension::Params* params, const dmExtension::Event* event)</span> event callback function. May be null.</p>\n<dl>\n<dt><code>params</code></dt>\n<dd><span class=\"type\">dmExtension::Params*</span> Pointer to a <code>Params</code> structure</dd>\n<dt><code>event</code></dt>\n<dd><span class=\"type\">dmExtension::Event*</span> const Pointer to an <code>Event</code> structure</dd>\n</dl>", 
          "name": "on_event"
        }, 
        {
          "doc": "<p><span class=\"type\">function(dmExtension::Params* params)</span> function. May not be null.</p>\n<dl>\n<dt><code>params</code></dt>\n<dd><span class=\"type\">dmExtension::Params*</span> Pointer to an <code>Params</code> structure.</dd>\n</dl>", 
          "name": "final"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>declare a new extension</p>", 
      "examples": "<p>Register a new extension:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">DM_DECLARE_EXTENSION</span><span class=\"p\">(</span><span class=\"n\">MyExt</span><span class=\"p\">,</span> <span class=\"s\">&quot;MyExt&quot;</span><span class=\"p\">,</span> <span class=\"n\">AppInitializeMyExt</span><span class=\"p\">,</span> <span class=\"n\">AppFinalizeMyExt</span><span class=\"p\">,</span> <span class=\"n\">InitializeMyExt</span><span class=\"p\">,</span> <span class=\"n\">UpdateMyExt</span><span class=\"p\">,</span> <span class=\"n\">OnEventMyExt</span><span class=\"p\">,</span> <span class=\"n\">FinalizeMyExt</span><span class=\"p\">);</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "MACRO", 
      "name": "DM_DECLARE_EXTENSION"
    }, 
    {
      "replaces": "", 
      "description": "<p>Set if the platform is Android <span class=\"icon-android\"></span></p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>Set if the platform is Android <span class=\"icon-android\"></span></p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "MACRO", 
      "name": "DM_PLATFORM_ANDROID"
    }, 
    {
      "replaces": "", 
      "description": "<p>Set if the platform is Html5 <span class=\"icon-html5\"></span></p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>Set if the platform is Html5 <span class=\"icon-html5\"></span></p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "MACRO", 
      "name": "DM_PLATFORM_HTML5"
    }, 
    {
      "replaces": "", 
      "description": "<p>Set if the platform is iPhoneOS <span class=\"icon-ios\"></span></p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>Set if the platform is iPhoneOS <span class=\"icon-ios\"></span></p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "MACRO", 
      "name": "DM_PLATFORM_IOS"
    }, 
    {
      "replaces": "", 
      "description": "<p>Set if the platform is Linux <span class=\"icon-linux\"></span></p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>Set if the platform is Linux <span class=\"icon-linux\"></span></p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "MACRO", 
      "name": "DM_PLATFORM_LINUX"
    }, 
    {
      "replaces": "", 
      "description": "<p>Set if the platform is OSX <span class=\"icon-macos\"></span></p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>Set if the platform is OSX <span class=\"icon-macos\"></span></p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "MACRO", 
      "name": "DM_PLATFORM_OSX"
    }, 
    {
      "replaces": "", 
      "description": "<p>Set if the platform is Windows <span class=\"icon-windows\"></span> (on both x86 and x86_64)</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>Set if the platform is Windows <span class=\"icon-windows\"></span> (on both x86 and x86_64)</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "MACRO", 
      "name": "DM_PLATFORM_WIN32"
    }, 
    {
      "replaces": "", 
      "description": "<p>Activity result callback function type. Monitors events from the main activity.\nUsed with RegisterOnActivityResultListener() and UnregisterOnActivityResultListener()</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">void*</span></p>", 
          "name": "env"
        }, 
        {
          "doc": "<p><span class=\"type\">void*</span></p>", 
          "name": "activity"
        }, 
        {
          "doc": "<p><span class=\"type\">int32_t</span></p>", 
          "name": "request_code"
        }, 
        {
          "doc": "<p><span class=\"type\">int32_t</span></p>", 
          "name": "result_code"
        }, 
        {
          "doc": "<p><span class=\"type\">void*</span></p>", 
          "name": "result"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>onActivityResult callback typedef</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "TYPEDEF", 
      "name": "OnActivityResult"
    }, 
    {
      "replaces": "", 
      "description": "<p>Register an iOS application delegate to the engine. Multiple delegates are supported (Max 32)</p>\n<p>This function is only available on iOS. <span class=\"icon-ios\"></span></p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">id&lt;UIApplicationDelegate&gt;</span> An UIApplicationDelegate, see: https://developer.apple.com/documentation/uikit/uiapplicationdelegate?language=objc</p>", 
          "name": "delegate"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>Register application delegate</p>", 
      "examples": "<p>```cpp</p>\n<p>// myextension_ios.mm</p>\n<p>id<UIApplicationDelegate> g_MyApplicationDelegate;</p>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "RegisteriOSUIApplicationDelegate"
    }, 
    {
      "replaces": "", 
      "description": "<p>Deregister a previously registered iOS application delegate</p>\n<p>This function is only available on iOS. <span class=\"icon-ios\"></span></p>", 
      "parameters": [
        {
          "doc": "<p>an id<UIApplicationDelegate></p>", 
          "name": "delegate"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>Unregister an application delegate</p>", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// myextension_ios.mm</span>\n<span class=\"kt\">void</span> <span class=\"nf\">ExtensionAppFinalizeiOS</span><span class=\"p\">(</span><span class=\"n\">dmExtension</span><span class=\"o\">::</span><span class=\"n\">AppParams</span><span class=\"o\">*</span> <span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">dmExtension</span><span class=\"o\">::</span><span class=\"n\">UnregisteriOSUIApplicationDelegate</span><span class=\"p\">(</span><span class=\"n\">g_MyApplicationDelegate</span><span class=\"p\">);</span>\n    <span class=\"p\">[</span><span class=\"n\">g_MyApplicationDelegate</span> <span class=\"n\">release</span><span class=\"p\">];</span>\n    <span class=\"n\">g_MyApplicationDelegate</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "UnregisteriOSUIApplicationDelegate"
    }, 
    {
      "replaces": "", 
      "description": "<p>Extension application entry callback data.\nThis is the data structure passed as parameter by extension Application entry callbacks (AppInit and AppFinalize) functions</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>application level callback data</p>", 
      "examples": "", 
      "members": [
        {
          "doc": "<p><span class=\"type\">dmConfigFile::HConfig</span></p>", 
          "name": "m_ConfigFile"
        }
      ], 
      "error": "", 
      "type": "STRUCT", 
      "name": "dmExtension::AppParams"
    }, 
    {
      "replaces": "", 
      "description": "<p>Extension event callback data.\nThis is the data structure passed as parameter by extension event callbacks (OnEvent)</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>event callback data</p>", 
      "examples": "", 
      "members": [
        {
          "doc": "<p><span class=\"type\">dmExtension::EventID</span></p>", 
          "name": "m_Event"
        }
      ], 
      "error": "", 
      "type": "STRUCT", 
      "name": "dmExtension::Event"
    }, 
    {
      "replaces": "", 
      "description": "<p>Event id enumeration.</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>event id enumeration</p>", 
      "examples": "", 
      "members": [
        {
          "doc": "", 
          "name": "dmExtension::EVENT_ID_ACTIVATEAPP"
        }, 
        {
          "doc": "", 
          "name": "dmExtension::EVENT_ID_DEACTIVATEAPP"
        }
      ], 
      "error": "", 
      "type": "ENUM", 
      "name": "dmExtension::EventID"
    }, 
    {
      "replaces": "", 
      "description": "<p>Extension callback data.\nThis is the data structure passed as parameter by extension callbacks (Init, Finalize, Update, OnEvent)</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>extension level callback data</p>", 
      "examples": "", 
      "members": [
        {
          "doc": "<p><span class=\"type\">dmConfigFile::HConfig</span></p>", 
          "name": "m_ConfigFile"
        }, 
        {
          "doc": "<p><span class=\"type\">lua_State*</span></p>", 
          "name": "m_L"
        }
      ], 
      "error": "", 
      "type": "STRUCT", 
      "name": "dmExtension::Params"
    }, 
    {
      "replaces": "", 
      "description": "<p>Result enumeration.</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p>result enumeration</p>", 
      "examples": "", 
      "members": [
        {
          "doc": "", 
          "name": "dmExtension::RESULT_OK"
        }, 
        {
          "doc": "", 
          "name": "dmExtension::RESULT_INIT_ERROR"
        }
      ], 
      "error": "", 
      "type": "ENUM", 
      "name": "dmExtension::Result"
    }
  ]
}