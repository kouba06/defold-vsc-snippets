{
  "info": {
    "description": "<p>Functions and messages for interacting with the 'Spine' 2D bone\nanimation system.</p>", 
    "namespace": "spine", 
    "name": "Spine", 
    "brief": "<p>Spine model API documentation</p>"
  }, 
  "elements": [
    {
      "replaces": "", 
      "description": "<p><span class=\"mark\">READ ONLY</span> The current animation set on the component.\nThe type of the property is <span class=\"type\">hash</span>.</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p><span class=\"type\">hash</span> spine animation</p>", 
      "examples": "<p>How to read the current animation from a spinemodel component:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- Get the current animation on component &quot;spinemodel&quot;</span>\n  <span class=\"kd\">local</span> <span class=\"n\">animation</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#spinemodel&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">animation&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "PROPERTY", 
      "name": "animation"
    }, 
    {
      "replaces": "", 
      "description": "<p>The normalized animation cursor. The type of the property is number.</p>\n<p><span class=\"icon-attention\"></span> Please note that spine events may not fire as expected when the cursor is manipulated directly.</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p><span class=\"type\">number</span> spine cursor</p>", 
      "examples": "<p>How to get the normalized cursor value:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- Get the cursor value on component &quot;spine&quot;</span>\n  <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#spine&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">cursor&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>\n\n\n<p>How to animate the cursor from 0.0 to 1.0 using linear easing for 2.0 seconds:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- Get the current value on component &quot;spine&quot;</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#spine&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">cursor&quot;</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- Animate the cursor value</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#spine&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">cursor&quot;</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">PLAYBACK_LOOP_FORWARD</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">EASING_LINEAR</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "PROPERTY", 
      "name": "cursor"
    }, 
    {
      "replaces": "", 
      "description": "<p>The animation playback rate. A multiplier to the animation playback rate. The type of the property is <span class=\"type\">number</span>.</p>\n<p>The playback_rate is a non-negative number, a negative value will be clamped to 0.</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p><span class=\"type\">number</span> spine playback_rate</p>", 
      "examples": "<p>How to set the playback_rate on component \"spine\" to play at double the current speed:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- Get the current value on component &quot;spine&quot;</span>\n  <span class=\"n\">playback_rate</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#spine&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">playback_rate&quot;</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- Set the playback_rate to double the previous value.</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#spine&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">playback_rate&quot;</span><span class=\"p\">,</span> <span class=\"n\">playback_rate</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "PROPERTY", 
      "name": "playback_rate"
    }, 
    {
      "replaces": "", 
      "description": "<p>The current skin on the component. The type of the property is hash.\nIf setting the skin property the skin must be present on the spine\nmodel or a runtime error is signalled.</p>", 
      "parameters": [], 
      "returnvalues": [], 
      "brief": "<p><span class=\"type\">hash</span> spine skin</p>", 
      "examples": "<p>How to read and write the current skin from a spinemodel component:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- If the hero skin is set to &quot;bruce_banner&quot;, turn him green</span>\n  <span class=\"kd\">local</span> <span class=\"n\">skin</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#hero&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">skin&quot;</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">skin</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">bruce_banner&quot;</span><span class=\"p\">)</span> <span class=\"k\">then</span>\n    <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#hero&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">skin&quot;</span><span class=\"p\">,</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">green&quot;</span><span class=\"p\">))</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "PROPERTY", 
      "name": "skin"
    }, 
    {
      "replaces": "", 
      "description": "<p>Cancels all running animations on a specified spine model component.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">string | hash | url</span> the spine model for which to cancel the animation</p>", 
          "name": "url"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>cancel all animation on a spine model</p>", 
      "examples": "<p>The following examples assumes that the spine model has id \"spinemodel\".</p>\n<p>How to cancel all animation:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">spine</span><span class=\"p\">.</span><span class=\"n\">cancel</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#spinemodel&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "spine.cancel"
    }, 
    {
      "replaces": "", 
      "description": "<p>Returns the id of the game object that corresponds to a specified skeleton bone.\nThe returned game object can be used for parenting and transform queries.\nThis function has complexity <code>O(n)</code>, where <code>n</code> is the number of bones in the spine model skeleton.\nGame objects corresponding to a spine model skeleton bone can not be individually deleted.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">string | hash | url</span> the spine model to query</p>", 
          "name": "url"
        }, 
        {
          "doc": "<p><span class=\"type\">string | hash</span> id of the corresponding bone</p>", 
          "name": "bone_id"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p><span class=\"type\">hash</span> id of the game object</p>", 
          "name": "id"
        }
      ], 
      "brief": "<p>retrieve the game object corresponding to a spine model skeleton bone</p>", 
      "examples": "<p>The following examples assumes that the spine model has id \"spinemodel\".</p>\n<p>How to parent the game object of the calling script to the \"right_hand\" bone of the spine model in a player game object:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">spine</span><span class=\"p\">.</span><span class=\"n\">get_go</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">player#spinemodel&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">right_hand&quot;</span><span class=\"p\">)</span>\n  <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">.&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">set_parent&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">parent_id</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"p\">})</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "spine.get_go"
    }, 
    {
      "replaces": "", 
      "description": "<p>Plays a specified animation on a spine model component with specified playback\nmode and parameters.</p>\n<p>An optional completion callback function can be provided that will be called when\nthe animation has completed playing. If no function is provided,\na <a href=\"#spine_animation_done\">spine_animation_done</a> message is sent to the script that started the animation.</p>\n<p><span class=\"icon-attention\"></span> The callback is not called (or message sent) if the animation is\ncancelled with <a href=\"/ref/spine#spine.cancel\">spine.cancel</a>. The callback is called (or message sent) only for\nanimations that play with the following playback modes:</p>\n<ul>\n<li><code>go.PLAYBACK_ONCE_FORWARD</code></li>\n<li><code>go.PLAYBACK_ONCE_BACKWARD</code></li>\n<li><code>go.PLAYBACK_ONCE_PINGPONG</code></li>\n</ul>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">string | hash | url</span> the spine model for which to play the animation</p>", 
          "name": "url"
        }, 
        {
          "doc": "<p><span class=\"type\">string | hash</span> id of the animation to play</p>", 
          "name": "anim_id"
        }, 
        {
          "doc": "<p><span class=\"type\">constant</span> playback mode of the animation</p>\n<ul>\n<li><code>go.PLAYBACK_ONCE_FORWARD</code></li>\n<li><code>go.PLAYBACK_ONCE_BACKWARD</code></li>\n<li><code>go.PLAYBACK_ONCE_PINGPONG</code></li>\n<li><code>go.PLAYBACK_LOOP_FORWARD</code></li>\n<li><code>go.PLAYBACK_LOOP_BACKWARD</code></li>\n<li><code>go.PLAYBACK_LOOP_PINGPONG</code></li>\n</ul>", 
          "name": "playback"
        }, 
        {
          "doc": "<p><span class=\"type\">table</span> optional table with properties:</p>\n<dl>\n<dt><code>blend_duration</code></dt>\n<dd><span class=\"type\">number</span> duration of a linear blend between the current and new animation.</dd>\n<dt><code>offset</code></dt>\n<dd><span class=\"type\">number</span> the normalized initial value of the animation cursor when the animation starts playing.</dd>\n<dt><code>playback_rate</code></dt>\n<dd><span class=\"type\">number</span> the rate with which the animation will be played. Must be positive.</dd>\n</dl>", 
          "name": "[play_properties]"
        }, 
        {
          "doc": "<p><span class=\"type\">function(self, message_id, message, sender))</span> function to call when the animation has completed.</p>\n<dl>\n<dt><code>self</code></dt>\n<dd><span class=\"type\">object</span> The current object.</dd>\n<dt><code>message_id</code></dt>\n<dd><span class=\"type\">hash</span> The name of the completion message, <code>\"spine_animation_done\"</code>.</dd>\n<dt><code>message</code></dt>\n<dd><span class=\"type\">table</span> Information about the completion:</dd>\n</dl>\n<ul>\n<li><span class=\"type\">hash</span> <code>animation_id</code> - the animation that was completed.</li>\n<li><span class=\"type\">constant</span> <code>playback</code> - the playback mode for the animation.</li>\n</ul>\n<dl>\n<dt><code>sender</code></dt>\n<dd><span class=\"type\">url</span> The invoker of the callback: the spine model component.</dd>\n</dl>", 
          "name": "[complete_function]"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>play an animation on a spine model</p>", 
      "examples": "<p>The following examples assumes that the spine model has id \"spinemodel\".</p>\n<p>How to play the \"jump\" animation followed by the \"run\" animation:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">anim_done</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">spine_animation_done&quot;</span><span class=\"p\">)</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">animation_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">jump&quot;</span><span class=\"p\">)</span> <span class=\"k\">then</span>\n      <span class=\"c1\">-- open animation done, chain with &quot;run&quot;</span>\n      <span class=\"kd\">local</span> <span class=\"n\">properties</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">blend_duration</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span> <span class=\"p\">}</span>\n      <span class=\"n\">spine</span><span class=\"p\">.</span><span class=\"n\">play_anim</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">run&quot;</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">PLAYBACK_LOOP_FORWARD</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"p\">,</span> <span class=\"n\">anim_done</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#spinemodel&quot;</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">play_properties</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">blend_duration</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span> <span class=\"p\">}</span>\n    <span class=\"c1\">-- first blend during 0.1 sec into the jump, then during 0.2 s into the run animation</span>\n    <span class=\"n\">spine</span><span class=\"p\">.</span><span class=\"n\">play_anim</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">open&quot;</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">PLAYBACK_ONCE_FORWARD</span><span class=\"p\">,</span> <span class=\"n\">play_properties</span><span class=\"p\">,</span> <span class=\"n\">anim_done</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "spine.play_anim"
    }, 
    {
      "replaces": "", 
      "description": "<p>Resets a shader constant for a spine model component.\nThe constant must be defined in the material assigned to the spine model.\nResetting a constant through this function implies that the value defined in the material will be used.\nWhich spine model to reset a constant for is identified by the URL.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">string | hash | url</span> the spine model that should have a constant reset</p>", 
          "name": "url"
        }, 
        {
          "doc": "<p><span class=\"type\">string | hash</span> name of the constant</p>", 
          "name": "constant"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>reset a shader constant for a spine model</p>", 
      "examples": "<p>The following examples assumes that the spine model has id \"spinemodel\" and that the default-material in builtins is used, which defines the constant \"tint\".\nIf you assign a custom material to the sprite, you can reset the constants defined there in the same manner.</p>\n<p>How to reset the tinting of a spine model:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">spine</span><span class=\"p\">.</span><span class=\"n\">reset_constant</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#spinemodel&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">tint&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "spine.reset_constant"
    }, 
    {
      "replaces": "", 
      "description": "<p>Resets any previously set IK target of a spine model, the position will be reset\nto the original position from the spine scene.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">string | hash | url</span> the spine model containing the object</p>", 
          "name": "url"
        }, 
        {
          "doc": "<p><span class=\"type\">string | hash</span> id of the corresponding IK constraint object</p>", 
          "name": "ik_constraint_id"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>reset the IK constraint target position to default of a spinemodel</p>", 
      "examples": "<p>The following example assumes that the spine model has id \"spinemodel\".</p>\n<p>A player no longer has an item in hand, that previously was controlled through IK,\nlet's reset the IK of the right hand.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">player_lost_item</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">spine</span><span class=\"p\">.</span><span class=\"n\">reset_ik_target</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">player#spinemodel&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">right_hand_constraint&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "spine.reset_ik_target"
    }, 
    {
      "replaces": "", 
      "description": "<p>Sets a shader constant for a spine model component.\nThe constant must be defined in the material assigned to the spine model.\nSetting a constant through this function will override the value set for that constant in the material.\nThe value will be overridden until spine.reset_constant is called.\nWhich spine model to set a constant for is identified by the URL.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">string | hash | url</span> the spine model that should have a constant set</p>", 
          "name": "url"
        }, 
        {
          "doc": "<p><span class=\"type\">string | hash</span> name of the constant</p>", 
          "name": "constant"
        }, 
        {
          "doc": "<p><span class=\"type\">vector4</span> value of the constant</p>", 
          "name": "value"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>set a shader constant for a spine model</p>", 
      "examples": "<p>The following examples assumes that the spine model has id \"spinemodel\" and that the default-material in builtins is used, which defines the constant \"tint\".\nIf you assign a custom material to the sprite, you can reset the constants defined there in the same manner.</p>\n<p>How to tint a spine model to red:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">spine</span><span class=\"p\">.</span><span class=\"n\">set_constant</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#spinemodel&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">tint&quot;</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "spine.set_constant"
    }, 
    {
      "replaces": "", 
      "description": "<p>Sets a game object as target position of an inverse kinematic (IK) object. As the\ntarget game object's position is updated, the constraint object is updated with the\nnew position.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">string | hash | url</span> the spine model containing the object</p>", 
          "name": "url"
        }, 
        {
          "doc": "<p><span class=\"type\">string | hash</span> id of the corresponding IK constraint object</p>", 
          "name": "ik_constraint_id"
        }, 
        {
          "doc": "<p><span class=\"type\">string | hash | url</span> target game object</p>", 
          "name": "target_url"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>set the IK constraint object target position to follow position of a game object</p>", 
      "examples": "<p>The following example assumes that the spine model has id \"spinemodel\".</p>\n<p>How to set the target IK position of the right_hand_constraint constraint object of the player object\nto follow the position of game object with url \"some_game_object\"</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">spine</span><span class=\"p\">.</span><span class=\"n\">set_ik_target</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">player#spinemodel&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">right_hand_constraint&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">some_game_object&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "spine.set_ik_target"
    }, 
    {
      "replaces": "", 
      "description": "<p>Sets a static (vector3) target position of an inverse kinematic (IK) object.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">string | hash | url</span> the spine model containing the object</p>", 
          "name": "url"
        }, 
        {
          "doc": "<p><span class=\"type\">string | hash</span> id of the corresponding IK constraint object</p>", 
          "name": "ik_constraint_id"
        }, 
        {
          "doc": "<p><span class=\"type\">vector3</span> target position</p>", 
          "name": "position"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>set the target position of an IK constraint object</p>", 
      "examples": "<p>The following example assumes that the spine model has id \"spinemodel\".</p>\n<p>How to set the target IK position of the right_hand_constraint constraint object of the player object</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n  <span class=\"n\">spine</span><span class=\"p\">.</span><span class=\"n\">set_ik_target_position</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">player#spinemodel&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">right_hand_constraint&quot;</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "spine.set_ik_target_position"
    }, 
    {
      "replaces": "", 
      "description": "<p>Sets the spine skin on a spine model.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">string | hash | url</span> the spine model for which to set skin</p>", 
          "name": "url"
        }, 
        {
          "doc": "<p><span class=\"type\">string | hash</span> spine skin id</p>", 
          "name": "spine_skin"
        }, 
        {
          "doc": "<p><span class=\"type\">string | hash</span> optional slot id to only change a specific slot</p>", 
          "name": "[spine_slot]"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>sets the spine skin</p>", 
      "examples": "<p>The following examples assumes that the spine model has id \"spinemodel\".</p>\n<p>Change skin of a Spine model</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">spine</span><span class=\"p\">.</span><span class=\"n\">set_skin</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#spinemodel&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">monster&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>\n\n\n<p>Change only part of the Spine model to a different skin.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">monster_transform_arm</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- The player is transforming into a monster, begin with changing the arm.</span>\n  <span class=\"n\">spine</span><span class=\"p\">.</span><span class=\"n\">set_skin</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#spinemodel&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">monster&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">left_arm_slot&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "spine.set_skin"
    }, 
    {
      "replaces": "", 
      "description": "<p>This message is sent when a Spine animation has finished playing back to the script\nthat started the animation.</p>\n<p><span class=\"icon-attention\"></span> No message is sent if a completion callback function was supplied\nwhen the animation was started. No message is sent if the animation is cancelled with\nmodel.cancel(). This message is sent only for animations that play with\nthe following playback modes:</p>\n<ul>\n<li><code>go.PLAYBACK_ONCE_FORWARD</code></li>\n<li><code>go.PLAYBACK_ONCE_BACKWARD</code></li>\n<li><code>go.PLAYBACK_ONCE_PINGPONG</code></li>\n</ul>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">hash</span> the id of the completed animation</p>", 
          "name": "animation_id"
        }, 
        {
          "doc": "<p><span class=\"type\">constant</span> the playback mode of the completed animation</p>", 
          "name": "playback"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>reports the completion of a Spine animation</p>", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">spine_animation_done&quot;</span><span class=\"p\">)</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">animation_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">run&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">playback</span> <span class=\"o\">==</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">PLAYBACK_ONCE_FORWARD</span> <span class=\"k\">then</span>\n      <span class=\"c1\">-- The animation &quot;run&quot; has finished running forward.</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "MESSAGE", 
      "name": "spine_animation_done"
    }, 
    {
      "replaces": "", 
      "description": "<p>This message is sent when Spine animation playback fires events. These events\nhas to be defined on the animation track in the Spine animation editor. An event\ncan contain custom values expressed in the fields <code>integer</code>, <code>float</code> and <code>string</code>.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">hash</span> the id of the event.</p>", 
          "name": "event_id"
        }, 
        {
          "doc": "<p><span class=\"type\">hash</span> the id of the animation.</p>", 
          "name": "animation_id"
        }, 
        {
          "doc": "<p><span class=\"type\">number</span> the time of the event in seconds, relative to the start of the animation.</p>", 
          "name": "t"
        }, 
        {
          "doc": "<p>[type:number the blend weight (between 0.0-1.0) of the current animation at time t.</p>", 
          "name": "blend_weight"
        }, 
        {
          "doc": "<p><span class=\"type\">number</span> user defined integer value for the event</p>", 
          "name": "integer"
        }, 
        {
          "doc": "<p><span class=\"type\">number</span> user defined floating point value for the event</p>", 
          "name": "float"
        }, 
        {
          "doc": "<p><span class=\"type\">hash</span> user defined string value (hashed) for the event</p>", 
          "name": "string"
        }, 
        {
          "doc": "<p><span class=\"type\">node</span> the source spine gui node if the event originated from gui, otherwise nil</p>", 
          "name": "node"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>reports an incoming event from the Spine animation</p>", 
      "examples": "<p>The following example assumes that an animation sends event messages with the id <code>\"footstep\"</code>\nand that the <code>integer</code> field is used to distinguish between left and right foot (values 0 and 1).</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">spine_event&quot;</span><span class=\"p\">)</span> <span class=\"k\">then</span>\n    <span class=\"c1\">-- Receiving animation event from Spine. Play footsteps.</span>\n    <span class=\"k\">if</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">event_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">footstep&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">integer</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#sound_footstep_right&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">play_sound&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">elseif</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">event_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">footstep&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">integer</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n      <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#sound_footstep_left&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">play_sound&quot;</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "MESSAGE", 
      "name": "spine_event"
    }
  ]
}