{
  "info": {
    "description": "<p>Functions and for creating and controlling webviews to show html pages\nor evaluate javascript. These API:s only exist on mobile platforms.\n<span class=\"icon-ios\"></span> <span class=\"icon-android\"></span></p>", 
    "namespace": "webview", 
    "name": "Webview", 
    "brief": "<p>Webview API documentation</p>"
  }, 
  "elements": [
    {
      "replaces": "", 
      "description": "<p>Creates a webview instance. It can show HTML pages as well as evaluate Javascript.\nThe view remains hidden until the first call. There can exist a maximum of 4 webviews at the same time.</p>\n<p><span class=\"icon-ios\"></span> On iOS, the callback will never get a webview.CALLBACK_RESULT_EVAL_ERROR,\ndue to the iOS SDK implementation.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">function(self, webview_id, request_id, type, data)</span> A callback which receives info about finished requests taking the following parameters</p>\n<dl>\n<dt><code>self</code></dt>\n<dd><span class=\"type\">object</span> The calling script</dd>\n<dt><code>webview_id</code></dt>\n<dd><span class=\"type\">number</span> The webview id</dd>\n<dt><code>request_id</code></dt>\n<dd><span class=\"type\">number</span> The request id</dd>\n<dt><code>type</code></dt>\n<dd><span class=\"type\">number</span> The type of the callback. Can be one of these:</dd>\n</dl>\n<ul>\n<li><code>webview.CALLBACK_RESULT_URL_OK</code></li>\n<li><code>webview.CALLBACK_RESULT_URL_ERROR</code></li>\n<li><code>webview.CALLBACK_RESULT_EVAL_OK</code></li>\n<li><code>webview.CALLBACK_RESULT_EVAL_ERROR</code></li>\n</ul>\n<dl>\n<dt><code>data</code></dt>\n<dd><span class=\"type\">table</span> A table holding the data. The table has these fields:</dd>\n</dl>\n<ul>\n<li><span class=\"type\">string</span> <code>url</code>: The url used in the webview.open() call. <code>nil</code> otherwise.</li>\n<li><span class=\"type\">string</span> <code>result</code>: Holds the result of either: a failed url open, a successful eval request or a failed eval. <code>nil</code> otherwise</li>\n</ul>", 
          "name": "callback"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p><span class=\"type\">number</span> The id number of the webview</p>", 
          "name": "id"
        }
      ], 
      "brief": "<p>Creates a webview</p>", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">webview_callback</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">webview_id</span><span class=\"p\">,</span> <span class=\"n\">request_id</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">type</span> <span class=\"o\">==</span> <span class=\"n\">webview</span><span class=\"p\">.</span><span class=\"n\">CALLBACK_RESULT_URL_OK</span> <span class=\"k\">then</span>\n        <span class=\"c1\">-- the page is now loaded, let&#39;s show it</span>\n        <span class=\"n\">webview</span><span class=\"p\">.</span><span class=\"n\">set_visible</span><span class=\"p\">(</span><span class=\"n\">webview_id</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">elseif</span> <span class=\"nb\">type</span> <span class=\"o\">==</span> <span class=\"n\">webview</span><span class=\"p\">.</span><span class=\"n\">CALLBACK_RESULT_URL_ERROR</span> <span class=\"k\">then</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">Failed to load url: &quot;</span> <span class=\"o\">..</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;</span><span class=\"s\">url&quot;</span><span class=\"p\">])</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">Error: &quot;</span> <span class=\"o\">..</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;</span><span class=\"s\">error&quot;</span><span class=\"p\">])</span>\n    <span class=\"k\">elseif</span> <span class=\"nb\">type</span> <span class=\"o\">==</span> <span class=\"n\">webview</span><span class=\"p\">.</span><span class=\"n\">CALLBACK_RESULT_EVAL_OK</span> <span class=\"k\">then</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">Eval ok. Result: &quot;</span> <span class=\"o\">..</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;</span><span class=\"s\">result&#39;</span><span class=\"p\">])</span>\n    <span class=\"k\">elseif</span> <span class=\"nb\">type</span> <span class=\"o\">==</span> <span class=\"n\">webview</span><span class=\"p\">.</span><span class=\"n\">CALLBACK_RESULT_EVAL_ERROR</span> <span class=\"k\">then</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">Eval not ok. Request # &quot;</span> <span class=\"o\">..</span> <span class=\"n\">request_id</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"kd\">local</span> <span class=\"n\">webview_id</span> <span class=\"o\">=</span> <span class=\"n\">webview</span><span class=\"p\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">webview_callback</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "webview.create"
    }, 
    {
      "replaces": "", 
      "description": "<p>Destroys an instance of a webview.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">number</span> The webview id (returned by the webview.create() call)</p>", 
          "name": "webview_id"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>Destroys a webview</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "webview.destroy"
    }, 
    {
      "replaces": "", 
      "description": "<p>Evaluates java script within the context of the currently loaded page (if any).\nOnce the request is done, the callback (registered in <code>webview.create()</code>)\nis invoked. The callback will get the result in the <code>data[\"result\"]</code> field.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">number</span> The webview id</p>", 
          "name": "webview_id"
        }, 
        {
          "doc": "<p><span class=\"type\">string</span> The java script code to evaluate</p>", 
          "name": "code"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p><span class=\"type\">number</span> The id number of the request</p>", 
          "name": "id"
        }
      ], 
      "brief": "<p>Evaluates javascript in a webview</p>", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">request_id</span> <span class=\"o\">=</span> <span class=\"n\">webview</span><span class=\"p\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">webview_id</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">GetMyFormData()&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "webview.eval"
    }, 
    {
      "replaces": "", 
      "description": "<p>Returns the visibility state of the webview.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">number</span> The webview id (returned by the webview.create() call)</p>", 
          "name": "webview_id"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p><span class=\"type\">number</span> Returns 0 if not visible, 1 if it is visible</p>", 
          "name": "visibility"
        }
      ], 
      "brief": "<p>Gets the visibility state of the webview</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "webview.is_visible"
    }, 
    {
      "replaces": "", 
      "description": "<p>Opens a web page in the webview, using an url. Once the request is done, the\ncallback (registered in <code>webview.create()</code>) is invoked.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">number</span> The webview id</p>", 
          "name": "webview_id"
        }, 
        {
          "doc": "<p><span class=\"type\">string</span> The url to open</p>", 
          "name": "url"
        }, 
        {
          "doc": "<p><span class=\"type\">table</span> A table of options for the request. Currently it holds these options</p>\n<dl>\n<dt><code>hidden</code></dt>\n<dd><span class=\"type\">boolean</span> If true, the webview will stay hidden (default=false)</dd>\n</dl>", 
          "name": "options"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p><span class=\"type\">number</span> The id number of the request</p>", 
          "name": "id"
        }
      ], 
      "brief": "<p>Open a page using an url</p>", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">request_id</span> <span class=\"o\">=</span> <span class=\"n\">webview</span><span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">webview_id</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">http://www.defold.com&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">hidden</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">})</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "webview.open"
    }, 
    {
      "replaces": "", 
      "description": "<p>Opens a web page in the webview, using html data. Once the request is done,\nthe callback (registered in <code>webview.create()</code>) is invoked.</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">number</span> The webview id</p>", 
          "name": "webview_id"
        }, 
        {
          "doc": "<p><span class=\"type\">string</span> The html data to display</p>", 
          "name": "html"
        }, 
        {
          "doc": "<p><span class=\"type\">table</span> A table of options for the request. See webview.open()</p>", 
          "name": "options"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p><span class=\"type\">number</span> The id number of the request</p>", 
          "name": "id"
        }
      ], 
      "brief": "<p>Open a page using html</p>", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">load_resource</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">/main/data/test.html&quot;</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">request_id</span> <span class=\"o\">=</span> <span class=\"n\">webview</span><span class=\"p\">.</span><span class=\"n\">open_raw</span><span class=\"p\">(</span><span class=\"n\">webview_id</span><span class=\"p\">,</span> <span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">hidden</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">})</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "webview.open_raw"
    }, 
    {
      "replaces": "", 
      "description": "<p>Sets the position and size of the webview</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">number</span> The webview id (returned by the webview.create() call)</p>", 
          "name": "webview_id"
        }, 
        {
          "doc": "<p><span class=\"type\">number</span> The x position of the webview</p>", 
          "name": "x"
        }, 
        {
          "doc": "<p><span class=\"type\">number</span> The y position of the webview</p>", 
          "name": "y"
        }, 
        {
          "doc": "<p><span class=\"type\">number</span> The width of the webview (-1 to match screen width)</p>", 
          "name": "width"
        }, 
        {
          "doc": "<p><span class=\"type\">number</span> The height of the webview (-1 to match screen height)</p>", 
          "name": "height"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>Sets the position and size of the webview</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "webview.set_position"
    }, 
    {
      "replaces": "", 
      "description": "<p>Shows or hides a web view</p>", 
      "parameters": [
        {
          "doc": "<p><span class=\"type\">number</span> The webview id (returned by the <code>webview.create()</code> call)</p>", 
          "name": "webview_id"
        }, 
        {
          "doc": "<p><span class=\"type\">number</span> If 0, hides the webview. If non zero, shows the view</p>", 
          "name": "visible"
        }
      ], 
      "returnvalues": [], 
      "brief": "<p>Shows or hides a web view</p>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "webview.set_visible"
    }
  ]
}