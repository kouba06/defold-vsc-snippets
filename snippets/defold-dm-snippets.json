{"dmBuffer::StreamDeclaration": [{"body": "dmBuffer::StreamDeclaration", "prefix": "dmBuffer::StreamDeclaration", "description": "StreamDeclaration struct"}], "dmGraphics::GetNativeAndroidApp": [{"body": "dmGraphics::GetNativeAndroidApp()", "prefix": "dmGraphics::GetNativeAndroidApp", "description": "get Android app object"}], "dmScript::PushMatrix4(L, matrix)": [{"body": "dmScript::PushMatrix4(${1:L}, ${2:matrix})", "prefix": "dmScript::PushMatrix4(L, matrix)", "description": "push a Vectormath::Aos::Matrix4 onto the Lua stack"}], "dmScript::Ref(L, table)": [{"body": "dmScript::Ref(${1:L}, ${2:table})", "prefix": "dmScript::Ref(L, table)", "description": "wrapper for luaL_ref."}], "dmGraphics::GetNativeAndroidActivity": [{"body": "dmGraphics::GetNativeAndroidActivity()", "prefix": "dmGraphics::GetNativeAndroidActivity", "description": "get Android native jobject"}], "dmArray::Begin": [{"body": "dmArray::Begin()", "prefix": "dmArray::Begin", "description": "array begin"}], "DM_PLATFORM_WINDOWS": [{"body": "DM_PLATFORM_WINDOWS", "prefix": "DM_PLATFORM_WINDOWS", "description": "Set if the platform is Windows  (on both x86 and x86_64)"}], "dmTime::GetTime": [{"body": "dmTime::GetTime()", "prefix": "dmTime::GetTime", "description": "get current time in microseconds"}], "DM_PLATFORM_IOS": [{"body": "DM_PLATFORM_IOS", "prefix": "DM_PLATFORM_IOS", "description": "Set if the platform is iPhoneOS "}], "DM_PLATFORM_HTML5": [{"body": "DM_PLATFORM_HTML5", "prefix": "DM_PLATFORM_HTML5", "description": "Set if the platform is Html5 "}], "dmScript::Unref(L, table, reference)": [{"body": "dmScript::Unref(${1:L}, ${2:table}, ${3:reference})", "prefix": "dmScript::Unref(L, table, reference)", "description": "wrapper for luaL_unref."}], "dmHashString64(string)": [{"body": "dmHashString64(${1:string})", "prefix": "dmHashString64(string)", "description": "calculate 64-bit hash value from string"}], "dmArray::Pop": [{"body": "dmArray::Pop()", "prefix": "dmArray::Pop", "description": "array pop"}], "dmScript::ToVector3(L, index)": [{"body": "dmScript::ToVector3(${1:L}, ${2:index})", "prefix": "dmScript::ToVector3(L, index)", "description": "get the value at index as a Vectormath::Aos::Vector3*"}], "dmStrTok(string, delim, lasts)": [{"body": "dmStrTok(${1:string}, ${2:delim}, ${3:lasts})", "prefix": "dmStrTok(string, delim, lasts)", "description": "Tokenize strings."}], "dmSnPrintf(buffer, count, format)": [{"body": "dmSnPrintf(${1:buffer}, ${2:count}, ${3:format})", "prefix": "dmSnPrintf(buffer, count, format)", "description": "Size-bounded string formating."}], "dmLogInfo(format, args)": [{"body": "dmLogInfo", "prefix": "dmLogInfo(format, args)", "description": "macro for info category logging"}], "DM_ALIGNED(a)": [{"body": "DM_ALIGNED", "prefix": "DM_ALIGNED(a)", "description": "data structure alignment macro"}], "dmJson::Document": [{"body": "dmJson::Document", "prefix": "dmJson::Document", "description": "Json document"}], "dmMutex::New": [{"body": "dmMutex::New()", "prefix": "dmMutex::New", "description": "create Mutex"}], "dmGraphics::GetNativeWindowsHGLRC": [{"body": "dmGraphics::GetNativeWindowsHGLRC()", "prefix": "dmGraphics::GetNativeWindowsHGLRC", "description": "get Win32 HGLRC"}], "UnregisterAndroidOnActivityResultListener([type:dmExtension::OnActivityResult])": [{"body": "UnregisterAndroidOnActivityResultListener(${1:[type:dmExtension::OnActivityResult]})", "prefix": "UnregisterAndroidOnActivityResultListener([type:dmExtension::OnActivityResult])", "description": "unregister Android activity result callback"}], "dmScript::ToQuat(L, index)": [{"body": "dmScript::ToQuat(${1:L}, ${2:index})", "prefix": "dmScript::ToQuat(L, index)", "description": "get the value at index as a Vectormath::Aos::Quat*"}], "dmArray::dmArray(user_array, size, capacity)": [{"body": "dmArray::dmArray(${1:user_array}, ${2:size}, ${3:capacity})", "prefix": "dmArray::dmArray(user_array, size, capacity)", "description": "user-allocated array"}], "dmStrlCpy(dst, src, size)": [{"body": "dmStrlCpy(${1:dst}, ${2:src}, ${3:size})", "prefix": "dmStrlCpy(dst, src, size)", "description": "Size-bounded string copying."}], "dmLogUserDebug(format, args)": [{"body": "dmLogUserDebug", "prefix": "dmLogUserDebug(format, args)", "description": "macro for debug category logging"}], "dmScript::SetupCallback(cbk)": [{"body": "dmScript::SetupCallback(${1:cbk})", "prefix": "dmScript::SetupCallback(cbk)", "description": "Setups up the Lua callback prior to a call to dmScript::PCall()"}], "dmBuffer::IsBufferValid(buffer)": [{"body": "dmBuffer::IsBufferValid(${1:buffer})", "prefix": "dmBuffer::IsBufferValid(buffer)", "description": "check buffer handle"}], "DM_PLATFORM_LINUX": [{"body": "DM_PLATFORM_LINUX", "prefix": "DM_PLATFORM_LINUX", "description": "Set if the platform is Linux "}], "OnActivityResult(env, activity, request_code, result_code, result)": [{"body": "OnActivityResult", "prefix": "OnActivityResult(env, activity, request_code, result_code, result)", "description": "OnActivityResult callback typedef"}], "dmJson::Node": [{"body": "dmJson::Node", "prefix": "dmJson::Node", "description": "Json node representation."}], "dmArray::Capacity": [{"body": "dmArray::Capacity()", "prefix": "dmArray::Capacity", "description": "capacity of array"}], "dmGraphics::GetNativeX11GLXContext": [{"body": "dmGraphics::GetNativeX11GLXContext()", "prefix": "dmGraphics::GetNativeX11GLXContext", "description": "get Linux X11GLXContext"}], "dmScript::ToVector4(L, index)": [{"body": "dmScript::ToVector4(${1:L}, ${2:index})", "prefix": "dmScript::ToVector4(L, index)", "description": "get the value at index as a Vectormath::Aos::Vector4*"}], "dmArray::operator[](index)": [{"body": "dmArray::operator[](${1:index})", "prefix": "dmArray::operator[](index)", "description": "array operator[]"}, {"body": "dmArray::operator[](${1:index})", "prefix": "dmArray::operator[](index)", "description": "array operator[] (const)"}], "dmConditionVariable::Wait(condition, mutex)": [{"body": "dmConditionVariable::Wait(${1:condition}, ${2:mutex})", "prefix": "dmConditionVariable::Wait(condition, mutex)", "description": "wait for condition variable"}], "dmLogFatal(format, args)": [{"body": "dmLogFatal", "prefix": "dmLogFatal(format, args)", "description": "macro for fatal category logging"}], "dmScript::PushVector3(L, v)": [{"body": "dmScript::PushVector3(${1:L}, ${2:v})", "prefix": "dmScript::PushVector3(L, v)", "description": "push a Vectormath::Aos::Vector3 onto the Lua stack"}], "Parse(buffer, buffer_length, document)": [{"body": "Parse(${1:buffer}, ${2:buffer_length}, ${3:document})", "prefix": "Parse(buffer, buffer_length, document)", "description": "parse json data"}], "dmScript::GetCallbackLuaContext(cbk)": [{"body": "dmScript::GetCallbackLuaContext(${1:cbk})", "prefix": "dmScript::GetCallbackLuaContext(cbk)", "description": "Gets the Lua context from a callback struct"}], "dmMutex::Unlock(mutex)": [{"body": "dmMutex::Unlock(${1:mutex})", "prefix": "dmMutex::Unlock(mutex)", "description": "unlock Mutex."}], "dmMutex::TryLock(mutex)": [{"body": "dmMutex::TryLock(${1:mutex})", "prefix": "dmMutex::TryLock(mutex)", "description": "non-blocking lock of Mutex."}], "dmConfigFile::GetString(config, key, default_value)": [{"body": "dmConfigFile::GetString(${1:config}, ${2:key}, ${3:default_value})", "prefix": "dmConfigFile::GetString(config, key, default_value)", "description": "get config value as string"}], "dmScript::PushVector4(L, v)": [{"body": "dmScript::PushVector4(${1:L}, ${2:v})", "prefix": "dmScript::PushVector4(L, v)", "description": "push a Vectormath::Aos::Vector4 on the stack"}], "dmScript::DestroyCallback(cbk)": [{"body": "dmScript::DestroyCallback(${1:cbk})", "prefix": "dmScript::DestroyCallback(cbk)", "description": "Deletes the Lua callback"}], "dmJson::Result": [{"body": "dmJson::Result", "prefix": "dmJson::Result", "description": "result enumeration"}], "dmArray::OffsetCapacity(offset)": [{"body": "dmArray::OffsetCapacity(${1:offset})", "prefix": "dmArray::OffsetCapacity(offset)", "description": "array offset capacity"}], "RegisterAndroidOnActivityResultListener([type:dmExtension::OnActivityResult])": [{"body": "RegisterAndroidOnActivityResultListener(${1:[type:dmExtension::OnActivityResult]})", "prefix": "RegisterAndroidOnActivityResultListener([type:dmExtension::OnActivityResult])", "description": "register Android activity result callback"}], "dmConfigFile::GetFloat(config, key, default_value)": [{"body": "dmConfigFile::GetFloat(${1:config}, ${2:key}, ${3:default_value})", "prefix": "dmConfigFile::GetFloat(config, key, default_value)", "description": "get config value as float"}], "dmArray::Remaining": [{"body": "dmArray::Remaining()", "prefix": "dmArray::Remaining", "description": "remaining size of array"}], "DM_MUTEX_SCOPED_LOCK(mutex)": [{"body": "DM_MUTEX_SCOPED_LOCK", "prefix": "DM_MUTEX_SCOPED_LOCK(mutex)", "description": "macro for scope lifetime Mutex locking"}], "dmScript::CheckVector3(L, index)": [{"body": "dmScript::CheckVector3(${1:L}, ${2:index})", "prefix": "dmScript::CheckVector3(L, index)", "description": "check if the value is a Vectormath::Aos::Vector3"}], "dmArray::PushArray(array, count)": [{"body": "dmArray::PushArray(${1:array}, ${2:count})", "prefix": "dmArray::PushArray(array, count)", "description": "array push array"}], "dmhash_t": [{"body": "dmhash_t", "prefix": "dmhash_t", "description": "dmhash_t type definition"}], "dmExtension::Event": [{"body": "dmExtension::Event", "prefix": "dmExtension::Event", "description": "event callback data"}], "dmBuffer::GetCount(buffer, count)": [{"body": "dmBuffer::GetCount(${1:buffer}, ${2:count})", "prefix": "dmBuffer::GetCount(buffer, count)", "description": "get buffer count."}], "dmBuffer::Create(count, streams_decl, streams_decl_count, out_buffer)": [{"body": "dmBuffer::Create(${1:count}, ${2:streams_decl}, ${3:streams_decl_count}, ${4:out_buffer})", "prefix": "dmBuffer::Create(count, streams_decl, streams_decl_count, out_buffer)", "description": "create Buffer"}], "dmConfigFile::HConfig": [{"body": "dmConfigFile::HConfig", "prefix": "dmConfigFile::HConfig", "description": "HConfig type definition"}], "UnregisteriOSUIApplicationDelegate(delegate)": [{"body": "UnregisteriOSUIApplicationDelegate(${1:delegate})", "prefix": "UnregisteriOSUIApplicationDelegate(delegate)", "description": "Unregister an application delegate"}], "dmScript::PushBuffer(L, buffer)": [{"body": "dmScript::PushBuffer(${1:L}, ${2:buffer})", "prefix": "dmScript::PushBuffer(L, buffer)", "description": "push a LuaHBuffer onto the supplied lua state"}], "dmScript::TeardownCallback(cbk)": [{"body": "dmScript::TeardownCallback(${1:cbk})", "prefix": "dmScript::TeardownCallback(cbk)", "description": "Cleans up the stack after SetupCallback+PCall calls"}], "dmBuffer::ValidateBuffer(buffer)": [{"body": "dmBuffer::ValidateBuffer(${1:buffer})", "prefix": "dmBuffer::ValidateBuffer(buffer)", "description": "validate buffer."}], "dmStrCaseCmp(s1, s2)": [{"body": "dmStrCaseCmp(${1:s1}, ${2:s2})", "prefix": "dmStrCaseCmp(s1, s2)", "description": "Case-insensitive string comparison"}], "dmBuffer::GetResultString(result)": [{"body": "dmBuffer::GetResultString(${1:result})", "prefix": "dmBuffer::GetResultString(result)", "description": "result to string"}], "dmLogDebug(format, args)": [{"body": "dmLogDebug", "prefix": "dmLogDebug(format, args)", "description": "macro for debug category logging"}], "dmArray::~dmArray": [{"body": "dmArray::~dmArray()", "prefix": "dmArray::~dmArray", "description": "array destructor"}], "dmGraphics::GetNativeiOSEAGLContext": [{"body": "dmGraphics::GetNativeiOSEAGLContext()", "prefix": "dmGraphics::GetNativeiOSEAGLContext", "description": "get iOS EAGLContext"}], "dmConfigFile::GetInt(config, key, default_value)": [{"body": "dmConfigFile::GetInt(${1:config}, ${2:key}, ${3:default_value})", "prefix": "dmConfigFile::GetInt(config, key, default_value)", "description": "get config value as int"}], "dmScript::CheckMatrix4(L, index)": [{"body": "dmScript::CheckMatrix4(${1:L}, ${2:index})", "prefix": "dmScript::CheckMatrix4(L, index)", "description": "check if the value is a Vectormath::Aos::Matrix4"}], "dmBuffer::GetStream(buffer, stream_name, stream, count, components, stride)": [{"body": "dmBuffer::GetStream(${1:buffer}, ${2:stream_name}, ${3:stream}, ${4:count}, ${5:components}, ${6:stride})", "prefix": "dmBuffer::GetStream(buffer, stream_name, stream, count, components, stride)", "description": "get stream from buffer."}], "dmMutex::Lock(mutex)": [{"body": "dmMutex::Lock(${1:mutex})", "prefix": "dmMutex::Lock(mutex)", "description": "lock Mutex."}], "dmConditionVariable::Broadcast(condition)": [{"body": "dmConditionVariable::Broadcast(${1:condition})", "prefix": "dmConditionVariable::Broadcast(condition)", "description": "broadcast condition variable"}], "dmScript::CheckBuffer(L, index)": [{"body": "dmScript::CheckBuffer(${1:L}, ${2:index})", "prefix": "dmScript::CheckBuffer(L, index)", "description": "retrieve a HBuffer from the supplied lua state"}], "dmArray::dmArray": [{"body": "dmArray::dmArray()", "prefix": "dmArray::dmArray", "description": "empty auto-allocated array"}], "dmJson::Type": [{"body": "dmJson::Type", "prefix": "dmJson::Type", "description": "token type enumeration"}], "dmBuffer::GetSizeForValueType(type)": [{"body": "dmBuffer::GetSizeForValueType(${1:type})", "prefix": "dmBuffer::GetSizeForValueType(type)", "description": "get size of a value type"}], "dmArray::Back": [{"body": "dmArray::Back()", "prefix": "dmArray::Back", "description": "array back"}, {"body": "dmArray::Back()", "prefix": "dmArray::Back", "description": "array back (const)"}], "dmScript::GetMainThread(L)": [{"body": "dmScript::GetMainThread(${1:L})", "prefix": "dmScript::GetMainThread(L)", "description": ""}], "dmGraphics::GetNativeWindowsHWND": [{"body": "dmGraphics::GetNativeWindowsHWND()", "prefix": "dmGraphics::GetNativeWindowsHWND", "description": "get Win32 HWND"}], "dmGraphics::GetNativeiOSUIView": [{"body": "dmGraphics::GetNativeiOSUIView()", "prefix": "dmGraphics::GetNativeiOSUIView", "description": "get iOS UIView"}], "dmExtension::EventID": [{"body": "dmExtension::EventID", "prefix": "dmExtension::EventID", "description": "event id enumeration"}], "dmArray::End": [{"body": "dmArray::End()", "prefix": "dmArray::End", "description": "array end"}], "dmExtension::Result": [{"body": "dmExtension::Result", "prefix": "dmExtension::Result", "description": "result enumeration"}], "dmScript::CheckQuat(L, index)": [{"body": "dmScript::CheckQuat(${1:L}, ${2:index})", "prefix": "dmScript::CheckQuat(L, index)", "description": "check if the value is a Vectormath::Aos::Vector3"}], "dmLogWarning(format, args)": [{"body": "dmLogWarning", "prefix": "dmLogWarning(format, args)", "description": "macro for warning category logging"}], "dmConditionVariable::HConditionVariable": [{"body": "dmConditionVariable::HConditionVariable", "prefix": "dmConditionVariable::HConditionVariable", "description": "HConditionVariable type definition"}], "DM_LUA_STACK_CHECK(L, diff)": [{"body": "DM_LUA_STACK_CHECK", "prefix": "DM_LUA_STACK_CHECK(L, diff)", "description": "helper macro to validate the Lua stack state before leaving a function."}], "dmGraphics::GetNativeOSXNSView": [{"body": "dmGraphics::GetNativeOSXNSView()", "prefix": "dmGraphics::GetNativeOSXNSView", "description": "get OSX NSView"}], "dmBuffer::GetValueTypeString(result)": [{"body": "dmBuffer::GetValueTypeString(${1:result})", "prefix": "dmBuffer::GetValueTypeString(result)", "description": "value type to string"}], "dmArray::Size": [{"body": "dmArray::Size()", "prefix": "dmArray::Size", "description": "size of array"}], "dmStrlCat(dst, src, size)": [{"body": "dmStrlCat(${1:dst}, ${2:src}, ${3:size})", "prefix": "dmStrlCat(dst, src, size)", "description": "Size-bounded string concatenation."}], "dmBuffer::GetStreamType(buffer, stream_name, type, components)": [{"body": "dmBuffer::GetStreamType(${1:buffer}, ${2:stream_name}, ${3:type}, ${4:components})", "prefix": "dmBuffer::GetStreamType(buffer, stream_name, type, components)", "description": "get stream type and type count"}], "dmGraphics::GetNativeOSXNSWindow": [{"body": "dmGraphics::GetNativeOSXNSWindow()", "prefix": "dmGraphics::GetNativeOSXNSWindow", "description": "get OSX NSWindow"}], "dmArray::SetCapacity(capacity)": [{"body": "dmArray::SetCapacity(${1:capacity})", "prefix": "dmArray::SetCapacity(capacity)", "description": "array set capacity"}], "dmGraphics::GetNativeX11Window": [{"body": "dmGraphics::GetNativeX11Window()", "prefix": "dmGraphics::GetNativeX11Window", "description": "get Linux X11Window"}], "dmBuffer::GetBytes(buffer, out_bytes, out_size)": [{"body": "dmBuffer::GetBytes(${1:buffer}, ${2:out_bytes}, ${3:out_size})", "prefix": "dmBuffer::GetBytes(buffer, out_bytes, out_size)", "description": "get buffer as a byte array."}], "dmExtension::AppParams": [{"body": "dmExtension::AppParams", "prefix": "dmExtension::AppParams", "description": "application level callback data"}], "dmScript::IsInstanceValid(L)": [{"body": "dmScript::IsInstanceValid(${1:L})", "prefix": "dmScript::IsInstanceValid(L)", "description": ""}], "dmScript::PCall(L, nargs, nresult)": [{"body": "dmScript::PCall(${1:L}, ${2:nargs}, ${3:nresult})", "prefix": "dmScript::PCall(L, nargs, nresult)", "description": ""}], "dmJson::Type(L, doc, index, error_str_out, error_str_size)": [{"body": "dmJson::Type(${1:L}, ${2:doc}, ${3:index}, ${4:error_str_out}, ${5:error_str_size})", "prefix": "dmJson::Type(L, doc, index, error_str_out, error_str_size)", "description": "convert a dmJson::Document to a Lua table"}], "dmBuffer::Copy(dst_buffer_handle, src_buffer_handle)": [{"body": "dmBuffer::Copy(${1:dst_buffer_handle}, ${2:src_buffer_handle})", "prefix": "dmBuffer::Copy(dst_buffer_handle, src_buffer_handle)", "description": "copy a Buffer"}], "dmArray::Full": [{"body": "dmArray::Full()", "prefix": "dmArray::Full", "description": "array full"}], "DM_PLATFORM_OSX": [{"body": "DM_PLATFORM_OSX", "prefix": "DM_PLATFORM_OSX", "description": "Set if the platform is OSX "}], "dmScript::IsCallbackValid(cbk)": [{"body": "dmScript::IsCallbackValid(${1:cbk})", "prefix": "dmScript::IsCallbackValid(cbk)", "description": "Check if Lua callback is valid."}], "dmArray::Swap(rhs)": [{"body": "dmArray::Swap(${1:rhs})", "prefix": "dmArray::Swap(rhs)", "description": "array swap"}], "dmScript::ToMatrix4(L, index)": [{"body": "dmScript::ToMatrix4(${1:L}, ${2:index})", "prefix": "dmScript::ToMatrix4(L, index)", "description": "get the value at index as a Vectormath::Aos::Matrix4*"}], "dmScript::PushQuat(L, quat)": [{"body": "dmScript::PushQuat(${1:L}, ${2:quat})", "prefix": "dmScript::PushQuat(L, quat)", "description": "push a Vectormath::Aos::Quat onto the Lua stack"}], "DM_DECLARE_EXTENSION(symbol, name, appinit, appfinal, init, update, on_event, final)": [{"body": "DM_DECLARE_EXTENSION", "prefix": "DM_DECLARE_EXTENSION(symbol, name, appinit, appfinal, init, update, on_event, final)", "description": "declare a new extension"}], "dmScript::GetInstance(L)": [{"body": "dmScript::GetInstance(${1:L})", "prefix": "dmScript::GetInstance(L)", "description": ""}], "RegisteriOSUIApplicationDelegate(delegate)": [{"body": "RegisteriOSUIApplicationDelegate(${1:delegate})", "prefix": "RegisteriOSUIApplicationDelegate(delegate)", "description": "Register application delegate"}], "dmMutex::HMutex": [{"body": "dmMutex::HMutex", "prefix": "dmMutex::HMutex", "description": "HMutex type definition"}], "DM_ALIGN(x, a)": [{"body": "DM_ALIGN", "prefix": "DM_ALIGN(x, a)", "description": "value alignment macro"}], "dmConditionVariable::Signal(condition)": [{"body": "dmConditionVariable::Signal(${1:condition})", "prefix": "dmConditionVariable::Signal(condition)", "description": "signal condition variable"}], "DM_PLATFORM_ANDROID": [{"body": "DM_PLATFORM_ANDROID", "prefix": "DM_PLATFORM_ANDROID", "description": "Set if the platform is Android "}], "Free(document)": [{"body": "Free(${1:document})", "prefix": "Free(document)", "description": "deallocates json document"}], "dmConditionVariable::Delete(mutex)": [{"body": "dmConditionVariable::Delete(${1:mutex})", "prefix": "dmConditionVariable::Delete(mutex)", "description": "delete condition variable"}], "dmScript::CheckVector4(L, index)": [{"body": "dmScript::CheckVector4(${1:L}, ${2:index})", "prefix": "dmScript::CheckVector4(L, index)", "description": "check if the value is a Vectormath::Aos::Vector3"}], "dmArray::Empty": [{"body": "dmArray::Empty()", "prefix": "dmArray::Empty", "description": "array empty"}], "dmScript::IsBuffer(L, index)": [{"body": "dmScript::IsBuffer(${1:L}, ${2:index})", "prefix": "dmScript::IsBuffer(L, index)", "description": "check if the value is a dmScript::LuaHBuffer"}], "dmScript::SetInstance(L)": [{"body": "dmScript::SetInstance(${1:L})", "prefix": "dmScript::SetInstance(L)", "description": ""}], "dmGraphics::GetNativeAndroidEGLContext": [{"body": "dmGraphics::GetNativeAndroidEGLContext()", "prefix": "dmGraphics::GetNativeAndroidEGLContext", "description": "get Android EGLContext"}], "DM_DLLEXPORT": [{"body": "DM_DLLEXPORT", "prefix": "DM_DLLEXPORT", "description": "storage-class attribute for shared library export/import"}], "dmScript::LuaHBuffer": [{"body": "dmScript::LuaHBuffer", "prefix": "dmScript::LuaHBuffer", "description": "Lua wrapper for a dmBuffer::HBuffer"}], "ValueType": [{"body": "ValueType", "prefix": "ValueType", "description": "valueType enumeration"}], "dmGraphics::GetNativeAndroidEGLSurface": [{"body": "dmGraphics::GetNativeAndroidEGLSurface()", "prefix": "dmGraphics::GetNativeAndroidEGLSurface", "description": "get Android EGLSurface"}], "dmGraphics::GetNativeOSXNSOpenGLContext": [{"body": "dmGraphics::GetNativeOSXNSOpenGLContext()", "prefix": "dmGraphics::GetNativeOSXNSOpenGLContext", "description": "get OSX NSOpenGLContext"}], "extension_callback_t(params)": [{"body": "extension_callback_t", "prefix": "extension_callback_t(params)", "description": "Extra extension callback typedef"}], "dmLogError(format, args)": [{"body": "dmLogError", "prefix": "dmLogError(format, args)", "description": "macro for error category logging"}], "Result": [{"body": "Result", "prefix": "Result", "description": "result enumeration"}], "dmBuffer::HBuffer": [{"body": "dmBuffer::HBuffer", "prefix": "dmBuffer::HBuffer", "description": "HBuffer type definition"}], "RegisterCallback(callback_type, func)": [{"body": "RegisterCallback(${1:callback_type}, ${2:func})", "prefix": "RegisterCallback(callback_type, func)", "description": "Register extra extension callbacks."}], "dmConditionVariable::New": [{"body": "dmConditionVariable::New()", "prefix": "dmConditionVariable::New", "description": "create condition variable"}], "dmArray::EraseSwapRef(element)": [{"body": "dmArray::EraseSwapRef(${1:element})", "prefix": "dmArray::EraseSwapRef(element)", "description": "array reference eraseswap"}], "dmExtension::Params": [{"body": "dmExtension::Params", "prefix": "dmExtension::Params", "description": "extension level callback data"}], "dmScript::CreateCallback(L, index)": [{"body": "dmScript::CreateCallback(${1:L}, ${2:index})", "prefix": "dmScript::CreateCallback(L, index)", "description": "Register a Lua callback."}], "DM_LUA_ERROR(fmt, args)": [{"body": "DM_LUA_ERROR", "prefix": "DM_LUA_ERROR(fmt, args)", "description": "helper macro to validate the Lua stack state and throw a lua error."}], "Parse(buffer, document)": [{"body": "Parse(${1:buffer}, ${2:document})", "prefix": "Parse(buffer, document)", "description": "parse json data"}], "dmGraphics::GetNativeiOSUIWindow": [{"body": "dmGraphics::GetNativeiOSUIWindow()", "prefix": "dmGraphics::GetNativeiOSUIWindow", "description": "get iOS UIWindow"}], "dmGraphics::GetNativeAndroidJavaVM": [{"body": "dmGraphics::GetNativeAndroidJavaVM()", "prefix": "dmGraphics::GetNativeAndroidJavaVM", "description": "get Android native JavaVM"}], "dmArray::SetSize(size)": [{"body": "dmArray::SetSize(${1:size})", "prefix": "dmArray::SetSize(size)", "description": "array set size"}], "dmArray::EraseSwap(index)": [{"body": "dmArray::EraseSwap(${1:index})", "prefix": "dmArray::EraseSwap(index)", "description": "array eraseswap"}], "dmExtension::CallbackType": [{"body": "dmExtension::CallbackType", "prefix": "dmExtension::CallbackType", "description": "extra callback enumeration"}], "dmHashBuffer64(buffer, buffer_len)": [{"body": "dmHashBuffer64(${1:buffer}, ${2:buffer_len})", "prefix": "dmHashBuffer64(buffer, buffer_len)", "description": "calculate 64-bit hash value from buffer"}], "dmArray::Front": [{"body": "dmArray::Front()", "prefix": "dmArray::Front", "description": "array front"}, {"body": "dmArray::Front()", "prefix": "dmArray::Front", "description": "array front (const)"}], "dmBuffer::Destroy(buffer)": [{"body": "dmBuffer::Destroy(${1:buffer})", "prefix": "dmBuffer::Destroy(buffer)", "description": "destroy Buffer."}], "dmMutex::Delete(mutex)": [{"body": "dmMutex::Delete(${1:mutex})", "prefix": "dmMutex::Delete(mutex)", "description": "delete Mutex."}], "dmArray::Push(element)": [{"body": "dmArray::Push(${1:element})", "prefix": "dmArray::Push(element)", "description": "array push"}]}