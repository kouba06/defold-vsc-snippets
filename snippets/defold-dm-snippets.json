{"dmLogDebug(format, args)": [{"prefix": "dmLogDebug(format, args)", "body": "dmLogDebug", "description": "macro for debug category logging"}], "dmLogError(format, args)": [{"prefix": "dmLogError(format, args)", "body": "dmLogError", "description": "macro for error category logging"}], "dmLogFatal(format, args)": [{"prefix": "dmLogFatal(format, args)", "body": "dmLogFatal", "description": "macro for fatal category logging"}], "dmLogInfo(format, args)": [{"prefix": "dmLogInfo(format, args)", "body": "dmLogInfo", "description": "macro for info category logging"}], "dmLogUserDebug(format, args)": [{"prefix": "dmLogUserDebug(format, args)", "body": "dmLogUserDebug", "description": "macro for debug category logging"}], "dmLogWarning(format, args)": [{"prefix": "dmLogWarning(format, args)", "body": "dmLogWarning", "description": "macro for warning category logging"}], "DM_MUTEX_SCOPED_LOCK(mutex)": [{"prefix": "DM_MUTEX_SCOPED_LOCK(mutex)", "body": "DM_MUTEX_SCOPED_LOCK", "description": "macro for scope lifetime Mutex locking"}], "dmMutex::Delete(mutex)": [{"prefix": "dmMutex::Delete(mutex)", "body": "dmMutex::Delete(${1:mutex})", "description": "delete Mutex."}], "dmMutex::HMutex": [{"prefix": "dmMutex::HMutex", "body": "dmMutex::HMutex", "description": "HMutex type definition"}], "dmMutex::Lock(mutex)": [{"prefix": "dmMutex::Lock(mutex)", "body": "dmMutex::Lock(${1:mutex})", "description": "lock Mutex."}], "dmMutex::New": [{"prefix": "dmMutex::New", "body": "dmMutex::New()", "description": "create Mutex"}], "dmMutex::TryLock(mutex)": [{"prefix": "dmMutex::TryLock(mutex)", "body": "dmMutex::TryLock(${1:mutex})", "description": "non-blocking lock of Mutex."}], "dmMutex::Unlock(mutex)": [{"prefix": "dmMutex::Unlock(mutex)", "body": "dmMutex::Unlock(${1:mutex})", "description": "unlock Mutex."}], "dmGraphics::GetNativeAndroidActivity": [{"prefix": "dmGraphics::GetNativeAndroidActivity", "body": "dmGraphics::GetNativeAndroidActivity()", "description": "get Android native jobject"}], "dmGraphics::GetNativeAndroidApp": [{"prefix": "dmGraphics::GetNativeAndroidApp", "body": "dmGraphics::GetNativeAndroidApp()", "description": "get Android app object"}], "dmGraphics::GetNativeAndroidEGLContext": [{"prefix": "dmGraphics::GetNativeAndroidEGLContext", "body": "dmGraphics::GetNativeAndroidEGLContext()", "description": "get Android EGLContext"}], "dmGraphics::GetNativeAndroidEGLSurface": [{"prefix": "dmGraphics::GetNativeAndroidEGLSurface", "body": "dmGraphics::GetNativeAndroidEGLSurface()", "description": "get Android EGLSurface"}], "dmGraphics::GetNativeAndroidJavaVM": [{"prefix": "dmGraphics::GetNativeAndroidJavaVM", "body": "dmGraphics::GetNativeAndroidJavaVM()", "description": "get Android native JavaVM"}], "dmGraphics::GetNativeOSXNSOpenGLContext": [{"prefix": "dmGraphics::GetNativeOSXNSOpenGLContext", "body": "dmGraphics::GetNativeOSXNSOpenGLContext()", "description": "get OSX NSOpenGLContext"}], "dmGraphics::GetNativeOSXNSView": [{"prefix": "dmGraphics::GetNativeOSXNSView", "body": "dmGraphics::GetNativeOSXNSView()", "description": "get OSX NSView"}], "dmGraphics::GetNativeOSXNSWindow": [{"prefix": "dmGraphics::GetNativeOSXNSWindow", "body": "dmGraphics::GetNativeOSXNSWindow()", "description": "get OSX NSWindow"}], "dmGraphics::GetNativeWindowsHGLRC": [{"prefix": "dmGraphics::GetNativeWindowsHGLRC", "body": "dmGraphics::GetNativeWindowsHGLRC()", "description": "get Win32 HGLRC"}], "dmGraphics::GetNativeWindowsHWND": [{"prefix": "dmGraphics::GetNativeWindowsHWND", "body": "dmGraphics::GetNativeWindowsHWND()", "description": "get Win32 HWND"}], "dmGraphics::GetNativeX11GLXContext": [{"prefix": "dmGraphics::GetNativeX11GLXContext", "body": "dmGraphics::GetNativeX11GLXContext()", "description": "get Linux X11GLXContext"}], "dmGraphics::GetNativeX11Window": [{"prefix": "dmGraphics::GetNativeX11Window", "body": "dmGraphics::GetNativeX11Window()", "description": "get Linux X11Window"}], "dmGraphics::GetNativeiOSEAGLContext": [{"prefix": "dmGraphics::GetNativeiOSEAGLContext", "body": "dmGraphics::GetNativeiOSEAGLContext()", "description": "get iOS EAGLContext"}], "dmGraphics::GetNativeiOSUIView": [{"prefix": "dmGraphics::GetNativeiOSUIView", "body": "dmGraphics::GetNativeiOSUIView()", "description": "get iOS UIView"}], "dmGraphics::GetNativeiOSUIWindow": [{"prefix": "dmGraphics::GetNativeiOSUIWindow", "body": "dmGraphics::GetNativeiOSUIWindow()", "description": "get iOS UIWindow"}], "DM_DLLEXPORT": [{"prefix": "DM_DLLEXPORT", "body": "DM_DLLEXPORT", "description": "storage-class attribute for shared library export/import"}], "dmHashBuffer64(buffer, buffer_len)": [{"prefix": "dmHashBuffer64(buffer, buffer_len)", "body": "dmHashBuffer64(${1:buffer}, ${2:buffer_len})", "description": "calculate 64-bit hash value from buffer"}], "dmHashString64(string)": [{"prefix": "dmHashString64(string)", "body": "dmHashString64(${1:string})", "description": "calculate 64-bit hash value from string"}], "dmhash_t": [{"prefix": "dmhash_t", "body": "dmhash_t", "description": "dmhash_t type definition"}], "DM_LUA_ERROR(fmt, args)": [{"prefix": "DM_LUA_ERROR(fmt, args)", "body": "DM_LUA_ERROR", "description": "helper macro to validate the Lua stack state and throw a lua error."}], "DM_LUA_STACK_CHECK(L, diff)": [{"prefix": "DM_LUA_STACK_CHECK(L, diff)", "body": "DM_LUA_STACK_CHECK", "description": "helper macro to validate the Lua stack state before leaving a function."}], "dmJson::Type(L, doc, index, error_str_out, error_str_size)": [{"prefix": "dmJson::Type(L, doc, index, error_str_out, error_str_size)", "body": "dmJson::Type(${1:L}, ${2:doc}, ${3:index}, ${4:error_str_out}, ${5:error_str_size})", "description": "convert a dmJson::Document to a Lua table"}], "dmScript::CheckBuffer(L, index)": [{"prefix": "dmScript::CheckBuffer(L, index)", "body": "dmScript::CheckBuffer(${1:L}, ${2:index})", "description": "retrieve a HBuffer from the supplied lua state"}], "dmScript::CheckMatrix4(L, index)": [{"prefix": "dmScript::CheckMatrix4(L, index)", "body": "dmScript::CheckMatrix4(${1:L}, ${2:index})", "description": "check if the value is a Vectormath::Aos::Matrix4"}], "dmScript::CheckQuat(L, index)": [{"prefix": "dmScript::CheckQuat(L, index)", "body": "dmScript::CheckQuat(${1:L}, ${2:index})", "description": "check if the value is a Vectormath::Aos::Vector3"}], "dmScript::CheckVector3(L, index)": [{"prefix": "dmScript::CheckVector3(L, index)", "body": "dmScript::CheckVector3(${1:L}, ${2:index})", "description": "check if the value is a Vectormath::Aos::Vector3"}], "dmScript::CheckVector4(L, index)": [{"prefix": "dmScript::CheckVector4(L, index)", "body": "dmScript::CheckVector4(${1:L}, ${2:index})", "description": "check if the value is a Vectormath::Aos::Vector3"}], "dmScript::GetInstance(L)": [{"prefix": "dmScript::GetInstance(L)", "body": "dmScript::GetInstance(${1:L})", "description": ""}], "dmScript::GetMainThread(L)": [{"prefix": "dmScript::GetMainThread(L)", "body": "dmScript::GetMainThread(${1:L})", "description": ""}], "dmScript::IsBuffer(L, index)": [{"prefix": "dmScript::IsBuffer(L, index)", "body": "dmScript::IsBuffer(${1:L}, ${2:index})", "description": "check if the value is a dmScript::LuaHBuffer"}], "dmScript::IsInstanceValid(L)": [{"prefix": "dmScript::IsInstanceValid(L)", "body": "dmScript::IsInstanceValid(${1:L})", "description": ""}], "dmScript::LuaHBuffer": [{"prefix": "dmScript::LuaHBuffer", "body": "dmScript::LuaHBuffer", "description": "Lua wrapper for a dmBuffer::HBuffer"}], "dmScript::PushBuffer(L, buffer)": [{"prefix": "dmScript::PushBuffer(L, buffer)", "body": "dmScript::PushBuffer(${1:L}, ${2:buffer})", "description": "push a LuaHBuffer onto the supplied lua state"}], "dmScript::PushMatrix4(L, matrix)": [{"prefix": "dmScript::PushMatrix4(L, matrix)", "body": "dmScript::PushMatrix4(${1:L}, ${2:matrix})", "description": "push a Vectormath::Aos::Matrix4 onto the Lua stack"}], "dmScript::PushQuat(L, quat)": [{"prefix": "dmScript::PushQuat(L, quat)", "body": "dmScript::PushQuat(${1:L}, ${2:quat})", "description": "push a Vectormath::Aos::Quat onto the Lua stack"}], "dmScript::PushVector3(L, v)": [{"prefix": "dmScript::PushVector3(L, v)", "body": "dmScript::PushVector3(${1:L}, ${2:v})", "description": "push a Vectormath::Aos::Vector3 onto the Lua stack"}], "dmScript::PushVector4(L, v)": [{"prefix": "dmScript::PushVector4(L, v)", "body": "dmScript::PushVector4(${1:L}, ${2:v})", "description": "push a Vectormath::Aos::Vector4 on the stack"}], "dmScript::Ref(L, table)": [{"prefix": "dmScript::Ref(L, table)", "body": "dmScript::Ref(${1:L}, ${2:table})", "description": "wrapper for luaL_ref."}], "dmScript::SetInstance(L)": [{"prefix": "dmScript::SetInstance(L)", "body": "dmScript::SetInstance(${1:L})", "description": ""}], "dmScript::ToMatrix4(L, index)": [{"prefix": "dmScript::ToMatrix4(L, index)", "body": "dmScript::ToMatrix4(${1:L}, ${2:index})", "description": "get the value at index as a Vectormath::Aos::Matrix4*"}], "dmScript::ToQuat(L, index)": [{"prefix": "dmScript::ToQuat(L, index)", "body": "dmScript::ToQuat(${1:L}, ${2:index})", "description": "get the value at index as a Vectormath::Aos::Quat*"}], "dmScript::ToVector3(L, index)": [{"prefix": "dmScript::ToVector3(L, index)", "body": "dmScript::ToVector3(${1:L}, ${2:index})", "description": "get the value at index as a Vectormath::Aos::Vector3*"}], "dmScript::ToVector4(L, index)": [{"prefix": "dmScript::ToVector4(L, index)", "body": "dmScript::ToVector4(${1:L}, ${2:index})", "description": "get the value at index as a Vectormath::Aos::Vector4*"}], "dmScript::Unref(L, table, reference)": [{"prefix": "dmScript::Unref(L, table, reference)", "body": "dmScript::Unref(${1:L}, ${2:table}, ${3:reference})", "description": "wrapper for luaL_unref."}], "DM_DECLARE_EXTENSION(symbol, name, appinit, appfinal, init, update, on_event, final)": [{"prefix": "DM_DECLARE_EXTENSION(symbol, name, appinit, appfinal, init, update, on_event, final)", "body": "DM_DECLARE_EXTENSION", "description": "declare a new extension"}], "DM_PLATFORM_ANDROID": [{"prefix": "DM_PLATFORM_ANDROID", "body": "DM_PLATFORM_ANDROID", "description": "Set if the platform is Android "}], "DM_PLATFORM_HTML5": [{"prefix": "DM_PLATFORM_HTML5", "body": "DM_PLATFORM_HTML5", "description": "Set if the platform is Html5 "}], "DM_PLATFORM_IOS": [{"prefix": "DM_PLATFORM_IOS", "body": "DM_PLATFORM_IOS", "description": "Set if the platform is iPhoneOS "}], "DM_PLATFORM_LINUX": [{"prefix": "DM_PLATFORM_LINUX", "body": "DM_PLATFORM_LINUX", "description": "Set if the platform is Linux "}], "DM_PLATFORM_OSX": [{"prefix": "DM_PLATFORM_OSX", "body": "DM_PLATFORM_OSX", "description": "Set if the platform is OSX "}], "DM_PLATFORM_WINDOWS": [{"prefix": "DM_PLATFORM_WINDOWS", "body": "DM_PLATFORM_WINDOWS", "description": "Set if the platform is Windows  (on both x86 and x86_64)"}], "OnActivityResult(env, activity, request_code, result_code, result)": [{"prefix": "OnActivityResult(env, activity, request_code, result_code, result)", "body": "OnActivityResult", "description": "OnActivityResult callback typedef"}], "RegisterAndroidOnActivityResultListener([type:dmExtension::OnActivityResult])": [{"prefix": "RegisterAndroidOnActivityResultListener([type:dmExtension::OnActivityResult])", "body": "RegisterAndroidOnActivityResultListener(${1:[type:dmExtension::OnActivityResult]})", "description": "register Android activity result callback"}], "RegisteriOSUIApplicationDelegate(delegate)": [{"prefix": "RegisteriOSUIApplicationDelegate(delegate)", "body": "RegisteriOSUIApplicationDelegate(${1:delegate})", "description": "Register application delegate"}], "UnregisterAndroidOnActivityResultListener([type:dmExtension::OnActivityResult])": [{"prefix": "UnregisterAndroidOnActivityResultListener([type:dmExtension::OnActivityResult])", "body": "UnregisterAndroidOnActivityResultListener(${1:[type:dmExtension::OnActivityResult]})", "description": "unregister Android activity result callback"}], "UnregisteriOSUIApplicationDelegate(delegate)": [{"prefix": "UnregisteriOSUIApplicationDelegate(delegate)", "body": "UnregisteriOSUIApplicationDelegate(${1:delegate})", "description": "Unregister an application delegate"}], "dmExtension::AppParams": [{"prefix": "dmExtension::AppParams", "body": "dmExtension::AppParams", "description": "application level callback data"}], "dmExtension::Event": [{"prefix": "dmExtension::Event", "body": "dmExtension::Event", "description": "event callback data"}], "dmExtension::EventID": [{"prefix": "dmExtension::EventID", "body": "dmExtension::EventID", "description": "event id enumeration"}], "dmExtension::Params": [{"prefix": "dmExtension::Params", "body": "dmExtension::Params", "description": "extension level callback data"}], "dmExtension::Result": [{"prefix": "dmExtension::Result", "body": "dmExtension::Result", "description": "result enumeration"}], "dmConditionVariable::Broadcast(condition)": [{"prefix": "dmConditionVariable::Broadcast(condition)", "body": "dmConditionVariable::Broadcast(${1:condition})", "description": "broadcast condition variable"}], "dmConditionVariable::Delete(mutex)": [{"prefix": "dmConditionVariable::Delete(mutex)", "body": "dmConditionVariable::Delete(${1:mutex})", "description": "delete condition variable"}], "dmConditionVariable::HConditionVariable": [{"prefix": "dmConditionVariable::HConditionVariable", "body": "dmConditionVariable::HConditionVariable", "description": "HConditionVariable type definition"}], "dmConditionVariable::New": [{"prefix": "dmConditionVariable::New", "body": "dmConditionVariable::New()", "description": "create condition variable"}], "dmConditionVariable::Signal(condition)": [{"prefix": "dmConditionVariable::Signal(condition)", "body": "dmConditionVariable::Signal(${1:condition})", "description": "signal condition variable"}], "dmConditionVariable::Wait(condition, mutex)": [{"prefix": "dmConditionVariable::Wait(condition, mutex)", "body": "dmConditionVariable::Wait(${1:condition}, ${2:mutex})", "description": "wait for condition variable"}], "--config=\n```bash\n$ ./dmengine --config=project.mode=TEST --config=project.server=http://testserver.com\n```": [{"prefix": "--config=\n```bash\n$ ./dmengine --config=project.mode=TEST --config=project.server=http://testserver.com\n```", "body": "--config=\n```bash\n$ ./dmengine --config=project.mode=TEST --config=project.server=http://testserver.com\n```", "description": "override game property"}], "--verify-graphics-calls=\n```bash\n$ ./dmengine --verify-graphics-calls=false\n```": [{"prefix": "--verify-graphics-calls=\n```bash\n$ ./dmengine --verify-graphics-calls=false\n```", "body": "--verify-graphics-calls=\n```bash\n$ ./dmengine --verify-graphics-calls=false\n```", "description": "disables OpenGL error checking"}], "DM_LOG_PORT": [{"prefix": "DM_LOG_PORT", "body": "DM_LOG_PORT", "description": "sets the logging port"}], "DM_QUIT_ON_ESC": [{"prefix": "DM_QUIT_ON_ESC", "body": "DM_QUIT_ON_ESC", "description": "enables quit on escape key"}], "DM_SAVE_HOME": [{"prefix": "DM_SAVE_HOME", "body": "DM_SAVE_HOME", "description": "override the save directory"}], "DM_SERVICE_PORT": [{"prefix": "DM_SERVICE_PORT", "body": "DM_SERVICE_PORT", "description": "set the engine service port"}], "launch_project\n```bash\n$ ./dmengine some/folder/game.projectc\n```": [{"prefix": "launch_project\n```bash\n$ ./dmengine some/folder/game.projectc\n```", "body": "launch_project\n```bash\n$ ./dmengine some/folder/game.projectc\n```", "description": "launch with a specific project"}], "dmConfigFile::GetFloat(config, key, default_value)": [{"prefix": "dmConfigFile::GetFloat(config, key, default_value)", "body": "dmConfigFile::GetFloat(${1:config}, ${2:key}, ${3:default_value})", "description": "get config value as float"}], "dmConfigFile::GetInt(config, key, default_value)": [{"prefix": "dmConfigFile::GetInt(config, key, default_value)", "body": "dmConfigFile::GetInt(${1:config}, ${2:key}, ${3:default_value})", "description": "get config value as int"}], "dmConfigFile::GetString(config, key, default_value)": [{"prefix": "dmConfigFile::GetString(config, key, default_value)", "body": "dmConfigFile::GetString(${1:config}, ${2:key}, ${3:default_value})", "description": "get config value as string"}], "dmConfigFile::HConfig": [{"prefix": "dmConfigFile::HConfig", "body": "dmConfigFile::HConfig", "description": "HConfig type definition"}], "Free(document)": [{"prefix": "Free(document)", "body": "Free(${1:document})", "description": "deallocates json document"}], "Parse(buffer, buffer_length, document)": [{"prefix": "Parse(buffer, buffer_length, document)", "body": "Parse(${1:buffer}, ${2:buffer_length}, ${3:document})", "description": "parse json data"}], "Parse(buffer, document)": [{"prefix": "Parse(buffer, document)", "body": "Parse(${1:buffer}, ${2:document})", "description": "parse json data"}], "dmJson::Document": [{"prefix": "dmJson::Document", "body": "dmJson::Document", "description": "Json document"}], "dmJson::Node": [{"prefix": "dmJson::Node", "body": "dmJson::Node", "description": "Json node representation."}], "dmJson::Result": [{"prefix": "dmJson::Result", "body": "dmJson::Result", "description": "result enumeration"}], "dmJson::Type": [{"prefix": "dmJson::Type", "body": "dmJson::Type", "description": "token type enumeration"}], "dmArray::Back": [{"prefix": "dmArray::Back", "body": "dmArray::Back()", "description": "array back"}, {"prefix": "dmArray::Back", "body": "dmArray::Back()", "description": "array back (const)"}], "dmArray::Begin": [{"prefix": "dmArray::Begin", "body": "dmArray::Begin()", "description": "array begin"}], "dmArray::Capacity": [{"prefix": "dmArray::Capacity", "body": "dmArray::Capacity()", "description": "capacity of array"}], "dmArray::Empty": [{"prefix": "dmArray::Empty", "body": "dmArray::Empty()", "description": "array empty"}], "dmArray::End": [{"prefix": "dmArray::End", "body": "dmArray::End()", "description": "array end"}], "dmArray::EraseSwap(index)": [{"prefix": "dmArray::EraseSwap(index)", "body": "dmArray::EraseSwap(${1:index})", "description": "array eraseswap"}], "dmArray::EraseSwapRef(element)": [{"prefix": "dmArray::EraseSwapRef(element)", "body": "dmArray::EraseSwapRef(${1:element})", "description": "array reference eraseswap"}], "dmArray::Front": [{"prefix": "dmArray::Front", "body": "dmArray::Front()", "description": "array front"}, {"prefix": "dmArray::Front", "body": "dmArray::Front()", "description": "array front (const)"}], "dmArray::Full": [{"prefix": "dmArray::Full", "body": "dmArray::Full()", "description": "array full"}], "dmArray::OffsetCapacity(offset)": [{"prefix": "dmArray::OffsetCapacity(offset)", "body": "dmArray::OffsetCapacity(${1:offset})", "description": "array offset capacity"}], "dmArray::Pop": [{"prefix": "dmArray::Pop", "body": "dmArray::Pop()", "description": "array pop"}], "dmArray::Push(element)": [{"prefix": "dmArray::Push(element)", "body": "dmArray::Push(${1:element})", "description": "array push"}], "dmArray::PushArray(array, count)": [{"prefix": "dmArray::PushArray(array, count)", "body": "dmArray::PushArray(${1:array}, ${2:count})", "description": "array push array"}], "dmArray::Remaining": [{"prefix": "dmArray::Remaining", "body": "dmArray::Remaining()", "description": "remaining size of array"}], "dmArray::SetCapacity(capacity)": [{"prefix": "dmArray::SetCapacity(capacity)", "body": "dmArray::SetCapacity(${1:capacity})", "description": "array set capacity"}], "dmArray::SetSize(size)": [{"prefix": "dmArray::SetSize(size)", "body": "dmArray::SetSize(${1:size})", "description": "array set size"}], "dmArray::Size": [{"prefix": "dmArray::Size", "body": "dmArray::Size()", "description": "size of array"}], "dmArray::Swap(rhs)": [{"prefix": "dmArray::Swap(rhs)", "body": "dmArray::Swap(${1:rhs})", "description": "array swap"}], "dmArray::dmArray": [{"prefix": "dmArray::dmArray", "body": "dmArray::dmArray()", "description": "empty auto-allocated array"}], "dmArray::dmArray(user_array, size, capacity)": [{"prefix": "dmArray::dmArray(user_array, size, capacity)", "body": "dmArray::dmArray(${1:user_array}, ${2:size}, ${3:capacity})", "description": "user-allocated array"}], "dmArray::operator[](index)": [{"prefix": "dmArray::operator[](index)", "body": "dmArray::operator[](${1:index})", "description": "array operator[]"}, {"prefix": "dmArray::operator[](index)", "body": "dmArray::operator[](${1:index})", "description": "array operator[] (const)"}], "dmArray::~dmArray": [{"prefix": "dmArray::~dmArray", "body": "dmArray::~dmArray()", "description": "array destructor"}], "Result": [{"prefix": "Result", "body": "Result", "description": "result enumeration"}], "ValueType": [{"prefix": "ValueType", "body": "ValueType", "description": "valueType enumeration"}], "dmBuffer::Create(count, streams_decl, streams_decl_count, out_buffer)": [{"prefix": "dmBuffer::Create(count, streams_decl, streams_decl_count, out_buffer)", "body": "dmBuffer::Create(${1:count}, ${2:streams_decl}, ${3:streams_decl_count}, ${4:out_buffer})", "description": "create Buffer"}], "dmBuffer::Destroy(buffer)": [{"prefix": "dmBuffer::Destroy(buffer)", "body": "dmBuffer::Destroy(${1:buffer})", "description": "destroy Buffer."}], "dmBuffer::GetBytes(buffer, out_bytes, out_size)": [{"prefix": "dmBuffer::GetBytes(buffer, out_bytes, out_size)", "body": "dmBuffer::GetBytes(${1:buffer}, ${2:out_bytes}, ${3:out_size})", "description": "get buffer as a byte array."}], "dmBuffer::GetCount(buffer, count)": [{"prefix": "dmBuffer::GetCount(buffer, count)", "body": "dmBuffer::GetCount(${1:buffer}, ${2:count})", "description": "get buffer count."}], "dmBuffer::GetResultString(result)": [{"prefix": "dmBuffer::GetResultString(result)", "body": "dmBuffer::GetResultString(${1:result})", "description": "result to string"}], "dmBuffer::GetSizeForValueType(type)": [{"prefix": "dmBuffer::GetSizeForValueType(type)", "body": "dmBuffer::GetSizeForValueType(${1:type})", "description": "get size of a value type"}], "dmBuffer::GetStream(buffer, stream_name, stream, count, components, stride)": [{"prefix": "dmBuffer::GetStream(buffer, stream_name, stream, count, components, stride)", "body": "dmBuffer::GetStream(${1:buffer}, ${2:stream_name}, ${3:stream}, ${4:count}, ${5:components}, ${6:stride})", "description": "get stream from buffer."}], "dmBuffer::GetStreamType(buffer, stream_name, type, components)": [{"prefix": "dmBuffer::GetStreamType(buffer, stream_name, type, components)", "body": "dmBuffer::GetStreamType(${1:buffer}, ${2:stream_name}, ${3:type}, ${4:components})", "description": "get stream type and type count"}], "dmBuffer::GetValueTypeString(result)": [{"prefix": "dmBuffer::GetValueTypeString(result)", "body": "dmBuffer::GetValueTypeString(${1:result})", "description": "value type to string"}], "dmBuffer::HBuffer": [{"prefix": "dmBuffer::HBuffer", "body": "dmBuffer::HBuffer", "description": "HBuffer type definition"}], "dmBuffer::IsBufferValid(buffer)": [{"prefix": "dmBuffer::IsBufferValid(buffer)", "body": "dmBuffer::IsBufferValid(${1:buffer})", "description": "check buffer handle"}], "dmBuffer::StreamDeclaration": [{"prefix": "dmBuffer::StreamDeclaration", "body": "dmBuffer::StreamDeclaration", "description": "StreamDeclaration struct"}], "dmBuffer::ValidateBuffer(buffer)": [{"prefix": "dmBuffer::ValidateBuffer(buffer)", "body": "dmBuffer::ValidateBuffer(${1:buffer})", "description": "validate buffer."}], "DM_ALIGN(x, a)": [{"prefix": "DM_ALIGN(x, a)", "body": "DM_ALIGN", "description": "value alignment macro"}], "DM_ALIGNED(a)": [{"prefix": "DM_ALIGNED(a)", "body": "DM_ALIGNED", "description": "data structure alignment macro"}]}